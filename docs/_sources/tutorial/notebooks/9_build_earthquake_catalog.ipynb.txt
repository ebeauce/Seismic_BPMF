{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Build Earthquake Catalog\n",
    "\n",
    "In this final notebook, we read the matched-filter database, remove the multiple detections and write a clean earthquake catalog in a csv file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "n_CPUs = 12\n",
    "os.environ[\"OMP_NUM_THREADS\"] = str(n_CPUs)\n",
    "\n",
    "import BPMF\n",
    "import glob\n",
    "import h5py as h5\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import sys\n",
    "\n",
    "from BPMF.data_reader_examples import data_reader_mseed\n",
    "from tqdm import tqdm\n",
    "from time import time as give_time\n",
    "\n",
    "\n",
    "pd.set_option('display.width', 1000)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "# PROGRAM PARAMETERS\n",
    "NETWORK_FILENAME = \"network.csv\"\n",
    "TEMPLATE_DB = \"template_db\"\n",
    "MATCHED_FILTER_DB = \"matched_filter_db\"\n",
    "OUTPUT_CSV_FILENAME = \"final_catalog.csv\"\n",
    "OUTPUT_DB_FILENAME = \"final_catalog.h5\"\n",
    "BACKPROJ_DB_FILENAME = \"reloc_bp.h5\"\n",
    "CHECK_SUMMARY_FILE = False\n",
    "PATH_MF = os.path.join(BPMF.cfg.OUTPUT_PATH, MATCHED_FILTER_DB)\n",
    "DATA_FOLDER = \"preprocessed_2_12\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "# read network metadata\n",
    "net = BPMF.dataset.Network(NETWORK_FILENAME)\n",
    "net.read()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Read the detected events' metadata for each template"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Reading catalog:   0%|          | 0/12 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Reading catalog: 100%|██████████| 12/12 [00:00<00:00, 17.53it/s]\n"
     ]
    }
   ],
   "source": [
    "# template filenames\n",
    "template_filenames = glob.glob(os.path.join(BPMF.cfg.OUTPUT_PATH, TEMPLATE_DB, \"template*\"))\n",
    "template_filenames.sort()\n",
    "\n",
    "# initialize the template group\n",
    "template_group = BPMF.dataset.TemplateGroup.read_from_files(template_filenames, net)\n",
    "template_group.read_catalog(\n",
    "    extra_attributes=[\"cc\"],\n",
    "    progress=True,\n",
    "    db_path=PATH_MF,\n",
    "    check_summary_file=CHECK_SUMMARY_FILE,\n",
    ")"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `BPMF.dataset.TemplateGroup` now has a `catalog` attribute, which is a `BPMF.dataset.Catalog` instance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<BPMF.dataset.Catalog at 0x7fad01ebfca0>"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "template_group.catalog"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>depth</th>\n",
       "      <th>origin_time</th>\n",
       "      <th>cc</th>\n",
       "      <th>tid</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>event_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5.0</th>\n",
       "      <td>30.260000</td>\n",
       "      <td>40.630000</td>\n",
       "      <td>-0.500000</td>\n",
       "      <td>2012-07-26 00:20:46.200</td>\n",
       "      <td>0.333776</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.0</th>\n",
       "      <td>30.322070</td>\n",
       "      <td>40.726875</td>\n",
       "      <td>10.695312</td>\n",
       "      <td>2012-07-26 00:58:10.840</td>\n",
       "      <td>0.252654</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.0</th>\n",
       "      <td>30.303516</td>\n",
       "      <td>40.723750</td>\n",
       "      <td>10.390625</td>\n",
       "      <td>2012-07-26 00:58:10.920</td>\n",
       "      <td>0.210979</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.0</th>\n",
       "      <td>30.334766</td>\n",
       "      <td>40.718750</td>\n",
       "      <td>8.765625</td>\n",
       "      <td>2012-07-26 00:58:11.080</td>\n",
       "      <td>0.297173</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.0</th>\n",
       "      <td>30.320117</td>\n",
       "      <td>40.721875</td>\n",
       "      <td>9.476562</td>\n",
       "      <td>2012-07-26 00:58:11.080</td>\n",
       "      <td>0.385646</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7.12</th>\n",
       "      <td>30.319141</td>\n",
       "      <td>40.716250</td>\n",
       "      <td>9.578125</td>\n",
       "      <td>2012-07-26 14:38:50.760</td>\n",
       "      <td>0.250089</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8.8</th>\n",
       "      <td>30.350391</td>\n",
       "      <td>40.713750</td>\n",
       "      <td>10.390625</td>\n",
       "      <td>2012-07-26 14:49:28.320</td>\n",
       "      <td>0.245483</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3.0</th>\n",
       "      <td>30.327441</td>\n",
       "      <td>40.600313</td>\n",
       "      <td>-1.949219</td>\n",
       "      <td>2012-07-26 15:06:20.080</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.3</th>\n",
       "      <td>30.333789</td>\n",
       "      <td>40.713125</td>\n",
       "      <td>7.445312</td>\n",
       "      <td>2012-07-26 16:26:52.800</td>\n",
       "      <td>0.239526</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4.0</th>\n",
       "      <td>30.430000</td>\n",
       "      <td>40.720000</td>\n",
       "      <td>9.500000</td>\n",
       "      <td>2012-07-26 17:28:21.040</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>165 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          longitude   latitude      depth             origin_time        cc  tid\n",
       "event_id                                                                        \n",
       "5.0       30.260000  40.630000  -0.500000 2012-07-26 00:20:46.200  0.333776    5\n",
       "0.0       30.322070  40.726875  10.695312 2012-07-26 00:58:10.840  0.252654    0\n",
       "9.0       30.303516  40.723750  10.390625 2012-07-26 00:58:10.920  0.210979    9\n",
       "6.0       30.334766  40.718750   8.765625 2012-07-26 00:58:11.080  0.297173    6\n",
       "2.0       30.320117  40.721875   9.476562 2012-07-26 00:58:11.080  0.385646    2\n",
       "...             ...        ...        ...                     ...       ...  ...\n",
       "7.12      30.319141  40.716250   9.578125 2012-07-26 14:38:50.760  0.250089    7\n",
       "8.8       30.350391  40.713750  10.390625 2012-07-26 14:49:28.320  0.245483    8\n",
       "3.0       30.327441  40.600313  -1.949219 2012-07-26 15:06:20.080  1.000000    3\n",
       "10.3      30.333789  40.713125   7.445312 2012-07-26 16:26:52.800  0.239526   10\n",
       "4.0       30.430000  40.720000   9.500000 2012-07-26 17:28:21.040  1.000000    4\n",
       "\n",
       "[165 rows x 6 columns]"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "template_group.catalog.catalog"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Remove the multiple detections\n",
    "\n",
    "Remove multiple detections with the `TemplateGroup.remove_multiples` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [],
   "source": [
    "# DISTANCE_CRITERION_KM: Distance, in km, between two detected events (within uncertainties) below which \n",
    "#                        detected events are investigated for equality.\n",
    "DISTANCE_CRITERION_KM = 15.0\n",
    "# DT_CRITERION_SEC: Inter-event time, in seconds, between two detected events below which\n",
    "#                   detected events are investigated for redundancy.\n",
    "DT_CRITERION_SEC = 4.0\n",
    "# SIMILARITY_CRITERION: Inter-template correlation coefficient below which detected events are investigated for equality.\n",
    "SIMILARITY_CRITERION = 0.10\n",
    "# N_CLOSEST_STATIONS: When computing the inter-template correlation coefficient, use the N_CLOSEST_STATIONS closest stations\n",
    "#                     of a given pair of templates. This parameter is relevant for studies with large seismic networks.\n",
    "N_CLOSEST_STATIONS = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [],
   "source": [
    "# we need to read the waveforms first\n",
    "template_group.read_waveforms()\n",
    "template_group.normalize(method=\"rms\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ebeauce/miniconda3/envs/hy7_py310/lib/python3.10/site-packages/BPMF/dataset.py:4212: RuntimeWarning: invalid value encountered in divide\n",
      "  unit_direction /= np.sqrt(np.sum(unit_direction**2, axis=1))[\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Computing the similarity matrix...\n",
      "Computing the inter-template directional errors...\n",
      "Searching for events detected by multiple templates\n",
      "All events occurring within 4.0 sec, with uncertainty ellipsoids closer than 15.0 km will and inter-template CC larger than 0.10 be considered the same\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Removing multiples: 100%|██████████| 165/165 [00:00<00:00, 2887.90it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.06s to flag the multiples\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "template_group.remove_multiples(\n",
    "    n_closest_stations=N_CLOSEST_STATIONS,\n",
    "    dt_criterion=DT_CRITERION_SEC,\n",
    "    distance_criterion=DISTANCE_CRITERION_KM,\n",
    "    similarity_criterion=SIMILARITY_CRITERION,\n",
    "    progress=True,\n",
    ")\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The catalog now has three new columns: `origin_time_sec` (a timestamp of `origin_time` in seconds), `interevent_time_sec` (template-wise computation), `unique_event`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>depth</th>\n",
       "      <th>origin_time</th>\n",
       "      <th>cc</th>\n",
       "      <th>tid</th>\n",
       "      <th>origin_time_sec</th>\n",
       "      <th>interevent_time_sec</th>\n",
       "      <th>unique_event</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>event_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5.0</th>\n",
       "      <td>30.260000</td>\n",
       "      <td>40.630000</td>\n",
       "      <td>-0.500000</td>\n",
       "      <td>2012-07-26 00:20:46.200</td>\n",
       "      <td>0.333776</td>\n",
       "      <td>5</td>\n",
       "      <td>1.343262e+09</td>\n",
       "      <td>0.00</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.0</th>\n",
       "      <td>30.322070</td>\n",
       "      <td>40.726875</td>\n",
       "      <td>10.695312</td>\n",
       "      <td>2012-07-26 00:58:10.840</td>\n",
       "      <td>0.252654</td>\n",
       "      <td>0</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>2244.64</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.0</th>\n",
       "      <td>30.303516</td>\n",
       "      <td>40.723750</td>\n",
       "      <td>10.390625</td>\n",
       "      <td>2012-07-26 00:58:10.920</td>\n",
       "      <td>0.210979</td>\n",
       "      <td>9</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>0.08</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.0</th>\n",
       "      <td>30.334766</td>\n",
       "      <td>40.718750</td>\n",
       "      <td>8.765625</td>\n",
       "      <td>2012-07-26 00:58:11.080</td>\n",
       "      <td>0.297173</td>\n",
       "      <td>6</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>0.16</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.0</th>\n",
       "      <td>30.320117</td>\n",
       "      <td>40.721875</td>\n",
       "      <td>9.476562</td>\n",
       "      <td>2012-07-26 00:58:11.080</td>\n",
       "      <td>0.385646</td>\n",
       "      <td>2</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>0.00</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.1</th>\n",
       "      <td>30.322070</td>\n",
       "      <td>40.726875</td>\n",
       "      <td>10.695312</td>\n",
       "      <td>2012-07-26 00:58:16.360</td>\n",
       "      <td>0.306255</td>\n",
       "      <td>0</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>5.28</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.1</th>\n",
       "      <td>30.303516</td>\n",
       "      <td>40.723750</td>\n",
       "      <td>10.390625</td>\n",
       "      <td>2012-07-26 00:58:16.480</td>\n",
       "      <td>0.196892</td>\n",
       "      <td>9</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>0.12</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.1</th>\n",
       "      <td>30.320117</td>\n",
       "      <td>40.721875</td>\n",
       "      <td>9.476562</td>\n",
       "      <td>2012-07-26 00:58:16.640</td>\n",
       "      <td>0.208208</td>\n",
       "      <td>2</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>0.16</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.2</th>\n",
       "      <td>30.320117</td>\n",
       "      <td>40.721875</td>\n",
       "      <td>9.476562</td>\n",
       "      <td>2012-07-26 00:59:12.800</td>\n",
       "      <td>0.236728</td>\n",
       "      <td>2</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>56.16</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.2</th>\n",
       "      <td>30.322070</td>\n",
       "      <td>40.726875</td>\n",
       "      <td>10.695312</td>\n",
       "      <td>2012-07-26 01:02:53.120</td>\n",
       "      <td>0.286318</td>\n",
       "      <td>0</td>\n",
       "      <td>1.343265e+09</td>\n",
       "      <td>220.32</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          longitude   latitude      depth             origin_time        cc  tid  origin_time_sec  interevent_time_sec  unique_event\n",
       "event_id                                                                                                                            \n",
       "5.0       30.260000  40.630000  -0.500000 2012-07-26 00:20:46.200  0.333776    5     1.343262e+09                 0.00          True\n",
       "0.0       30.322070  40.726875  10.695312 2012-07-26 00:58:10.840  0.252654    0     1.343264e+09              2244.64         False\n",
       "9.0       30.303516  40.723750  10.390625 2012-07-26 00:58:10.920  0.210979    9     1.343264e+09                 0.08         False\n",
       "6.0       30.334766  40.718750   8.765625 2012-07-26 00:58:11.080  0.297173    6     1.343264e+09                 0.16         False\n",
       "2.0       30.320117  40.721875   9.476562 2012-07-26 00:58:11.080  0.385646    2     1.343264e+09                 0.00          True\n",
       "0.1       30.322070  40.726875  10.695312 2012-07-26 00:58:16.360  0.306255    0     1.343264e+09                 5.28          True\n",
       "9.1       30.303516  40.723750  10.390625 2012-07-26 00:58:16.480  0.196892    9     1.343264e+09                 0.12         False\n",
       "2.1       30.320117  40.721875   9.476562 2012-07-26 00:58:16.640  0.208208    2     1.343264e+09                 0.16         False\n",
       "2.2       30.320117  40.721875   9.476562 2012-07-26 00:59:12.800  0.236728    2     1.343264e+09                56.16          True\n",
       "0.2       30.322070  40.726875  10.695312 2012-07-26 01:02:53.120  0.286318    0     1.343265e+09               220.32          True"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "template_group.catalog.catalog.head(10)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The final catalog is made of the unique events only."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [],
   "source": [
    "template_group.catalog.catalog = template_group.catalog.catalog[template_group.catalog.catalog[\"unique_event\"]]\n",
    "initial_catalog = template_group.catalog.catalog.copy()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's add the location uncertainties from the template events."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_33812/1634894027.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  template_group.catalog.catalog.loc[selection, \"hmax_unc\"] = tp.hmax_unc\n",
      "/tmp/ipykernel_33812/1634894027.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  template_group.catalog.catalog.loc[selection, \"hmin_unc\"] = tp.hmin_unc\n",
      "/tmp/ipykernel_33812/1634894027.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  template_group.catalog.catalog.loc[selection, \"az_hmax_unc\"] = tp.az_hmax_unc\n",
      "/tmp/ipykernel_33812/1634894027.py:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  template_group.catalog.catalog.loc[selection, \"vmax_unc\"] = tp.vmax_unc\n"
     ]
    }
   ],
   "source": [
    "for tp in template_group.templates:\n",
    "    tid = tp.tid\n",
    "    selection = template_group.catalog.catalog[\"tid\"] == tid\n",
    "    template_group.catalog.catalog.loc[selection, \"hmax_unc\"] = tp.hmax_unc\n",
    "    template_group.catalog.catalog.loc[selection, \"hmin_unc\"] = tp.hmin_unc\n",
    "    template_group.catalog.catalog.loc[selection, \"az_hmax_unc\"] = tp.az_hmax_unc\n",
    "    template_group.catalog.catalog.loc[selection, \"vmax_unc\"] = tp.vmax_unc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 67 events in our template matching catalog!\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>depth</th>\n",
       "      <th>origin_time</th>\n",
       "      <th>cc</th>\n",
       "      <th>tid</th>\n",
       "      <th>origin_time_sec</th>\n",
       "      <th>interevent_time_sec</th>\n",
       "      <th>unique_event</th>\n",
       "      <th>hmax_unc</th>\n",
       "      <th>hmin_unc</th>\n",
       "      <th>az_hmax_unc</th>\n",
       "      <th>vmax_unc</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>event_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5.0</th>\n",
       "      <td>30.260000</td>\n",
       "      <td>40.630000</td>\n",
       "      <td>-0.500000</td>\n",
       "      <td>2012-07-26 00:20:46.200</td>\n",
       "      <td>0.333776</td>\n",
       "      <td>5</td>\n",
       "      <td>1.343262e+09</td>\n",
       "      <td>0.00</td>\n",
       "      <td>True</td>\n",
       "      <td>4.138734</td>\n",
       "      <td>2.266640</td>\n",
       "      <td>145.441242</td>\n",
       "      <td>1.879851</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.0</th>\n",
       "      <td>30.320117</td>\n",
       "      <td>40.721875</td>\n",
       "      <td>9.476562</td>\n",
       "      <td>2012-07-26 00:58:11.080</td>\n",
       "      <td>0.385646</td>\n",
       "      <td>2</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>0.00</td>\n",
       "      <td>True</td>\n",
       "      <td>2.232884</td>\n",
       "      <td>2.065874</td>\n",
       "      <td>-173.163204</td>\n",
       "      <td>5.369457</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.1</th>\n",
       "      <td>30.322070</td>\n",
       "      <td>40.726875</td>\n",
       "      <td>10.695312</td>\n",
       "      <td>2012-07-26 00:58:16.360</td>\n",
       "      <td>0.306255</td>\n",
       "      <td>0</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>5.28</td>\n",
       "      <td>True</td>\n",
       "      <td>2.154916</td>\n",
       "      <td>1.692434</td>\n",
       "      <td>155.518831</td>\n",
       "      <td>2.975361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.2</th>\n",
       "      <td>30.320117</td>\n",
       "      <td>40.721875</td>\n",
       "      <td>9.476562</td>\n",
       "      <td>2012-07-26 00:59:12.800</td>\n",
       "      <td>0.236728</td>\n",
       "      <td>2</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>56.16</td>\n",
       "      <td>True</td>\n",
       "      <td>2.232884</td>\n",
       "      <td>2.065874</td>\n",
       "      <td>-173.163204</td>\n",
       "      <td>5.369457</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.2</th>\n",
       "      <td>30.322070</td>\n",
       "      <td>40.726875</td>\n",
       "      <td>10.695312</td>\n",
       "      <td>2012-07-26 01:02:53.120</td>\n",
       "      <td>0.286318</td>\n",
       "      <td>0</td>\n",
       "      <td>1.343265e+09</td>\n",
       "      <td>220.32</td>\n",
       "      <td>True</td>\n",
       "      <td>2.154916</td>\n",
       "      <td>1.692434</td>\n",
       "      <td>155.518831</td>\n",
       "      <td>2.975361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7.12</th>\n",
       "      <td>30.319141</td>\n",
       "      <td>40.716250</td>\n",
       "      <td>9.578125</td>\n",
       "      <td>2012-07-26 14:38:50.760</td>\n",
       "      <td>0.250089</td>\n",
       "      <td>7</td>\n",
       "      <td>1.343314e+09</td>\n",
       "      <td>0.16</td>\n",
       "      <td>True</td>\n",
       "      <td>7.482605</td>\n",
       "      <td>2.519412</td>\n",
       "      <td>121.069720</td>\n",
       "      <td>6.019241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8.8</th>\n",
       "      <td>30.350391</td>\n",
       "      <td>40.713750</td>\n",
       "      <td>10.390625</td>\n",
       "      <td>2012-07-26 14:49:28.320</td>\n",
       "      <td>0.245483</td>\n",
       "      <td>8</td>\n",
       "      <td>1.343314e+09</td>\n",
       "      <td>637.56</td>\n",
       "      <td>True</td>\n",
       "      <td>5.444797</td>\n",
       "      <td>2.801365</td>\n",
       "      <td>90.878884</td>\n",
       "      <td>5.589809</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3.0</th>\n",
       "      <td>30.327441</td>\n",
       "      <td>40.600313</td>\n",
       "      <td>-1.949219</td>\n",
       "      <td>2012-07-26 15:06:20.080</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3</td>\n",
       "      <td>1.343315e+09</td>\n",
       "      <td>1011.76</td>\n",
       "      <td>True</td>\n",
       "      <td>1.397271</td>\n",
       "      <td>1.183020</td>\n",
       "      <td>128.315144</td>\n",
       "      <td>2.780649</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.3</th>\n",
       "      <td>30.333789</td>\n",
       "      <td>40.713125</td>\n",
       "      <td>7.445312</td>\n",
       "      <td>2012-07-26 16:26:52.800</td>\n",
       "      <td>0.239526</td>\n",
       "      <td>10</td>\n",
       "      <td>1.343320e+09</td>\n",
       "      <td>4832.72</td>\n",
       "      <td>True</td>\n",
       "      <td>2.652178</td>\n",
       "      <td>1.579905</td>\n",
       "      <td>93.702470</td>\n",
       "      <td>3.878422</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4.0</th>\n",
       "      <td>30.430000</td>\n",
       "      <td>40.720000</td>\n",
       "      <td>9.500000</td>\n",
       "      <td>2012-07-26 17:28:21.040</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4</td>\n",
       "      <td>1.343324e+09</td>\n",
       "      <td>3688.24</td>\n",
       "      <td>True</td>\n",
       "      <td>3.942112</td>\n",
       "      <td>1.625908</td>\n",
       "      <td>72.443923</td>\n",
       "      <td>4.694059</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>67 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          longitude   latitude      depth             origin_time        cc  tid  origin_time_sec  interevent_time_sec  unique_event  hmax_unc  hmin_unc  az_hmax_unc  vmax_unc\n",
       "event_id                                                                                                                                                                       \n",
       "5.0       30.260000  40.630000  -0.500000 2012-07-26 00:20:46.200  0.333776    5     1.343262e+09                 0.00          True  4.138734  2.266640   145.441242  1.879851\n",
       "2.0       30.320117  40.721875   9.476562 2012-07-26 00:58:11.080  0.385646    2     1.343264e+09                 0.00          True  2.232884  2.065874  -173.163204  5.369457\n",
       "0.1       30.322070  40.726875  10.695312 2012-07-26 00:58:16.360  0.306255    0     1.343264e+09                 5.28          True  2.154916  1.692434   155.518831  2.975361\n",
       "2.2       30.320117  40.721875   9.476562 2012-07-26 00:59:12.800  0.236728    2     1.343264e+09                56.16          True  2.232884  2.065874  -173.163204  5.369457\n",
       "0.2       30.322070  40.726875  10.695312 2012-07-26 01:02:53.120  0.286318    0     1.343265e+09               220.32          True  2.154916  1.692434   155.518831  2.975361\n",
       "...             ...        ...        ...                     ...       ...  ...              ...                  ...           ...       ...       ...          ...       ...\n",
       "7.12      30.319141  40.716250   9.578125 2012-07-26 14:38:50.760  0.250089    7     1.343314e+09                 0.16          True  7.482605  2.519412   121.069720  6.019241\n",
       "8.8       30.350391  40.713750  10.390625 2012-07-26 14:49:28.320  0.245483    8     1.343314e+09               637.56          True  5.444797  2.801365    90.878884  5.589809\n",
       "3.0       30.327441  40.600313  -1.949219 2012-07-26 15:06:20.080  1.000000    3     1.343315e+09              1011.76          True  1.397271  1.183020   128.315144  2.780649\n",
       "10.3      30.333789  40.713125   7.445312 2012-07-26 16:26:52.800  0.239526   10     1.343320e+09              4832.72          True  2.652178  1.579905    93.702470  3.878422\n",
       "4.0       30.430000  40.720000   9.500000 2012-07-26 17:28:21.040  1.000000    4     1.343324e+09              3688.24          True  3.942112  1.625908    72.443923  4.694059\n",
       "\n",
       "[67 rows x 13 columns]"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(f\"There are {len(template_group.catalog.catalog)} events in our template matching catalog!\")\n",
    "template_group.catalog.catalog"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's plot these events on a map. You will see that there are far fewer dots on the map than the total number of earthquakes in our catalog... This is because all newly detected events are attributed their template locations. Therefore, most events are plotted at the exact same location."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA5cAAAKPCAYAAAD5Zz6nAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAAD85ElEQVR4nOzdd3hTVQMG8DfpSNM96KCVUaDI3lBAhLLBigzZSEVFwIIslSEg/ZDxgYqoqCgblfGJsmSDDAFBkCkgs9AyuuhK053m+wMbe0lakrTpaZv39zx5lHvuvTm5b3Kbk3PvOTKtVqsFERERERERUTHIRVeAiIiIiIiIyj82LomIiIiIiKjY2LgkIiIiIiKiYmPjkoiIiIiIiIqNjUsiIiIiIiIqNjYuiYiIiIiIqNjYuCQiIiIiIqJiY+OSiIiIiIiIio2NSyIiIiIiIio2Ni6JiIiIiIio2Ni4JCIiIiIispAFCxagZcuWcHFxgY+PD/r06YNr165J1tFqtYiIiIC/vz+USiVCQkJw+fLlp+77p59+Qr169aBQKFCvXj1s2bLFUi/DKGxcEhERERERWciRI0cwduxYnDx5Evv370dubi66desGtVqtW2fRokVYvHgxli5ditOnT8PPzw9du3aFSqUqdL+///47Bg0ahOHDh+PChQsYPnw4Bg4ciFOnTpXGyzJIptVqtcKenYiIiIiIyIrEx8fDx8cHR44cQfv27aHVauHv74+JEydi6tSpAICsrCz4+vpi4cKFGD16tMH9DBo0CKmpqdi9e7duWY8ePeDh4YENGzaUymt5kq2QZy2HMjMzkZ2dLboaRERERERkBHt7ezg4OBRaXpzv91qtFjKZTLJMoVBAoVA8dduUlBQAgKenJwAgMjISMTEx6Natm2RfHTp0wIkTJwptXP7++++YNGmSZFn37t2xZMkSU15KiWLj0giZmZlwc3Nj45KIiIiIqJzw8/NDZGSkwQZmZmYmlEql2ft2dnZGWlqaZNns2bMRERFR5HZarRaTJ09Gu3bt0KBBAwBATEwMAMDX11eyrq+vL+7evVvovmJiYgxuk78/Edi4NEJ2djays7Nx9uxZuLi4mLRtXFwcNmzYgCFDhsDHx8dCNaSiMAPxmIF4zEA8ZiAeMxCPGYhnLRmoVCo0a9YM2dnZBhuXxe00SktLQ3R0NFxdXXXLjOm1HDduHC5evIhjx47plT3ZE2qod7QktrEkNi5N4OLiYnLjMj09HQqFAs7OziZvSyWDGYjHDMRjBuIxA/GYgXjMQDxmIGUPwNSmmBZANgBXV1dJ4/Jp3n77bWzfvh1Hjx7FM888o1vu5+cH4HFPZOXKlXXL4+Li9HomC/Lz89PrpXzaNpbG0WKJiIiIiIgsRKvVYty4cfj555/x66+/IjAwUFIeGBgIPz8/7N+/X7csOzsbR44cQdu2bQvdb5s2bSTbAMC+ffuK3MbS2HNJRERERERkIWPHjsX69euxbds2uLi46Hob3dzcoFQqIZPJMHHiRMyfPx9BQUEICgrC/Pnz4ejoiKFDh+r2ExYWhoCAACxYsAAAMGHCBLRv3x4LFy5E7969sW3bNhw4cMDgJbelhY1LC5PL5XBxcYFczk5iUZiBeMxAPGYgHjMQjxmIxwzEYwZSxbks1lhff/01ACAkJESyfPXq1RgxYgQAYMqUKcjIyEB4eDiSkpIQHByMffv2SS5djoqKkuTWtm1bbNy4ETNnzsSsWbNQs2ZNbNq0CcHBwSa+opLDeS6NkJqaCjc3N9y4cYPXphMRERERlXEqlQpBQUFISUkxeF9k/vd7Z5jXuEwDCt23NWPPJRERERERWSU7mNe4JMPYH25h8fHxWLZsGeLj40VXxWoxA/GYgXjMQDxmIB4zEI8ZiMcMyJLYuLSwvLw8qFQq5OXlia6K1WIG4jED8ZiBeMxAPGYgHjMQjxmQJfGyWCIiIiIisko2ML23jc3ywrHnkoiIiIiIiIqNPZdERERERGSVbMGey5LEqUiMUJypSLKyshAbGwtfX18oFAoL1ZCKwgzEYwbiMQPxmIF4zEA8ZiCetWRg7FQkfjCvcRkDTkViCBuXRuA8l0RERERE5YexjcsAmNe4vA82Lg3hPZcWplKpcPToUahUKtFVsVrMQDxmIB4zEI8ZiMcMxGMG4jEDsiQ2Li0sPT0dp06dQnp6uuiqWC1mIB4zEI8ZiMcMxGMG4jED8ZgBWRIH9CEiIiIiIqtkzlQkMktUpIIoVs/lggULIJPJMHHiRN0yrVaLiIgI+Pv7Q6lUIiQkBJcvX37qvpYsWYJnn30WSqUSVapUwaRJk5CZmakrP3r0KHr16gV/f3/IZDJs3bpVbx8xMTHo2bMn/P39ER4eLpkcNiQkBDKZDBs3btR73urVq5v82omIiIiIiOhfZjcuT58+jW+//RaNGjWSLF+0aBEWL16MpUuX4vTp0/Dz80PXrl2LvK77hx9+wLRp0zB79mxcvXoVK1euxKZNmzB9+nTdOmq1Go0bN8bSpUsL3c/MmTPRsmVL7N69G3fu3MGGDRsk5Q4ODpg5cyZycnLMfNVERERERFRRyM18kGFmHZu0tDQMGzYMy5cvh4eHh265VqvFkiVLMGPGDPTr1w8NGjTA2rVrkZ6ejvXr1xe6v99//x3PPfcchg4diurVq6Nbt24YMmQIzpw5o1unZ8+emDt3Lvr161fofpKTk1G/fn00bNgQgYGBSElJkZQPGTIEKSkpWL58uTkv2ywODg5o1KgRHBwcSu05SYoZiMcMxGMG4jED8ZiBeMxAPGZAlmRW43Ls2LEIDQ1Fly5dJMsjIyMRExODbt266ZYpFAp06NABJ06cKHR/7dq1w59//ok//vgDAHD79m3s2rULoaGhJtVr2rRpGD9+PBQKBc6dO4ewsDBJuaurK95//33MmTMHarXapH2by83NDd27d4ebm1upPB/pYwbiMQPxmIF4zEA8ZiAeMxCPGUjJ8fi+S1Me7LksnMnHZuPGjTh79iwWLFigVxYTEwMA8PX1lSz39fXVlRkyePBgfPjhh2jXrh3s7OxQs2ZNdOzYEdOmTTOpbi1atMD9+/cRHR2NEydOwNnZWW+d8PBwODg4YPHixSbt21w5OTmIj4/npbgCMQPxmIF4zEA8ZiAeMxCPGYjHDMiSTBotNjo6GhMmTMC+ffuK7EqXyaRjKGm1Wr1lBR0+fBjz5s3DV199heDgYNy8eRMTJkxA5cqVMWvWLFOqCFtbW/j5+RVarlAoMGfOHIwbNw5vvfWWSfuOi4uTDNusUCjg7u6O3NxcPHr0SG99X19fJCYmYtmyZXj55Zfh7e2tK3N1dYVSqYRarUZaWppkOzs7O3h6eiIvLw/x8fF6+61UqRJsbGyQlJSE7OxsSZmzszOcnJyQkZGB1NRUSZmNjQ0qVaoEAIiNjdXbr6enJ+zs7JCSkiIZTAkAHB0d4eLigqysLCQnJ0vK5HK57rXFx8dLBlICAHd3dygUCqhUKr1hrx0cHODm5oacnBwkJibq1Sn/h4qEhARoNBpJWVHH0N7eHh4eHtBoNLh27Rp+/PFHDBgwQFdPb29vyOVyJCYm6p1cizqGtra28PLyAmD4GHp5ecHW1hbJycnIysqSlDk5OcHZ2dmsY+jh4QF7e3uDx1CpVMLV1dXgMZTJZPDx8Sn0GLq5ucHBwcHgMcx/f2s0GiQkJOi9Vh8fH8hkMoPH0MXFBY6OjkhPT4dKpUJ8fLwuA39/f3h6ekKr1SIuLk5vv/nvb0PHMD+bzMxMvcveC76/4+LioNVqJeX57+/U1FRkZGRIyvLf39nZ2UhKSpKUGfv+TktL07siwphzBAA8evQIubm5krKSPkfkZzBixAgEBgbyHFHgHGHo/W2Jc0R8fDx27tyJESNGQKFQ8BxR4BxRUP772xLnCI1Gg3Xr1uGFF17QvdfzWfs5Ip+lv0fExMRgxYoVkr/JPEf8qzS+R9y9e1fyvaiiniOePAdQ6TCpcfnnn38iLi4OzZs31y3TaDQ4evQoli5dimvXrgF43INZuXJl3TpxcXF6vZkFzZo1C8OHD8fIkSMBAA0bNoRarcaoUaMwY8YMyOUl2/n8yiuv4OOPP8bcuXNNGil2w4YNUCgUun/Xq1cPoaGhUKlUWLdund767733HgDg5s2b2Lx5M5ycnHRloaGhqFevHq5du4aDBw9KtqtevToGDBiAnJwcg/sNDw+Hk5MTDh8+jJs3b0rKOnbsiBYtWuDu3bvYsWOHpMzX11d3qfAPP/ygd4IYMWIEvL29cfLkSVy8eFFSFhwcjPbt2yM2NhabNm2SlLm4uGDMmDEAgJ9++knvJDBo0CBUrVoV586dw6lTpyRljRo1Qvfu3ZGcnKz3Wm1sbDB58mQAwK5du/ROwr169UKdOnVw9epVHDp0SFJWq1Yt9O3bF5mZmdi8eTMuXrwImUymyyD/8umDBw/izp07km07d+6MZs2aITIyEjt37pSU+fv7Y9iwYQBgMJuRI0fCw8MDx48fx5UrVyRlbdu2xXPPPYcHDx5g8+bNkjIPDw/d+3/Tpk16X2yGDh2KgIAAnDlzRnIvMgA0adIEXbt2RWJiol6dFAoFxo8fDwDYvn273peXvn37olatWrh06RJ+++03SVnt2rXRu3dvpKenG3ytkyZNgq2tLfbt24fo6GhJWffu3dGoUSPcvHkTe/fuhVqt1mVQp04dDB48WPcl70ljxoyBi4sLjhw5guvXr0vKnn/+ebRu3Rr37t3Dli1bJGVeXl54/fXXATy+wuLJP8phYWHw9fXFqVOncP78eUlZixYt0LFjR8THx+vdH65UKjFu3DgAwLZt2/S+WPbv3x+BgYG4cOGC3uX/xp4j9uzZgwcPHkjKSvockZ/BjRs3EBgYyHNEgXOEoWNoiXOEWq3W/T3jOUJ6jiioSpUqFjtH5N9us23bNtjZ2UnKrf0ckc/S3yPi4+P1/ibzHPGv0vgeceTIEUkGFfUccezYMb0yQ8wZoEf79FWslkz75M/7Rcj/taOg1157DXXq1MHUqVNRv359+Pv7Y9KkSZgyZQoAIDs7Gz4+Pli4cCFGjx5tcL/NmzdHly5dsHDhQt2yDRs24PXXX0daWhpsbGyklZbJsGXLFvTp08fYqiMkJARNmjTBkiVLAAA7d+5Ev3798NZbb2Hr1q16J4aCUlNT4ebmhuPHj0sutTXmF8fY2Fj2XAr+xfHq1avsuSzkGLLn8jFr6JVgz6X4Xgn2XP6LPZePlaVzRD5Lf4+Ijo5mzyV7LgFY/hxx7949tGjRAikpKXB1ddVbL//7fS08vo/SFBoAN4FC923NTOq5dHFxQYMGDSTLnJyc4OXlpVs+ceJEzJ8/H0FBQQgKCsL8+fPh6OiIoUOH6rYJCwtDQECA7r7NXr16YfHixWjatKnusthZs2bhpZde0jUs09LSJL+uRUZG4vz58/D09ETVqlVNfuGhoaEIDg7GN998U2SvakE+Pj5wcXHRW25ra1vkPhwdHeHt7W1wHScnJ0mPZkFyubzI/RYcqfdJSqUSSqWy0PKi9uvm5lboTd4KhaLIbQs2oJ/k4uJi8PgBj08URe33yS8BBRV1DG1sbODt7Q1nZ2eDGXh6eha63+IcQ3d390LLyuMxLGq/RR1DR0dHODo6AoAug/z1ZTKZ2cfQwcGhyEvz8/8QGuLq6lroHwJ7e3uzs3F2djZ4nzfw9HNE/hcNQ0ryHOHs7KzLg+eIx4rz/jbnGOb3XPIc8VjBc8STLHGOyP8yX6lSpUL3bc3niIIsdY6wt7cv9G8yULHe32X1e0Rh34vK4jEszjnC2AGL2HNZskxqXBpjypQpyMjIQHh4OJKSkhAcHIx9+/ZJTgZRUVGSS11nzpwJmUyGmTNn4v79+/D29kavXr0wb9483TpnzpxBx44ddf/Ov8zh1VdfxZo1a8yq68KFC9G2bVuztjXFkz2vVPqYgXjMQDxmIB4zEI8ZiMcMxGMGZCkmXRZrrfK7zW/cuFHoL2ZERERERFQ2qFQqBAUFPfWy2Now77LY6+BlsYaUeM8lERERERFRecDLYksW5wC1sISEBKxbt87gjcxUOpiBeMxAPGYgHjMQjxmIxwzEYwZkSey5tDCNRoPY2Fi90bWo9DAD8ZiBeMxAPGYgHjMQjxmIxwyk2HNZsthzSURERERERMXGnksiIiIiIrJK7LksWey5JCIiIiIiomJj49LCXF1d0atXLw5TLBAzEI8ZiMcMxGMG4jED8ZiBeMyALInzXBqB81wSEREREZUfxs5z2QjmzXN5EZzn0hD2XFqYWq3GmTNnoFarRVfFajED8ZiBeMxAPGYgHjMQjxmIxwzIkti4tLC0tDQcOnQIaWlpoqtitZiBeMxAPGYgHjMQjxmIxwzEYwZSMjMfZBgbl0RERERERFRsnIqEiIiIiIisEqciKVnsuSQiIiIiIqJiY+PSwuzt7VGrVi3Y29uLrorVYgbiMQPxmIF4zEA8ZiAeMxCPGZAlcSoSI3AqEiIiIiKi8sPYqUiaA7AxcYQejRb4E5yKxBD2XFqYRqOBWq2GRqMRXRWrxQzEYwbiMQPxmIF4zEA8ZiAeMyBLYuPSwhISEvDVV18hISFBdFWsFjMQjxmI97QM0tPTcfXqVVy/fh05OTmlXDvrwM+BeMxAPGYgHjPQx2lISg5HiyUismKJiYn47LPPcPv2bTRu3BgajQbnzp1DcHAwwsPDoVAoRFeRiIiIygk2LomIrFRCQgLCw8OxYMECtG3bVrdcq9Xip59+wpgxY7Bs2TI2MImIiMgobFwSEVmpDz/8EJ9//jkaN24sWS6TydC/f3/k5eXhm2++wfjx4wXVkIiIyLLkAOQmDm/K+woLx2NDRGSF4uPjkZ2drdewLKh///44fvw4cnNzS7FmREREVF5xKhIjFGcqkry8POTk5MDOzg5yOdvyIjAD8ZiBeE9msHfvXqjVarz11ltFbvf2229j2LBhCAwMLKWaVlz8HIjHDMRjBuJZSwbGTkXSCqZfypkL4A9wKhJDeFmshcnlct6vJBgzEI8ZiPdkBnl5ebCzs3vqdra2tsjLy7Nk1awGPwfiMQPxmIF4zIAsqeL+XFFGJCYm4scff0RiYqLoqlgtZiAeMxDvyQwaNmyIQ4cOFbmNVqvFpUuX8Mwzz5RGFSs8fg7EYwbiMQPxmIGU3MwHGcZjY2E5OTm4c+cO540TiBmIxwzEezKDZ555Bmq1Gnfv3i10m0OHDqFevXr8hbuE8HMgHjMQjxmIxwzIkti4JCKyUu+//z5effVV3LlzR6/sjz/+wIcffoi333679CtGRERE5RLvuSQislLVqlXDokWLMGnSJCgUCrRv3x4ajQb79u2Dh4cHli1bxoEKiIioQpP98zB1GzKMjUsiIitWrVo1LFu2DA8ePMDly5dhY2ODjz76CB4eHqKrRkREROUMG5cW5uzsjM6dO8PZ2Vl0VawWMxCPGYj3tAz8/f3h7+9fyrWyLvwciMcMxGMG4jEDKXMG6OF9hYXjPJdGKM48l0REREREVLqMnefyOZg3z+VxcJ5LQ9jwtrCMjAxcuXIFGRkZoqtitZiBeMxAPGYgHjMQjxmIxwzEYwZkSWxcWlhqaip27tyJ1NRU0VWxWsxAPGYgHjMQjxmIxwzEYwbiMQMpmZkPMoyNSyIiIiIiIio2DuhDRERERERWSQ5AbmJXpJwj1hSKPZdERERERERUbOy5tDBbW1v4+/vD1paHWhRmIB4zEI8ZiMcMxGMG4jED8ZiBlDn3UPKey8JxKhIjcCoSIiIiIqLyw9ipSDoAsDWxtZirBY6AU5EYwstiiYiIiIiIqNjYuLSw2NhYfPTRR4iNjRVdFavFDMRjBuIxA/GYgXjMQDxmIB4zkJKb+SDDeGyIiIiIiIio2HgnLxERERERWSUO6FOy2HNJRERERERExcaeSyIiIiIiskrm3EPJ3rnCcSoSIxRnKpLc3FyoVCq4uLhwPiFBmIF4zEA8ZiAeMxCPGYjHDMSzlgyMnYqkC8ybiuQAjJ+K5OjRo/joo4/w559/4uHDh9iyZQv69OmjK5fJDFdg0aJFeO+99wyWrVmzBq+99pre8oyMDDg4OBj1Oiyh4r6jyghbW1t4eHiIroZVYwbiMQPxmIF4zEA8ZiAeMxCPGZQ+tVqNxo0b47XXXsPLL7+sV/7w4UPJv3fv3o033njD4LoFubq64tq1a5JlIhuWAHt1LS45ORk7d+5EcnKy6KpYLWYgHjMQjxmIxwzEYwbiMQPxmIE+mYkPU/Xs2RNz585Fv379DJb7+flJHtu2bUPHjh1Ro0aNoustk+ltKxoblxaWlZWFK1euICsrS3RVrBYzEI8ZiMcMxGMG4jED8ZiBeMyg5KSmpkoeJXFMY2NjsXPnTrzxxhtPXTctLQ3VqlXDM888gxdffBHnzp0r9vMXFxuXRERERERkleRmPgCgSpUqcHNz0z0WLFhQ7PqsXbsWLi4uhfZy5qtTpw7WrFmD7du3Y8OGDXBwcMBzzz2HGzduFLsOxcF7LomIiIiIiEwUHR0tGdBHoVAUe5+rVq3CsGHDnnrvZOvWrdG6dWvdv5977jk0a9YMX3zxBT7//PNi18NcbFwSERERERGZyNXV1ajRYo3122+/4dq1a9i0aZPJ28rlcrRs2VJ4zyUvi7UwJycntG3bFk5OTqKrYrWYgXjMQDxmIB4zEI8ZiMcMxGMGUqYO5mPuoD7GWLlyJZo3b47GjRubvK1Wq8X58+dRuXJlC9TMeJzn0gjFmeeSiIiIiIhKl7HzXHYHYGdiazFHC+yF8fNcpqWl4ebNmwCApk2bYvHixejYsSM8PT1RtWpVXX0qV66MTz75BGPGjNHbR1hYGAICAnT3df7nP/9B69atERQUhNTUVHz++ef47rvvcPz4cbRq1cq0F1SC2HNpYVlZWYiMjOSIXAIxA/GYgXjMQDxmIB4zEI8ZiMcMpIozoI+xzpw5g6ZNm6Jp06YAgMmTJ6Np06b44IMPdOts3LgRWq0WQ4YMMbiPqKgoyXyYycnJGDVqFOrWrYtu3brh/v37OHr0qNCGJcDGpcUlJydj8+bNnEtIIGYgHjMQjxmIxwzEYwbiMQPxmEHpCwkJgVar1XusWbNGt86oUaOQnp4ONzc3g/s4fPiwZP1PP/0Ud+/eRVZWFuLi4rB37160adPGwq/k6TigDxERERERWSVz7qG01D2XFQF7LomIiIiIiKjY2LgkIiIiIiKiYuNlsRYml8vh4eEBuZzteFGYgXjMQDxmIB4zEI8ZiMcMxGMGUuYM0MMjVzhORWIETkVCRERERFR+GDsVyYswbyqSX2D8VCTWhD2XRERERERklTigT8lir66FxcfHY+nSpYiPjxddFavFDMRjBuIxA/GYgXjMQDxmIB4zIEtiz6WF5eXlISMjA3l5eaKrYrWYgXjMQDxmIB4zEI8ZiMcMxGMGUrznsmTx2BAREREREVGxsXFJRERERERExcbLYomIiIiIyCpxQJ+SxalIjFCcqUiys7MRHx8Pb29v2NvbW6iGVBRmIB4zEI8ZiMcMxGMG4jED8awlA2OnIukD86Yi2QpORWJIsS6LXbBgAWQyGSZOnKhbptVqERERAX9/fyiVSoSEhODy5ctF7ickJAQymUzvERoaqlsnNzcXM2fORGBgIJRKJWrUqIE5c+ZIbkaOiYlBz5494e/vj/DwcElZ/nNs3LhR8txLlixB9erVi3MYimRvb4+AgIAK/eEt65iBeMxAPGYgHjMQjxmIxwzEYwZScjMfZJjZx+b06dP49ttv0ahRI8nyRYsWYfHixVi6dClOnz4NPz8/dO3aFSqVqtB9/fzzz3j48KHu8ddff8HGxgYDBgzQrbNw4UIsW7YMS5cuxdWrV7Fo0SJ89NFH+OKLL3TrzJw5Ey1btsTu3btx584dbNiwQfI8Dg4OmDlzJnJycsx92SZTqVQ4dOhQka+fLIsZiMcMxGMG4jED8ZiBeMxAPGZAlmRW4zItLQ3Dhg3D8uXL4eHhoVuu1WqxZMkSzJgxA/369UODBg2wdu1apKenY/369YXuz9PTE35+frrH/v374ejoKGlc/v777+jduzdCQ0NRvXp19O/fH926dcOZM2d06yQnJ6N+/fpo2LAhAgMDkZKSInmeIUOGICUlBcuXLzfnZZslPT0dZ86cQXp6eqk9J0kxA/GYgXjMQDxmIB4zEI8ZiMcMyJLMalyOHTsWoaGh6NKli2R5ZGQkYmJi0K1bN90yhUKBDh064MSJE0bvf+XKlRg8eDCcnJx0y9q1a4eDBw/i+vXrAIALFy7g2LFjeOGFF3TrTJs2DePHj4dCocC5c+cQFhYm2a+rqyvef/99zJkzB2q12qTXTEREREREFYvMzAcZZvJosRs3bsTZs2dx+vRpvbKYmBgAgK+vr2S5r68v7t69a9T+//jjD/z1119YuXKlZPnUqVORkpKCOnXqwMbGBhqNBvPmzcOQIUN067Ro0QL3799HQkIC/Pz8DO4/PDwcn332GRYvXoxZs2YZVad8cXFxkl95FAoF3N3dkZubi0ePHumtn38c0tPTER8fLylzdXWFUqmEWq1GWlqapMzOzg6enp7Iy8vT2w4AKlWqBBsbGyQlJSE7O1tS5uzsDCcnJ2RkZCA1NVVSZmNjg0qVKgEAYmNj9fbr6ekJOzs7pKSkIDMzU1Lm6OgIFxcXZGVlITk5WVIml8vh7e0NAIiPj9eblNfd3R0KhQIqlUrvVzIHBwe4ubkhJycHiYmJenXKP4YJCQnQaDSSsqKOob29PTw8PKDRaBAfH4+0tDTJsfT29oZcLkdiYqLeZdJFHUNbW1t4eXkBMHwMvby8YGtri+TkZGRlZUnKnJyc4OzsbNYx9PDwgL29vcFjqFQq4erqavAYymQy+Pj4ADB8DN3c3ODg4GDwGOa/vzUaDRISEvReq4+PD2QymcFj6OLiAkdHR6Snp0OlUkkyyH9/a7VaxMXF6e03//1t6BjmZ5OZmal3ZULB93dcXByeHKss//2dmpqKjIwMSVn++zs7OxtJSUmSMmPf32lpaXo/Whl7jnj06BFyc3MlZSV9jsjPIP/9w3PEv+cIQ+9vS5wjCr52niOk54iCLHmOyGeovtZ+jshn6e8R2dnZen+TeY74V2l8j3jye1FFPUc8eQ6g0mFS4zI6OhoTJkzAvn374ODgUOh6Mpm0Pa/VavWWFWblypVo0KABWrVqJVm+adMmfP/991i/fj3q16+P8+fPY+LEifD398err76qW8/W1rbQhiXw+I0+Z84cjBs3Dm+99ZZRdcq3YcMGKBQK3b/r1auH0NBQqFQqrFu3Tm/99957DwBw8+ZNbN68WdITGxoainr16uHatWs4ePCgZLvq1atjwIAByMnJMbjf8PBwODk54fDhw7h586akrGPHjmjRogXu3r2LHTt2SMp8fX11vbk//PCD3glixIgR8Pb2xsmTJ3Hx4kVJWXBwMNq3b4/Y2Fhs2rRJUubi4oIxY8YAAH766Se9k8CgQYNQtWpVnDt3DqdOnZKUNWrUCN27d0dycrLea7WxscHkyZMBALt27dI7Cffq1Qt16tTB1atXcejQIUlZrVq10LdvX2RmZmLz5s24ePEiZDKZLoP8Hu6DBw/izp07km07d+6MZs2aITIyEjt37pSU+fv7Y9iwYQBgMJuRI0fCw8MDx48fx5UrVyRlbdu2xXPPPYcHDx5g8+bNkjIPDw+MHDkSwOP3+pNfbIYOHYqAgACcOXNGcik4ADRp0gRdu3ZFYmKiXp0UCgXGjx8PANi+fbvel5e+ffuiVq1auHTpEn777TdJWe3atdG7d2+kp6cbfK2TJk2Cra0t9u3bh+joaElZ9+7d0ahRI9y8eRN79+6FWq3WZVCnTh0MHjwYGo3G4H7HjBkDFxcXHDlyRHelQr7nn38erVu3xr1797BlyxZJmZeXF15//XUAj38Ee/KPclhYGHx9fXHq1CmcP39eUtaiRQt07NgR8fHxepfwK5VKjBs3DgCwbds2vS+W/fv3R2BgIC5cuKB3hYax54g9e/bgwYMHkrKSPkfkZ3Djxg0EBgbyHFHgHGHoGFriHKFWqyGXP75giOcI6TmioCpVqljsHJE/UOC2bdtgZ2cnKbf2c0Q+S3+PiI+P1/ubzHPEv0rje8SRI0ckGVTUc8SxY8f0ygwxZ4AeDuhTOJOmItm6dSv69u0r+fVPo9FAJpNBLpfj2rVrqFWrFs6ePYumTZvq1unduzfc3d2xdu3aIvefnp6OypUrY86cOZgwYYKkrEqVKpg2bRrGjh2rWzZ37lx8//33+Pvvv59a95CQEDRp0gRLlixBXl4emjRpgk6dOqF69epYsmSJ3omhoPyhio8fPw5nZ2fdcmN+cUxNTcWBAwfQqFEjyTQm5fUXx/LYKxEZGYlz586hadOmugzK8y+O5bFXQqVS6TLw9PRkz+U/SrNXIj+Ddu3aoXLlyjxHCOiVUKlUuHnzJtq2bYu8vDyeIwT0XNrb2+PUqVOoUaOG5O85wHNEPkt/j0hISMChQ4ckf5N5jvhXaXyPiI2NlXwvqqjniHv37qFFixZPnYpkAMybiuRHcCoSQ0xqXKpUKr3LW1977TXUqVMHU6dORf369eHv749JkyZhypQpAB7PpePj44OFCxdi9OjRRe5/zZo1GDNmDO7fv6/74OXz8vLC3LlzJb2NCxYswOrVq/V+uTSkYOMSAHbu3Il+/frhrbfewtatW41qXJozzyUREREREZUuY+e5HAjA3sTGZbYW+B/YuDTEpMtiXVxc0KBBA8kyJycneHl56ZZPnDgR8+fPR1BQEIKCgjB//nw4Ojpi6NChum3CwsIQEBCABQsWSPa1cuVK9OnTR69hCTy+dGHevHmoWrUq6tevj3PnzmHx4sW6y+BMFRoaiuDgYHzzzTd694iWpPxfgfJ/zaPSxwzEYwbiMQPxmIF4zEA8ZiAeMyBLKvFLhqdMmYKJEyciPDxcN8DOvn37JD1+UVFRePjwoWS769ev49ixY3jjjTcM7veLL75A//79ER4ejrp16+Ldd9/F6NGj8eGHH5pd14ULF+pdtlHS8q9fN3SpBpUOZiAeMxCPGYjHDMRjBuIxA/GYAVmSyaPFPunw4cOSf8tkMkRERCAiIsLobYDHN/0WdYWui4sLlixZorustbj1BIA2bdoU+ZxERERERFRxmTO1CKciKRwHOyIiIiIiIqJiK3bPJRERERERUXnEqUhKFo+NhclkMigUCqPn+aSSxwzEYwbiMQPxmIF4zEA8ZiAeMyBLMmkqEmvFqUiIiIiIiMoPY6ciGQrzpiJZD05FYgh7LomIiIiIiKjY2Li0sISEBKxatQoJCQmiq2K1mIF4zEA8ZiAeMxCPGYjHDMRjBmRJHNDHwjQaDR49egSNRiO6KlaLGYjHDMRjBuIxA/GYgXjMQDxmIMUBfUoWjw0REREREREVG3suiYiIiIjIKsn+eZi6DRnGnksiIiIiIiIqNk5FYoTiTEWSmZmJe/fu4ZlnnoGDg4OFakhFYQbiMQPxmIF4zEA8ZiAeMxDPWjIwdiqS4TBvKpLvwKlIDGHj0gic55KIiIiIqPwwtnH5KsxrXK4FG5eG8LJYC1Or1Th58iTUarXoqlgtZiAeMxCPGYjHDMRjBuIxA/GYAVkSG5cWlpaWht9++w1paWmiq2K1mIF4zEA8ZiAeMxCPGYjHDMRjBlJyMx9kGI8NERERERERFRunIiEiIiIiIqvEqUhKFnsuiYiIiIiIqNjYuLQwhUKB2rVrQ6FQiK6K1WIG4jED8ZiBeMxAPGYgHjMQjxmQJXEqEiNwKhIiIiIiovLD2KlIRsK8qUhWgFORGMKeSwvTaDRQqVTQaDSiq2K1mIF4zEA8ZiAeMxCPGYjHDMRjBmRJbFxaWEJCApYtW4aEhATRVbFazEA8ZiAeMxCPGYjHDMRjBuIxAymZzLwHGcbGJRERERERERUbpyIhIiIiIiKrJIfpvW3snSscjw0REREREREVGxuXREREREREVGycisQIxZmKRKvVQqPRwMbGBjLe/SsEMxCPGYjHDMRjBuIxA/GYgXjWkoGxU5GMkQEKEw9DlhZYpuVUJIbwnksLk8lksLXlYRaJGYjHDMRjBuIxA/GYgXjMQDxmQJbEy2ItLDExERs3bkRiYqLoqlgtZiAeMxCPGYjHDMRjBuIxA/GYgZTMzAcZxsalheXk5CA6Oho5OTmiq2K1mIF4zEA8ZiAeMxCPGYjHDMRjBmRJbFwSERERERFRsfGCayIiIiIiskqc57Jk8dgQERERERFRsbHn0sJcXFzQvXt3k6cwoZLDDMRjBuIxA/GYgXjMQDxmIB4zkGLPZcniPJdGKM48l0REREREVLqMnefybTPnufyC81waxIa3haWnp+PixYtIT08XXRWrxQzEYwbiMQPxmIF4zEA8ZiAeM5DiVCQli41LC1OpVNi7dy9UKpXoqlgtZiAeMxCPGYjHDMRjBuIxA/GYAVkSG5dERERERERUbBzQh4iIiIiIrBIH9ClZPDZERERERERUbOy5tDA7OztUqVIFdnZ2oqtitZiBeMxAPGYgHjMQjxmIxwzEYwZS7LksWZyKxAicioSIiIiIqPwwdiqSyWZORbKYU5EYxIa3hWm1WuTm5oJteHGYgXjMQDxmIB4zEI8ZiMcMxGMGZElsXFpYXFwcPv30U8TFxYmuitViBuIxA/GYgXjMQDxmIB4zEI8ZSJXGPJdHjx5Fr1694O/vD5lMhq1bt0rKR4wYAZlMJnm0bt36qfv96aefUK9ePSgUCtSrVw9btmwxsWYlj41LIiIiIiIiC1Gr1WjcuDGWLl1a6Do9evTAw4cPdY9du3YVuc/ff/8dgwYNwvDhw3HhwgUMHz4cAwcOxKlTp0q6+ibhgD5ERERERGSVSmNAn549e6Jnz55FrqNQKODn52f0PpcsWYKuXbti+vTpAIDp06fjyJEjWLJkCTZs2GBiDUsOey6JiIiIiIhMlJqaKnlkZWWZva/Dhw/Dx8cHtWvXxptvvvnUy5Z///13dOvWTbKse/fuOHHihNl1KAlsXBIRERERkVWSm/kAgCpVqsDNzU33WLBggVl16NmzJ3744Qf8+uuv+OSTT3D69Gl06tSpyMZqTEwMfH19Jct8fX0RExNjVh1KCqciMUJxpiLRaDRIT0+Ho6MjbGxsLFRDKgozEI8ZiMcMxGMG4jED8ZiBeNaSgbFTkUw1cyqShVogOjpasm+FQgGFQlHktjKZDFu2bEGfPn0KXefhw4eoVq0aNm7ciH79+hlcx97eHmvXrsWQIUN0y3744Qe88cYbyMzMNO0FlSDec2lhNjY2nBtTMGYgHjMQjxmIxwzEYwbiMQPxmEHJcXV1tcg8l5UrV0a1atVw48aNQtfx8/PT66WMi4vT680sbbws1sKSk5Oxbds2JCcni66K1WIG4jED8ZiBeMxAPGYgHjMQjxlIlcZUJKZ69OgRoqOjUbly5ULXadOmDfbv3y9Ztm/fPrRt29bCtSsaG5cWlpWVhevXrxfrBl8qHmYgHjMQjxmIxwzEYwbiMQPxmEHpS0tLw/nz53H+/HkAQGRkJM6fP4+oqCikpaXh3Xffxe+//447d+7g8OHD6NWrFypVqoS+ffvq9hEWFqYbGRYAJkyYgH379mHhwoX4+++/sXDhQhw4cAATJ04s5VcnxctiiYiIiIjIKslgem+bqT2XZ86cQceOHXX/njx5MgDg1Vdfxddff41Lly5h3bp1SE5ORuXKldGxY0ds2rRJcvlyVFQU5PJ/a9q2bVts3LgRM2fOxKxZs1CzZk1s2rQJwcHBJtauZLFxSUREREREZCEhISEoagzVvXv3PnUfhw8f1lvWv39/9O/fvzhVK3FsXBIRERERkVUqOLWIKduQYTw2Fubs7Iznn38ezs7OoqtitZiBeMxAPGYgHjMQjxmIxwzEYwZkSZzn0gjFmeeSiIiIiIhKl7HzXM6QAQ4m3kSZqQXmaVHovq0Zey4tLDMzEzdv3hQ6mam1YwbiMQPxmIF4zEA8ZiAeMxCPGUjJZOY9yDA2Li0sJSUFW7ZsQUpKiuiqWC1mIB4zEI8ZiMcMxGMG4jED8ZgBWRIH9CEiIiIiIqvEAX1KFo8NERERERERFRsbl0RERERERFRsvCzWwmxsbODl5QUbGxvRVbFazEA8ZiAeMxCPGYjHDMRjBuIxAyleFluyOBWJETgVCRERERFR+WHsVCQRcvOmIonI41QkhrDnkoiIiIiIrJLsn4ep25Bh7NW1sLi4OHz++eeIi4sTXRWrxQzEYwbiMQPxmIF4zEA8ZiAeMyBLKlbjcsGCBZDJZJg4caJumVarRUREBPz9/aFUKhESEoLLly8XuZ+QkBDIZDK9R2hoqG6diIgIvXI/Pz/JfmJiYtCzZ0/4+/sjPDwceXl5es+xceNGyTZLlixB9erVzT8IT6HVapGVlQVefSwOMxCPGYjHDMRjBuIxA/GYgXjMQEpu5oMMM/vYnD59Gt9++y0aNWokWb5o0SIsXrwYS5cuxenTp+Hn54euXbtCpVIVuq+ff/4ZDx8+1D3++usv2NjYYMCAAZL16tevL1nv0qVLkvKZM2eiZcuW2L17N+7cuYMNGzZIyh0cHDBz5kzk5OSY+7KJiIiIiIjIALMal2lpaRg2bBiWL18ODw8P3XKtVoslS5ZgxowZ6NevHxo0aIC1a9ciPT0d69evL3R/np6e8PPz0z32798PR0dHvcalra2tZD1vb29JeXJyMurXr4+GDRsiMDAQKSkpkvIhQ4YgJSUFy5cvN+dlExERERERUSHMalyOHTsWoaGh6NKli2R5ZGQkYmJi0K1bN90yhUKBDh064MSJE0bvf+XKlRg8eDCcnJwky2/cuAF/f38EBgZi8ODBuH37tqR82rRpGD9+PBQKBc6dO4ewsDBJuaurK95//33MmTMHarXa6PoQEREREVHFw8tiS5bJo8Vu3LgRZ8+exenTp/XKYmJiAAC+vr6S5b6+vrh7965R+//jjz/w119/YeXKlZLlwcHBWLduHWrXro3Y2FjMnTsXbdu2xeXLl+Hl5QUAaNGiBe7fv4+EhAS9+zHzhYeH47PPPsPixYsxa9Yso+pUHJ6enggLC4Onp6fFn4sMYwbiMQPxmIF4zEA8YzKQqWTwCfJ56r7ibsRB68J71kzFz4F4zIAsyaTGZXR0NCZMmIB9+/bBwcGh0PVkMukAvVqtVm9ZYVauXIkGDRqgVatWkuU9e/bU/X/Dhg3Rpk0b1KxZE2vXrsXkyZN1ZfmXzhZGoVBgzpw5GDduHN566y2j6pQvLi4O6enpkn25u7sjNzcXjx490lvf19cXdnZ2sLW1RWJioqTM1dUVSqUSarUaaWlpkjI7Ozt4enoiLy8P8fHxevutVKkSbGxskJSUhOzsbEmZs7MznJyckJGRgdTUVEmZjY0NKlWqBACIjY3V26+npyfs7OyQkpKCzMxMSZmjoyNcXFyQlZWF5ORkSZlcLtddohwfHy8ZSAkA3N3doVAooFKpJMcPeHwfrJubG3JycvSOEfDvDxUJCQnQaDSSsqKOob29PTw8PKDRaHT7Lbh/b29vyOVyJCYm6t2DW9QxtLW11f2YYegYenl5wdbWFsnJycjKypKUOTk5wdnZ2axj6OHhAXt7e4PHUKlUwtXV1eAxlMlk8PF5/CXJ0DF0c3ODg4ODwWOY//7WaDRISEjQe60+Pj6QyWQGj6GLiwscHR2Rnp4uud86MTFR9/7WarUGR6rLf38bOob52WRmZupd9l7w/R0XF6c3UEH++zs1NRUZGRmSsvz3d3Z2NpKSkiRlxr6/09LS9K6IMOYcAQCPHj1Cbm6upMxS54js7GzY2dnxHFHgHGHo/c1zxGOlfY4AYPFzhK+vb+HnCLkd7BvY4yEeSsqc4ARXuCIb2XiEx59lbQMtEn5PgNyuYp0jLP09Iv/4FHwv8hzxr9I8R+Qfr4p6jnjyHFAYTkVSskxqXP7555+Ii4tD8+bNdcs0Gg2OHj2KpUuX4tq1awAe92BWrlxZt05cXJxeb6Yh6enp2LhxI+bMmfPUdZ2cnNCwYUPcuHHDlJcAAHjllVfw8ccfY+7cuSaNFLthwwYoFArdv+vVq4fQ0FCoVCqsW7dOb/333nsPqampWLx4MZRKpWTb0NBQ1KtXD9euXcPBgwcl21WvXh0DBgxATk6Owf2Gh4fDyckJhw8fxs2bNyVlHTt2RIsWLXD37l3s2LFDUubr66u7VPiHH37QO0GMGDEC3t7eOHnyJC5evCgpCw4ORvv27REbG4tNmzZJylxcXDBmzBgAwE8//aR3Ehg0aBCqVq2Kc+fO4dSpU5KyRo0aoXv37khOTtZ7rTY2NrofDnbt2qV3Eu7Vqxfq1KmDq1ev4tChQ5KyWrVqoW/fvsjMzMTy5ctx//59BAQE6DLIv3z64MGDuHPnjmTbzp07o1mzZoiMjMTOnTslZf7+/hg2bBgAGMxm5MiR8PDwwPHjx3HlyhVJWdu2bfHcc8/hwYMH2Lx5s6TMw8MDI0eOBABs2rRJr/EzdOhQBAQE4MyZMzhz5oykrEmTJujatSsSExP16qRQKDB+/HgAwPbt2/W+vPTt2xe1atXCpUuX8Ntvv0nKateujd69eyM9Pd3ga500aRJsbW2xb98+REdHS8q6d++ORo0a4ebNm9i7dy+ysrJ0GdSqVQuDBw+GRqMxuN8xY8bAxcUFR44cwfXr1yVlzz//PFq3bo179+5hy5YtkjIvLy+8/vrrAB5fYfHkH+WwsDD4+vri1KlTOH/+vKSsRYsW6NixI+Lj4/XuD1cqlRg3bhwAYNu2bXqNz/79+yMwMBAXLlzQu/zfmHMEAOzZswcPHjyQlJX0OSI/g8GDB6NDhw48RxQ4Rxg6hpY4R2RlZaF+/fro3LkzzxFPnCMKqlKlisXOEf3798epU6dw7tw5vR+9888RhwMP49zf5yAr8PWxDdqgO7ojFrFYiZXQQguNjwaZP2RWmHNEPkt/j7h16xa++OILyd9kniP+VRrfI44fPy75XlRRzxHHjh3TKyPLk2lNGIdYpVLpXd762muvoU6dOpg6dSrq168Pf39/TJo0CVOmTAHw+FdyHx8fLFy4EKNHjy5y/2vWrMGYMWNw//593a86hcnKykLNmjUxatQofPDBB0+te0hICJo0aYIlS5YAAHbu3Il+/frhrbfewtatW/VODAWlpqbCzc0Nx48fh7Ozs265Mb84xsbGYtmyZXj55ZclAxCV118cy2OvxNWrV/Hjjz9iwIABunpWhF8c85WHXxzj4+N1Gfj7+7Pn8h+l2SuRn8GIESMQGBjIc4SAXon4+Hjs3LkTI0aMgEKh4DlCQM9l/pfRF154Qfdez5f//s44mAHFMIWkzFDPZdLqJOQ2y60w54gnj6GlzhHR0dFYsWKF5G8yzxH/Ko3vEXfv3pV8L6qo54h79+6hRYsWSElJgaurq956+d/v/ysHHEzsiszUAtPyUOi+rZlJjUtDnmy0LVy4EAsWLMDq1asRFBSE+fPn4/Dhw7h27RpcXFwAPP51MCAgAAsWLJDs6/nnn0dAQIDeXJQA8O6776JXr16oWrUq4uLiMHfuXBw5cgSXLl1CtWrVTK4nALRv3x6nT5+Gr6+vUY3LGzdu6F6DsWJjY7Fu3TrdL6JU+piBeMxAPGYgHjMQz9gM3Pu5w/6UPWQa/W+cWhstsltnI/mnZAvWtOLi50A8a8lApVIhKCiIjctSZvKAPk8zZcoUZGRkIDw8HElJSQgODsa+ffskjbKoqCjI5dJxlq5fv45jx45h3759Bvd77949DBkyBAkJCfD29kbr1q1x8uRJoxqWhVm4cCHatm1r9vZERERU8ainqKHoozBYJtPIoJ7CEeeJiAwpduPy8OHDkn/LZDJEREQgIiLC6G2Ax9dlF9WJaqg30xSGnrNNmzZFPicRERFZn5zWOchqm6XXe5nfa5kTnFPE1kRUnshg+tQiHNCncJymxcIcHR3RokULODo6iq6K1WIG4jED8ZiBeMxAPFMyUE9R610Wy17L4uPnQDxmQJZU7HsurUFx7rkkIiKi8qngvZe815KofDH2nstFckBpYldkhhaYwnsuDWLPpYVlZ2fj/v37eqOxUelhBuIxA/GYgXjMQDxTMyjYe8ley5LBz4F4zIAsiY1LC0tKSsL69ev1pjeg0sMMxJCpZPD184Wvny9sq9pie/PtsK1qq1uW/5CpeOdCaeDnQDxmIJ6pGeTfewkAWc9l8V7LEsDPgXjMgCyJjUsiKnkawLuh99PXwz/raZ6+HhGRCOrpauS55kE9nb2WRBWR3MwHGcZjQ0QlzwbIbpYNrazoW7q1Mi2ym2cDNqVULyIiE+W0zEH85XjktGCvJRHR07BxSUQWoZ6ihkxb9CWvMi3vYSKicsBOdAWIyFLkMvMeZBgblxYml8uhVCohl/NQi8IMxMi/V0lro4UccjjCEfICpxytjZb3MJUifg7EYwbiMQPxmIF4zIAsiVORGIFTkRCZx+6kHTz7eBZanrgtkY1LIiIiKnHGTkWyxMa8qUgmajgViSH8yYKILKZg72VB7LUkIiIiqnjYuLSw+Ph4rFixAvHx8aKrYrWYgVjqKWrEa+LxOT5HHOIAcL44Efg5EI8ZiMcMxGMG4jEDsiQ2Li0sLy8PSUlJyMvLE10Vq8UMxMppnYP0Ful4JHsEDTTstRSEnwPxmIF4zEA8ZiAeM5CSmfkgw9i4JCKLSw9P140cy15LIiIiooqJjUsisrjc5rnIfSYXANhrSURERGWG3MwHGWYrugJEZB1yns9B3o48qKez15LMI1PJ4BPk89T14m7EQevCgdCJiIhKG6ciMUJxpiLJysrCgwcP4O/vD4VCYaEaUlGYgXi6DLz9oXBmBiKU+8+BBvCp6QNZ5tPvdNE6aBF3Kw6wKYV6maDcZ1ABMAPxmIF41pKBsVORfGnmVCRjORWJQey5tDCFQoHAwEDR1bBqzEA8ZvCvEydOYMWKFfDw8EDdunVRp04d1K1bF15eXhZ93nKfgQ2Q3Swb9r/b6+7fNUQr0yK7eXaZa1gCFSCDCoAZiMcMxGMGZEm8ZNjC0tLScPz4caSlpYmuitViBuIxAyAyMhKvv/46+vXrhzt37uDChQuYM2cO+vfvj/r166Nhw4YYOHAgZs+ejY0bN+L+/fsl+vwVIQP1FHWRDUsAkGnL7oBRFSGD8o4ZiMcMxGMGZElsXFqYWq3GiRMnoFaXzS871oAZiGfNGSQnJ2P27Nlo3749Lly4gK+++goHDhzAgQMHcPv2bRw9ehTffPMNXnnlFTg5OWHv3r2YNGkSmjdvjm7duuGTTz7B5cuXUdw7GCpCBjmtc5DVNgtaG8PHoqxPc1MRMijvmIF4zEA8ZiDFqUhKFi+LJSKygJycHKxduxaffPIJsrKy8M4772D06NFQKpW6dWxtbVG7dm3Url0bvXv31i1PSUnBoUOHsGfPHixbtgwfffQRqlSpgu7du6NHjx5o3bo1bG0LP31rtVpkZGQgJSUFycnJyMjIQGJiIh4+fIhLly4V2SuqVCrh6uoKV1dXODk5QS4vW79Bqqeooehj+B4hTnNDREQkFhuXREQl7MCBA5g9ezZu376NoUOHYurUqfDxefoop/nc3NzQp08f9OnTB9nZ2Thx4gT27NmDnTt3YsWKFXB3d0eXLl3g5eWF5ORkg4+srCyD+16/fr3R9ZDJZHB1dYWLi4uuwZn/cHFxgYeHB4YMGYIqVaoYvc/iyu+9tD9lD5nm39+OtTZaZLfOLrO9lkREVDaZM7VI2frZtWxh45KIqIRER0dj1qxZ2LNnD9q1a4dvv/0W9evXL9Y+7e3tERISgpCQECxYsAAXL17Enj17cODAAWRmZsLNzQ3u7u6oUqUKGjZsCHd3d7i7u8PDwwNubm7w8PCAg4MDEhMTsWPHDvTq1avQwYO0Wi0yMzORkpKC1NRUqFQqpKSkQKVSITU1Vfe4d+8eUlJS8ODBA6xatQpffPEFunbtWqzXaQpDvZfstSQiIhKPjUsLUygUqFevXoUe6rmsYwbiVfQMsrOzsWzZMnz66adwc3PDN998g5deegkyWcnelSGTydC4cWM0btwYU6dONWnb5ORkpKam6hqgJSEpKQnjx4/H8OHDMXHiRLz33nuwsbH8MK1P9l6Wl17Liv45KA+YgXjMQDxmQJbEeS6NUJx5LomoYvvtt98wffp0REZGYuTIkXjvvffg7OwsulqlJi8vD19++SUWLFiAtm3b4uuvv4a3t7fFn9fupB08+3jq/p24LbHMNy6JiKj0GDvP5bdmznM5ivNcGsSeSwvLzc2FSqWCi4tLkQNwkOUwA/FKMwOtVguVSqW791CtVsPJyUlyv6C5dcjKykJKSgpSUlKQlJSEVatWYevWrQgODsby5ctRt27dEn41JcdSGcjlcrz99tto1qwZxowZgy5duuCbb75B69atS+w5DMnvvVScUJTpEWIL4rlIPGYgHjMQjxmQJfEdZWGPHj3CunXrEBYWBl9fX9HVsUrMQLySyCArKwt37txBZGQkbt26hQcPHiA5ORlJSUlITk7WNfhSUlKg0WiK3JdSqYSbm5vBgWrs7e119xzmj7aa36DMyMiQ7MfLywuff/45BgwYUOKXwJY0S38OnnvuORw4cACjR4/Gyy+/jEmTJuHNN9+Em5tbiT9XPvV0NeyG2UE9vXzca8lzkXjMQDxmIB4zkJLJALmJf8LL9l98sdi4JKIyQ6vVIioqCjdv3sTt27dx+/ZtXWPy/v37yMvLAwA4OTnhmWeegYeHBzw8PPDss8/qBq9xd3eX/L+TkxPUarVucJr8gWoKDlCjUqmQmJiIyMhIZGdnw83NDW5ubqhatSoaNmyoGzQn/7+urq66cicnJ8FHrezw9fXF5s2bsXDhQnz22Wf46quvMHjwYIwcORI1atQo8efLaZmD+MvxgF2J75qIiIjMwMYlEQmTlZWFS5cu4dSpUzh9+jROnz6NR48eAXg84ED16tVRo0YNvPTSS6hRo4bu4ePjU+Z7Cq2Vra0tZsyYgTfffBNr1qzB2rVrsXr1anTp0gWjRo1Cu3btSjY7NiyJiKgYZDC9J5LfQArHxiURlZrk5GRcuHBB15A8d+4csrKyoFQq0axZM4SFhaF58+Z49tln4e/vXyojj5Jl+Pj4YMqUKRg/fjy2bNmC5cuXY8CAAahTpw5GjRqFvn37QqlUiq4mERERlSA2LonILNnZ2YiKisLdu3eRmJiouz8xNTVVcp9icnIyEhMTkZiYiE8++QTA48snW7ZsiRkzZqBVq1aoX78+7OzYBVUROTg4YMiQIRg8eDCOHz+O5cuX45133sHMmTPRqFEjNG7cGE2bNkWTJk1QrVo19kgTERGVY5yKxAicioSslUajwb179/Tuf4yMjER0dLRk4ByFQqG7V9HQ/Ynu7u7w8fFBs2bNULVqVTYirFhkZCR27dqF8+fP4/z584iOjgYAeHh4oHHjxmjSpImuwcnBJoiIyBzGTkWyyhZwNPErSboWeD2XU5EYwsalEdi4JGtz+fJlzJ49G3/88Qeys7MBAHZ2dqhevToCAwMl9z9Wr14dXl5evMSRzJaQkIALFy7oGpvnz59HfHw8gMe93IGBgahatSqqVaume1StWpX33hIRUaHYuBSDl8Va2KNHj7Bnzx706NEDXl5eoqtjlZiB8VQqFRYtWoSVK1eiZs2a+OCDD1CzZk3UqFEDAQEBZs+HxQzEK8sZVKpUCZ07d0bnzp0BPB41+MGDBzh37hz++usv3L17Fzdv3sSvv/6KhIQE3XZKpRJVqlTRNTyDg4Px0ksviXoZT1WWM7AWzEA8ZiAeM5CS//MwdRsyjI1LC8vNzcWDBw+Qm5sruipWixk8nVarxdatWzF79myoVCq8//77GDVqFOzt7Utk/8xAvPKUgUwmQ0BAAAICAvDiiy9KytRqNaKionT3+969exdRUVE4evQoVq5ciZs3b2Ly5MmCal608pRBRcUMxGMG4jEDsiQ2Loms3PXr1zF9+nQcP34coaGhmDNnDgICAkRXi8ggJycn1K1bF3Xr1tUrW7JkCf773/8iNzcX7733Hi+ZJSIiKmVsXFKFptVq8fDhQ1y7dg0fffQRAOgGmCnqv0qlssJ/Mb1z5w5WrVqF1atXIyAgAOvXr0enTp1EV4vIbBMnToSNjQ3mzZuHvLw8TJ06tcJ/jomIqHh4WWzJYuOSKhS1Wo2LFy/izz//xNmzZ/Hnn38iNjYWAODv7w9vb2+kpqYiJSUFqamphV4SYmdnB09PT929XFWrVpX8f+XKlSGXl79TS25uLg4cOIC1a9fi0KFDcHd3x8SJEzF27Fg4ODiIrh5Rsb399tuwsbHBnDlzoNFo8P7777OBSUREVErYuLQwV1dXhIaGciQpC8nOzsbhw4fx66+/4uzZs7h8+TI0Gg0cHR3RtGlTDBo0CA0bNoSHhweaN28uGdFUq9UiPT1d0tgs+N+EhATdvV3Hjh1DTEyMblt7e3vdQCJVq1ZFw4YN0a1bN/j4+Ig4DE8VGxuLH374Ad9//z0ePHiApk2bYsmSJejdu3epjPLKz4F41pRBeHg4bGxsMHv2bOTm5uKDDz4oEw1Ma8qgrGIG4jED8ZiBlOyfh6nbkGGcisQInIqkbMnLy8OpU6ewZcsW7NixA0lJSahRowZatWqF5s2bo3nz5nj22WdhY2NTos+bkZGB6Oho3UAiBQcV+fvvv5GXl4fmzZujR48e6N69O4KCgoR+odVqtTh+/DjWrl2L3bt3w87ODn379sWrr76Kxo0bC6sXUWlZsWIFZs6ciVGjRuE///lPmWhgEhFR6TB2KpLvzJyKZDinIjGIPZcWplarce3aNTz77LNwcnISXZ1yS6vV4q+//sKWLVuwdetWPHjwAAEBARg2bBj69euHunXrFvrFsaQyUCqVqF27NmrXrq1X9ujRIxw4cAB79+7F4sWLMW/ePNSoUQM9evRAjx490Lx58xJv7Bbm6tWr2LJlC7Zs2YLo6GgEBQUhIiICAwYMgJubW6nU4Un8HIhnjRmMHDkSqampWLRoETp27IiOHTsKrY81ZlDWMAPxmIF4zECK91yWLDYuLSwtLQ0HDx5EQEAAP8BmyM3NxQ8//IAVK1bgxo0b8PT0xEsvvYR+/fqhRYsWRt33WBoZeHl5YdCgQRg0aBAyMjLw22+/Yc+ePfjf//6Hr776Cl5eXujYsSOaNm2Kpk2bon79+lAoFCX2/FFRUdi2bRt+/vlnXL16Fe7u7njxxRfRr18/tGnTRniPDT8H4lljBnl5eTh27BiqVKmCVq1aia6OVWZQ1jAD8ZiBeMyALImNSyqzfv31V0RERODGjRt46aWXEBERgfbt28POzk501YqkVCrRrVs3dOvWDRqNBmfPnsXu3btx7NgxbNu2DTk5ObCzs0PdunXRpEkTNGnSBE2bNkXt2rWf2ruZnZ2NlJQUJCcnIyUlBRcvXsSWLVtw+vRpKJVKdO/eHdOnT0dISEiJzVFJVF6tXbsWJ06cwObNm/kFioiIqBSwcUllztWrVzFnzhwcOnQIbdq0wdKlS9GoUSPR1TKLjY0NWrZsiZYtWwIAMjMzceXKFZw/fx7nz5/HyZMn8d1330Gr1UKpVKJRo0Z49tlnkZGRgZSUFElDMiUlBRkZGZL929raokOHDvjyyy/Ro0cPfoEm+sfdu3fx4Ycf4tVXX0W7du1EV4eIiMoouezxw6RtTHyOo0eP4qOPPsKff/6Jhw8fYsuWLejTpw8AICcnBzNnzsSuXbtw+/ZtuLm5oUuXLvjvf/8Lf3//Qve5Zs0avPbaa3rLMzIyhM4AwMYllRnx8fH46KOP8P3336NatWpYvXo1evToIfySzpLk4OCAZs2aoVmzZrplaWlpuHjxoq7B+eeff8LJyQlubm6oUqUKGjRoADc3N7i7u0v+6+bmBn9/f2H3URKVVXl5eZg8eTI8PT0xa9Ys0dUhIiIrp1ar0bhxY7z22mt4+eWXJWXp6ek4e/YsZs2ahcaNGyMpKQkTJ07ESy+9hDNnzhS5X1dXV1y7dk2yTPTUcmxcWpidnR2qV69e5i/lFCkrKwvffvstPvvsM9jY2CAiIgIjRowoscs6y3oGzs7OaNu2Ldq2bSu6KhZT1jOwBtaUwbp163D8+HH8+OOPcHZ2Fl0dHWvKoKxiBuIxA/GYgVRpDOjTs2dP9OzZ02CZm5sb9u/fL1n2xRdfoFWrVoiKikLVqlUL3a9MJoOfn5+JtbEsTkViBE5FYjlHjx7F9OnTcefOHbz22mu63gYiInNcvXoVL7zwAgYOHIiFCxeKrg4REQli7FQkm+zMm4pkUA4QHR0t2bdCoXjqgI0ymUxyWawhBw4cQLdu3ZCcnFzoVCdr1qzByJEjERAQAI1GgyZNmuDDDz9E06ZNTXsxJYwj6VpYXl4esrKykJeXJ7oqZcrDhw8xevRoDBw4EN7e3jh48CDmzp1rkYYlMxCPGYhnDRmoVCqMHDkSNWrUQEREhOjq6LGGDMo6ZiAeMxCPGUjJzHwAQJUqVXS3Krm5uWHBggXFrk9mZiamTZuGoUOHFjmHZp06dbBmzRps374dGzZsgIODA5577jncuHGj2HUoDjYuLSw+Ph6ff/454uPjRVelTMjJycGyZcvQrl07HD9+HF988QW2bNmCOnXqWOw5mYF4zEC8ip6BVqvFO++8g9jYWCxfvhxKpVJ0lfRU9AzKA2YgHjMQjxmUnOjoaN2giykpKZg+fXqx9peTk4PBgwcjLy8PX331VZHrtm7dGq+88goaN26M559/Hv/73/9Qu3ZtfPHFF8WqQ3HxnksqNadOncK0adNw7do1vPrqq5g2bRoHoyEiie7du+PChQsAgMaNG2Pv3r1Gbbdq1Sps374dy5cvR40aNSxZRSIiIgCPB9QpqnfRFDk5ORg4cCAiIyPx66+/mrxfuVyOli1bCu+5ZOOSLC4qKgrz5s3Dtm3b0LRpU+zZs6fcTi1CRJbRsWNHqP6+iipyYPY/t6vs++sCmlf2g2udujh06FCh2549exYREREYOXIkevXqVUo1JiKiiqA0BvR5mvyG5Y0bN3Do0CF4eXmZvA+tVovz58+jYcOGJVw707BxSRajUqnw+eef49tvv4W7uzsWL16MwYMHQy7n1dhE9K8uXbog/e+rWKkEgmz+Xf6qPXBDA4z6+yq6dOmCAwcO6G2blJSEUaNGoWHDhvjggw9KsdZERETGSUtLw82bN3X/joyMxPnz5+Hp6Ql/f3/0798fZ8+exS+//AKNRoOYmBgAgKenp272hLCwMAQEBOju6/zPf/6D1q1bIygoCKmpqfj8889x/vx5fPnll6X/Agtg45JKXG5uLtavX4+FCxciPT0dY8eOxdixY+Hk5CS6akRUBiVf/gvfPNGwzBdkA3ylBEZf/svgth9//DHS0tKwdevWEpu+iIiIrIcMpvdEmjoD+5kzZ9CxY0fdvydPngwAePXVVxEREYHt27cDAJo0aSLZ7tChQwgJCQHw+ErAgh00ycnJGDVqFGJiYuDm5oamTZvi6NGjaNWqlYm1K1mcisQIxZmKRKPRIDMzEw4ODrCxMfDNqYI5fPgwIiIi8Pfff6N///54//334e/vL7RO1pZBWcQMxCurGYwYMQJx+/Zg81N+e+qvBny69cCaNWsky3v16oVq1aph6dKllqtkCSmrGVgTZiAeMxDPWjIwdiqSn+wAJxNbi2ot8HIOCt23NWPPpYXZ2NhU+B67+Ph4bN++HT///DP+/PNPtG7dGnv27NH79UUUa8igrGMG4pXVDPbu3Yu3jZjHu50t8IWBwX1u3bqFTp06WaBmJa+sZmBNmIF4zEA8ZkCWxJvfLCwpKQlbtmxBUlKS6KqUKJVKhU2bNmHIkCFo0qQJZs+eDU9PT6xZswZbtmwpMw1LoOJmUJ4wA/HKagYymQy5RqyX+8+6BSUmJiIxMRE1a9a0SN1KWlnNwJowA/GYgXjMQEouM+9BhrFxaWHZ2dm4efMmsrOzRVel2DIyMrBr1y6MHDkSDRs2xIQJE5CZmYkFCxbg4sWL+O6779CjRw+9L4CiVaQMyitmIF5ZzWDs2LE4YkTr8nDu43ULunXrFgCgVq1alqhaiSurGVgTZiAeMxCPGZAl8bJYMkir1SIqKgp//vmn7nH58mXk5OSgYcOGmDJlCnr37o2AgADRVSWiYujRowfOnz8P4HEj7dixY6X6/DNmzMBPS7/AiRygbSGXx57IAVK0j9ctKH/kvcDAQEtXk4iIKqiyMBVJRcLGJQF4PETy+fPnJY3JR48eAQBq1KiBZs2aYdCgQWjXrh2CgoIE15aIiis0NBSxZ/9ETTmwyOHxyHd779xEy8p+sAusgRMnTpRaXboMD8PU79ZhLoD2tkD+xQ9aLXAkF5iVBXQeHqa33a1btxAQEAClUllqdSUiIqLCsXFpxWJiYrBz50788ssvOHXqFPLy8uDi4oJmzZohLCwMzZs3R9OmTc2ayJWIyq6+ffvi0dk/8b0jULPAQIGD7YHoPGD4ndsICQnB4cOHS6U+ixYtwgcODpjx7bdwlgMt/6nTaQ2Qlge8OGoU5syZo7fdrVu3ys0lsUREVDbJYPrUImXrBrCyhY1LC3N2dkbHjh3h7OwsuioAgPv37+salKdPn4atrS2ef/55LFy4EK1atUJQUJBkDp2KoKxlYI2YgXgFM7h38neseKJhma+KHFjtCAy79nep1m/OnDmYM2cO1q9fj5kzZwIA5i6ci6FDhxa6zc2bN/H888+XVhWLjZ8D8ZiBeMxAPGZAlsR5Lo1QnHkuy4Lo6Gjs2LEDv/zyC86ePQt7e3uEhITgxRdfRLdu3eDu7i66ikRUSmbNmoUzq5Zj+1NGoR+kBuyfD8HGjRtLp2Imys3NRWBgICIiIvDGG2+Irg4REZUxxs5zud3evHkuX8rmPJeGsOfSwjIyMnD37l1Uq1at1O8LSktLw8cff4zly5fD1tYWnTp1wpdffolu3bqVy0ayuURmQI8xA/HyM1i3bh1eN2LO7A62wKLffrNonRISEtCgQQNUt318iVGaFmjZ/QWsWrXqqdtGR0cjJyenXF0Wy8+BeMxAPGYgHjOQ4oA+JYvHxsJSU1OxY8cOpKamltpzarVabN++Hc8//zzWrl2LKVOm4PLly1i9ejVefvllq2pYAmIyIClmIF5+BjY2Nsgx4nqVbK3+vJIlqUaNGght0gDj3IANfsA2f+C/XsCDA7vQ1N/vqdtHRUUBAKpXr26xOpY0fg7EYwbiMQPxmAFZEhuXFcytW7cwePBgjBo1Co0bN8aRI0cwYcIEXldPRACADz/8EEc1j0diLcreXODdd9+1SB3atGkD/5x07AsAFlYCGimAmnbAYBfg2DNAqDPQLKDoBmZ8fDwAwMfHxyJ1JCIi6yA380GG8dhUEOnp6Vi4cCE6duyIyMhIrFu3DmvWrEHVqlVFV42IypAuXbpAnQfsyy18neM5QJIWmDhxokXqkB0Vic8rAc8YuDFDJgOWVALc5MBXX31V6D7i4+Ph7OzMS7qIiIjKEDYuyzmtVott27ahQ4cO+PLLLzF27FgcOXIE3bp1E101IiqjJn38MT7IBHZkA3kFejC1WmB/DvBOJjBgwkSLPb+zHGhfRJtQJgNedwU+NjD9SL74+HhUqlTJArUjIiJrIpeZ9yDDitW4XLBgAWQymeTXba1Wi4iICPj7+0OpVCIkJASXL18ucj8hISGQyWR6j9DQUMlztWzZEi4uLvDx8UGfPn1w7do1yX5iYmLQs2dP+Pv7Izw8HHl5eXrP8eTIh0uWLLHoPTs2Njbw9fWFjY0RI2iY6OzZs3jppZcwevRo1K1bF4cPH8bUqVP5S/4TLJkBGYcZiFcwg1deeQXvf7EUc7KATmpgQjowMePx/8/IAN6Y9QGmTZtmkXp89dVX8LZ53IAsSkMF4F7E2yU+Ph7e3t4lWzkL4+dAvIqeQUpKCpZ/9inCunXCiC4dMH7oQJz8/XeUpYkBKnoG5QEzIEsyu3F5+vRpfPvtt2jUqJFk+aJFi7B48WIsXboUp0+fhp+fH7p27QqVSlXovn7++Wc8fPhQ9/jrr79gY2ODAQMG6NY5cuQIxo4di5MnT2L//v3Izc1Ft27doFardevMnDkTLVu2xO7du3Hnzh1s2LBB8jwODg6YOXMmcnJyzH3ZJqtUqRLCwsJK9Bf2e/fuITw8HC+88ALUajV+/PFHrFu3DjVq1Cix56hILJEBmYYZiPdkBv3798f5hzH44pdduFi9Fs5VqYFFm3/GuZgYhIeHW6wenTp1gjrv6eslaYCMItZLSEgod41Lfg7Eq8gZnDx+DG92DUHNdZ/gx7Qr+CnjGj68dRTHJoxA+OAByMrKEl1FABU7g/KCGZAlmdW4TEtLw7Bhw7B8+XJ4eHjolmu1WixZsgQzZsxAv3790KBBA6xduxbp6elYv359ofvz9PSEn5+f7rF//344OjpKGpd79uzBiBEjUL9+fTRu3BirV69GVFQU/vzzT906ycnJqF+/Pho2bIjAwECkpKRInmfIkCGPf9Vbvtycly1cWloaFixYgHbt2uHYsWNYvHgx9u/fX64mESeisqVZs2Y4duwYTpw4gbZt21r8+erUqYOkPOBeEfd8AsDyVMC2UuGNR14WS/Svu3fv4ouJY7HZ5iF6O+TC9p8rA56xBf5jl4Iht//A7LfHiq0kURnFAX1KllnHZuzYsQgNDUWXLl0kyyMjIxETEyO530+hUKBDhw44ceKE0ftfuXIlBg8eDCenwmf5zm84enp66pZNmzYN48ePh0KhwLlz5xAWFibZxtXVFe+//z7mzJkj6fG0pNjYWCxevBixsbFm7yMvLw8bNmxAmzZt8M033+Ctt97CiRMnMHToUF7SYISSyICKhxmIV5YyuJMLvBMvvd+zoN/SgZs5wKVLlwrdh7mXxZ45cwbDX+yGF1s0wIAOrfG///3P5H2YqyxlYK0qagarP/0YEXmxcCrkW12ofTZSL54uE6+7omZQnjADsiQDY/UVbePGjTh79ixOnz6tVxYTEwMA8PX1lSz39fXF3bt3jdr/H3/8gb/++gsrV64sdB2tVovJkyejXbt2aNCggW55ixYtcP/+fSQkJMDPz/Aw9uHh4fjss8+wePFizJo1y6g65YuLi0N6erru3wqFAu7u7sjNzcWjR4/01s8/DiqVSjdsfj5XV1colUqo1WqkpaVJyuzs7ODp6Ym8vDwcO3YM8+bNw4ULF9CzZ09MmDABDRs2hI2NDZKSkpCdnS3Z1tnZGU5OTsjIyNCbv8jGxkb3S7+hE4qnpyfs7OyQkpKCzMxMSZmjoyNcXFyQlZWF5ORkSZlcLtd9yYuPj5fc6woA7u7uUCgUUKlUkuMHPL5U2c3NDTk5OUhMTCz0GCYkJECj0Rh9DO3t7eHh4QGNRoP4+HikpKRIMvD29oZcLkdiYqLeZdJFHUNbW1t4eXkBMHwMvby8YGtri+TkZL1LkJycnODs7GzWMfTw8IC9vb3BY6hUKuHq6mrwGMpkMt1UDYaOoZubGxwcHAwew/z3t0ajQUJCgt5r9fHxgUwmM3gMXVxc4OjoiPT0dN37Pz+D/Pe3VqtFXFyc3n4rVaoEGxsbg8cwP5vMzEy9KxMKvr/j4uL07jHKf3+npqYiIyNDUpb//s7OzkZSUpKkzNj3d1pamt6PVsaeIx49eoTcXGlXnrHniCfPLcC/x7DgOSI/g/z3j8hzxIULF9C9aWO88ACY4Qm0cgAUMiAmF1inApYnA42790RsbKzBc0ReXh4SEhKgUCh0z/G0c8SjR4/w5ssvwTMtBqN9gbq+QI42AV/PH4/PZ03Bx2s3IjAwULetJc4R8fHxun3xHCE9RxRkyXMEgELrW57PERdOHMe7tsDDf1axlwFeNo9/wIn9J9KembH4YeVyDHvjTYPniCePoaXOEdnZ2Xp/k8v69whD75fy/D3iye9FFfUc8eQ5oDCyfx6m4Hg+hTOpcRkdHY0JEyZg3759cHBwKHS9Jyfe1mq1Rk/GvXLlSjRo0ACtWrUqdJ1x48bh4sWLOHbsmF6Zra1toQ1L4PEbfc6cORg3bhzeeusto+qUb8OGDZIvM/Xq1UNoaChUKhXWrVunt/57770HALh58yY2b94s6YkNDQ1FvXr1cO3aNRw8eFCyXfXq1dGjRw/897//xapVq+Dh4YGBAweiSpUq2L9/P4KCguDk5ITDhw/j5s2bkm07duyIFi1a4O7du9ixY4ekzNfXV9eb+8MPP+idIEaMGAFvb2+cPHkSFy9elJQFBwejffv2iI2NxaZNmyRlLi4uGDNmDADgp59+0jsJDBo0CFWrVsW5c+dw6tQpSVmjRo3QvXt3JCcn6x1DGxsbTJ48GQCwa9cuvZNwr169UKdOHVy9ehWHDh2SlNWqVQt9+/ZFZmYmNm/ejIsXL0Imk+kyyO/hPnjwIO7cuSPZtnPnzmjWrBkiIyOxc+dOSZm/vz+GDRsGAAYzHzlyJDw8PHD8+HFcuXJFUta2bVs899xzePDgATZv3iwp8/DwwMiRIwEAmzZt0vtiM3ToUAQEBODMmTM4c+aMpKxJkybo2rUrEhMT9eqkUCgwfvx4AMD27dv1vrz07dsXtWrVwqVLl/Dbb79JymrXro3evXsjPT3d4GudNGkSbG1tsW/fPkRHR0vKunfvjkaNGuHmzZvYu3cv1Gq1LoM6depg8ODB0Gg0Bvc7ZswYuLi44MiRI7h+/bqk7Pnnn0fr1q1x7949bNmyRVLm5eWF119/HcDjH8Ge/KMcFhYGX19fnDp1CufPn5eUtWjRAh07dkR8fLzeJfxKpRLjxo0DAGzbtk3vi2X//v0RGBiICxcu6F2hYew5Ys+ePXjw4IGk7GnniAEDBiAnJ8fgfsPDw/XOEfkZ3LhxA4GBgcLPEcMmvYNPPvkEgx4CPraAowyIzQWS8oB2nTujXr16WLduncFzREZGBjQajeQz9rRzxKhXBqOlTRoauQCX04EcAIN9gE9qAu/dysRrA/th2Khw3TneEucItVoNufxx1xLPEdJzREFVqlSx2Dkif6DAbdu2wc7OTlJens8RcSmpWFWg1zLQDhjq8vh9vuqftk1MLnDl6G/Q2CkMniPyWfp7RHx8vN7f5LL+PcJQNuX5e8SRI0ckGVTUc4ShdgJZnkxrwhBiW7duRd++fSWXYmo0GshkMsjlcly7dg21atXC2bNn0bRpU906vXv3hru7O9auXVvk/tPT01G5cmXMmTMHEyZMMLjO22+/ja1bt+Lo0aOSX5mfJiQkBE2aNMGSJUuQl5eHJk2aoFOnTqhevTqWLFmid2IoKDU1FW5ubjh+/DicnZ11y435xTE2NhbLli3Dyy+/LLmEq7Bfy7RaLfbv34+PP/4YKSkpGD16NF555RXY29vr1hH5i2N57Lm8evUqfvzxRwwYMEBXz/L8i2N57JWIj4/XZeDv78+ey3+Uds/ljz/+iBEjRiAwMLBcnyNu3bqFfv36Yc2aNejRoweAos8RBw8exJq3h2Fl0L9lCjngaQdotEBcNrA6Bvi7eW9Mm/14+hNL9Vzu3LkTI0aMgEKh4DlCQM9l/pfRF154Qe+e3fJ8jhjWsT2+x31dd4qhnsu9GTLce2UiBr86Quj3iOjoaKxYsULyN7msf4+oaD2Xd+/elXwvqqjniHv37qFFixZISUmBq6ur3nr53+/3KwAnE7si1VqgaxYK3bc1M6nnsnPnznr3wLz22muoU6cOpk6diho1augG5MlvXGZnZ+PIkSNYuHDhU/f/v//9D1lZWXjllVf0yrRaLd5++21s2bIFhw8fNqlh+SS5XI4FCxagX79+JvVe+vj4wMXFRW+5ra2t3qXABTk6OsLb29vgOk5OTrpf7m7cuIHp06fj2LFjCA0NxZw5cxAQEFDofgsOpvQkpVJZ5JQkRdXXzc0Nbm5uBssUCkWR2xZ1D5SLi4vB4wc8PlEUtd+iBu4oeAyfZGNjA29vbzg7OxvMoOA9u08qzjF0d3cvtKw8HsOi9lvUMXR0dISjoyMA6DLIX18mk5l9DB0cHIq8eiL/D6Ehrq6uhf4hsLe3NzsbZ2dnyY9PBT3tHJH/RcOQorKRy+VF7vfJc4Szs7Muj/J8jrhx4wYA4Nlnn9WVF/X+Xr5oLiKqAJUV+mU2ssfLxz8DPPfrXvh+9Y2kvKTPEfk9lzxHPFbwHPEkS5wj8r/MV6pUqdB9l8dzROsuXXFr7xq0e+Ily2VA5X++6e1W+mLhGyMl+xLxPcLe3r7Qv8lAxXp/l9XvEYV9LyqLx7A454jC3oNPMmeAHg7oUziTGpcuLi6SexyBx28mLy8v3fKJEydi/vz5CAoKQlBQEObPnw9HR0cMHTpUt01YWBgCAgKwYMECyb5WrlyJPn36GDyJjh07FuvXr8e2bdvg4uKiu7/Tzc3NrHkdQ0NDERwcjG+++abIN2ZxeXp6YsSIEUWeJNRqNZYsWYJly5YhICAA69evR6dOnSxWJ2tjTAZkWcxAvIqUwd9///3UL+MFJcc+RJ2n/B7pbAPYa58yhG0xVaQMyquKmsGI8RMx4eBefK95CE8D4/z9kO2Aau1DimyklpaKmkF5wgzIkkwe0OdppkyZgoyMDISHhyMpKQnBwcHYt2+f5JemqKgo3a+3+a5fv45jx45h3759Bvf79ddfA3h8eWtBq1evxogRI8yq68KFCy0+9L6dnV2hvyBptVrs2bMHM2fOREJCAiZOnIixY8cW2SNDpisqAyodzEC8spZBZmYmFi1ahIcPH6JTp06SqaeeZs+ePWjXrl2hv2Y/yUHpiEc5yfCyK3ydPC2Qo7XsEA1lLQNrVFEz8PPzwwcrv8OQN1/DgKx4DLDNhIscuJQNfGtTCWjeBvMWfSK6mgAqbgblCTOQkske9/KbtI1lqlIhmHTPpbXKvyb7xo0bhV6OUZiUlBScPHkSrVu3lnTP3717F++//z4OHjyIzp07Y968eahevXoJ15yAwjOg0sMMxCsrGeTm5qJ7s8bISnyEEAegkg1wPhu4lgO06z8QHy35vMjtExMT0bBhQyxYsEBvuqnCrPj2Wzz69gMsqlH4OrsfAV85N8OabbtMeTkmKSsZWLOKnkFWVhZ2bd2CPZvWIyszE9VqBWHYuAmoXbu26KrpVPQMygNryUClUiEoKOip91z+6gA4m9haTNMCnTJ5z6UhvGTYwjIzM3Hx4kXdje1ZWVn45JNP0L59e/z9999YvXo1vv/+ezYsLejJDKj0MQPxykIGubm5aFujGl7OfoQzAcCSSsBMD2CzL/BrZeDGlv9h5CvDitzHvn37kJeXpxvIxxivjxyJnSoFrqcbLk/TADOj5Ji2cLEpL8dkZSEDa1fRM1AoFOg7aDC++Xk71uzah/98/mWZalgCFT+D8oAZSMnNfJBhPDal7Msvv8Snn36KUaNG4ejRo+jZs6fR07QQEZVnr4eFobtCgynugO0Tpz1vG2CbL/D34YN6oyAWtHv3brRo0aLIQZueJJfLsfTHHehzzQ5rYoDMfwZRzNMCBxKBkItyDJsagTp16pj+ooiIiEiHjctSFhkZiaZNm2LGjBmFjqpFRFQR3Tj6K6YWcQWWkxx41Rl4pf/LBsvVajWOHDmCnj17mvzcjRo1wtaT5/Fr3VAEX7JH8AVbNLtgh08UDfHptgN4deQok/dJREREUiU+oA8VLSkpqcihv4mIKioXGeD3lL86LzgCa2/8bbDs0KFDyMzMxAsvvGDW83t5eeHTb1aatS0REVVMnIqkZPHYWJijoyOCg4N1oxomJiYWOZ8PlbwnM6DSxwzEKy8ZFHWXwO7du1GvXr1ye496ecmgImMG4jED8ZgBWRJ7Li3MxcUF7du31/2bPZel78kMqPQxA/HKQgYqLRCrAXwNzMOXb2864FozSG95Tk4O9u/fjzfffNOCNbSMvLw8rFyxAhsXfwJZRjo0AJRelfD2vPlmXeJL5isLnwNrxwzEYwZSMpg+tQhHSykcey4tLCsrC1FRUcjKygLAnksRnsyASh8zEK8sZFCtdTssTi68PCMPWKUC1v1vs17ZqVOnkJqaiu7du5v9/CtWrMCwYcMwduxYJCQkmL0fU+Tm5uKFFs1wY+4HWJaTgm/tcrDDPgf/TXmIH0a9jlGF3F9KllEWPgfWjhmIxwzIkti4tLDk5GRs2rQJycnJyM3NRUpKChuXpaxgBiQGMxCvLGTw/caN2JEpxxcpj0dqLShJA/SNBWq0boNKlSrpbXvgwAH4+vqiYcOGJj/vOxPeRtvafvhz5Ux0Ux9EzVs/YUC7BmjfsAbS0tLMfTlGeaP3S+iXGIN5DoBSBvyYDSRrgbo2wCoHLZR/HMdHH86xaB3oX2Xhc2DtmIF4zEBKLjPvQYbxsthSlD+f0Lx587B79240adJE9zD0ZYqIqCKxtbXF0Ru30b1pI6y6n4rujkAlOXA+G7iQDbToEYovVhgecOfgwYPo1KmTyVM3vfnacDw6ux9/vAx4Ofy7/L+tgeVX09GpaRCOXoqEg4ND4TsxU2pqKqIunsfyQnYtkwGzFUDvVSvx3qwPSvz5iYiIjJGVlQWFQlEi+2LjshQ5Oztj8+bNOH78OM6fP4+VK1ciKSkJAFClShVJY7Nx48ZwdnYWXGMiopLl4OCAI1evIy0tDR988AGuxcejQ4cOWDZyZKHb3L17Fzdu3MC0adNMeq60tDRcPb4f5wYCznbSMpkMGFUPuJ+mRf+XQvHLvoPmvJwirV27Fr3keUUOUuQiA6prsnHlyhXUq1evxOtARET0pL1792LDhg347bffEBUVhby8PDg6OqJZs2bo1q0bXnvtNfj7+5u1bzYuS1m7du3Qrl07AIBWq0VUVBTOnTuHc+fO4cKFC/jkk0+Qnp4OmUyGgIAAVK1aFdWqVdP9N///K1WqZPIv+EREZYWzszMWL15s1Lr79++HnZ0dOnToYNJzvDpsMIY/q9+wLGhSY+CHzZdN2q+x4uPj8awRp2kfGRATE8PGJRGRANY0FcnWrVsxdepUpKSk4IUXXsB7772HgIAAKJVKJCYm4q+//sKBAwfw4YcfYsSIEfjwww/h7e1t0nOwcWlhcrkcLi4ukMv134YymUzXYOzTpw8AQKPR4Pr16zh//jxu376NqKgoXL16FXv37kViYqJuW6VSqWtwVq9eHe3atcPzzz8PpVJZWi+t3CgqAyodzEC88pzBwYMH0bp1a5Ov5oi7eREvdix6HXcF4FEyVwLpefbZZ/F3gXtL5QCcZfpfSm7nyRAUpD9CLpW88vw5qCiYgXjMwHrNnz8fH3/8MUJDQw3mP3DgQADA/fv38dlnn2HdunV45513THoOmVar1T59NeuWmpoKNzc33LhxAy4uLsLqoVKpEBUVhbt370r+e+PGDURFRUGpVKJjx47o3r07unbtyoGDiKjcU6vVqFevHt5//32MHj3apG3b16+K9R2z0fwpP7o2/xHY9VdMMWppWF5eHtpXr4p9ilzYFdKD+TAPeM3WFQf/vl7iz09EZM1UKhWCgoKQkpICV1dXvfL87/enHB//8GeKNC0QnI5C923N2HNZjri4uKB+/fqoX7++XtmNGzewZ88e7NmzBxMnToRMJkOrVq3Qs2dP9OjRA9WqVRNQYyKi4jl+/DiysrLQpUsXk7cNqNcKW24fK7Jx+SgTSM4uRgWLIJfL0X3oMExevw6fKbR6owuma4HwLBnGf7zIMhUgIiIqZewPt7D4+HgsW7YM8fHxFn2eoKAgvP3229i5cycuXLiARYsWwdnZGfPnz0dwcDBCQkLw3//+F+fOnUNeXp5F61LWlFYGVDhmIF55zWDnzp0IDAxEzZo1Td529XffY+NNIKWIqdwWnQN8azcxv4JPMeu/C+Ha8yW8mCHH91nAkkzgci6wOhsIzbRB72kz0fuf2yLI8srr56AiYQbiMQMCHo/98uOPPyI8PBz9+/dHv379JA9zsXFpYXl5eVCpVKXaoPPx8cErr7yC77//HleuXMGKFSvQoEEDrFmzBj179kSzZs0wZcoUHDp0yCom0BWRAUkxA/HKYwYHDx7Epk2bEBYWZtb2Dg4OaNX9ZXTZATxQS8s0ecDi88Cm23L8uPWX4le2CIu++QZrTp3GkRZt8b2NA95x8MCdvoOx6/JVvDl2rEWfm6TK4+egomEG4jEDKbmZj/JuwoQJGD58OCIjI+Hs7Aw3NzfJw1y8LLaCc3JywosvvogXX3wRubm5OHXqFPbu3Ys9e/Zg3bp1cHZ2RqdOndCjRw907ty5WG8mIqKScu/ePYwbNw6dO3c2+V7Lgj794kvM+cALz2/8FrVcgebeQFIW8Ot9wNbZHcev/AVbW8v/KQwICMDCr77GunXrEBYWBl9fX4s/JxERUWG+//57/Pzzz3jhhRdKdL8VoeFNRrK1tcVzzz2HOXPm4NSpUzh06BDCw8Nx584dhIeHo379+hg1ahRu3LghuqpEZMWys7MxatQoODo64osvvij2iIYfzJmDE9djMGD2ctysNQDykHDsu3AHv/75d6k0LImIqOySmfko79zc3FCjRo0S3y//qlopmUyGunXrom7dupg8eTIePHiAXbt24euvv0aHDh0waNAgvPPOO3jmmWdEV5WIrMyHH36IS5cuYdu2bSU66nWvXr3Qq1evEtsfERFReRUREYH//Oc/WLVqVYlOZcipSIxQnKlIsrKyEBsbC19fXygUFppMrQRlZWXhu+++w6effgqVSoVXX30V48ePN3kC1bKkvGVQETED8cpLBjt27MCbb76JuXPnYuTIkaKrU6LKSwYVGTMQjxmIZy0ZGDsVyVkn86YiaaYu31ORpKeno1+/fjh+/DiqV68OOzs7SfnZs2fN2i8bl0YoK/Nclia1Wo3ly5fjyy+/hEajwejRozFmzBjek0lEFnP79m1069YNHTt2xLfffguZrCJceERERCKwcVm0gQMH4tChQ+jfvz98fX31/ubOnj3brP2ycWmE4jQuVSoVzp07h6ZNm5bLhmlSUhK+/PJLrFy5EgqFAmFhYXjhhRfQuHHjcvPFr7xnUBEwA/HKegapqano27cvMjIysHfv3jJZx+Iq6xlYA2YgHjMQz1oyYOOyaE5OTti7dy/atWtXovvlgD4Wlp6ejlOnTiE9PV10Vczi4eGBmTNn4vfff0ffvn2xbt069OjRA82aNcPUqVNx6NAhZGdbaAbyElLeM6gImIF4ZTmDxMREDBgwAPfu3cOKFSsq7JedspyBtWAG4jED8ZiBlAymT0NSPrpXilalShWLNIzZuCSj+Pn5YcGCBbh06RI2b96MF198Eb/++iuGDBmCevXqYfTo0diyZQtSUlJEV5WIypH4+Hj069cP0dHR+Omnn1CvXj3RVSIiIqrwPvnkE0yZMgV37twp0f1ytFgyiZ2dHdq1a4d27dphzpw5uHLlCvbs2YO9e/firbfegq2tLdq2bYvu3bujR48eCAgIEF1lIiqjHjx4gAEDBiAtLQ1btmzBs88+K7pKRERkZeSyxw+TtrFMVUrVK6+8gvT0dNSsWROOjo56A/okJiaatV82LslsMpkM9evXR/369fHOO+/g/v372Lt3L/bu3YvZs2djxowZaNSoka6hWa9evXJznyYRWdbdu3fRv39/aLVabNu2DdWrVxddJSIiIqvx6aefWuR7ORuXFubg4IBGjRrBwcFBdFUsLiAgAK+//jpef/11pKSk4Ndff8WePXuwbNkyfPTRR6hSpQp69OiB7t27Izg4GFlZWUhOTkZqaiqSk5ORkpKi+2/B/7e1tUX16tUlDw8PD6M/ENaUQVnFDMQrSxncuHEDAwcOhIODA3788UermU+3LGVgrZiBeMxAPGZAADBixIhCyzIyMszeL0eLNYI1TkVSkrKzs3HixAnd5bMPHz4scn0nJye4u7vDzc0Nbm5uyM7Oxp07d/Do0SPdOq6urnoNzho1aqBhw4ZwcnKy9EsioifExMTg/Pnzkh+HCv5wVPDx6NEj1KhRA//73//g6+sruupERFQBGTta7CVnwMXEDjyVFmiYVr5Hix07diy+/PJLveVqtRqhoaE4fPiwWftl49IIxWlc5uTkIDk5Ge7u7nrXMlsjrVaLCxcu4NKlS3BxcdE1IPMbk66uroUeJ5VKhTt37hh8PHjwAFqtFnK5HEFBQWjSpInuERQUhIyMDGYgED8H4lkyg4cPH6JLly66H4CUSqXks+3q6ir5nHt4eODll1+Gh4dHidajrOPnQDxmIB4zEM9aMmDjsmhBQUEYNGgQ5s6dq1umVqvRo0cPAMBvv/1m1n55WayFJSYmYt26dQgLC+Mv9Hh8n2Z+o89ULi4uaNiwIRo2bKhXlpmZiVu3buHChQs4f/48zp8/j59++gm5ubmws7ODp6cnOnTogLZt26Jx48YIDAzk5SCliJ8D8SyVQU5ODkaPHg17e3ucPHkSlStXhkKhKLH9VyT8HIjHDMRjBuIxAymZ7PHDpG0sU5VStW/fPrRr1w5eXl6YNGkSVCoVunfvDltbW+zevdvs/bJxSRWCg4ODbnChoUOHAnjc4Lx8+TKOHj2K7du34/Tp0/jxxx+R31lfuXJlVKtWDVWqVEG1atVQtWpVVKtWDdWqVYOPjw/kcv2xwPJ/7cu/1C8pKQnJyclQqVRQKpVwdXWVPFxcXODq6gp7e/tSPR5EpWX+/Pk4e/YstmzZwkF5iIiIyonAwEDs3bsXISEhkMvl2LhxIxQKBXbu3FmsW8zYuKQKy8HBAc2bN8czzzyD3NxchIWFwdHREX/99Rfu3LmDqKgo3L17F5GRkTh8+DDi4+N12yoUClStWhWVKlWCSqXSNSLVarXB57Kzs0NOTk6hdVEqlbqGpqurKzw9PdGwYUNdLy5/OaTyaM+ePfj6668RERGBli1biq4OERGRyeQwfWqRijAVCQA0aNAAv/zyC7p06YLg4GD88ssvUCqVxdonG5dkVVxcXNCmTRu0adNGr0ytViM6OhpRUVG6huejR49Qu3ZteHh4SO4XK/j/bm5uUCqVyMnJgUqlQmpqqu6hUqmQkpKitzwuLg7ff/89Pv30UwCPe1EL3ifauHFjuLu7l/LRITLe3bt3MWHCBPTs2ROjR48WXR0iIiJ6iqZNmxqcbUGhUODBgwd47rnndMvOnj1r1nOwcVkKbGxsRFfB6hmTgZOTE+rUqYM6deqY9Rz593Z6enoatb5Wq8WDBw9w7tw53X2iS5cuhUqlAgDUqFEDjRs3Rs2aNXWX61atWrXQS3bLOn4OxCupDDIzM/Hmm2/C3d0dS5Ys4fy1JuDnQDxmIB4zEI8ZWKc+ffpY/Dk4WqwROBUJlZa8vDzcvn0b58+fx7lz53Dx4kVERkYiISFBt46DgwOqVKkiuUe0atWqqFKliq5H1cnJqVw2QKl8mDNnDlauXIkdO3agUaNGoqtDRESkx9jRYv92NW+02Dqp5Xu0WEthzyVRGSKXy1GrVi3UqlUL/fv31y1Xq9WIiopCdHQ07t69i7t37yIqKgrHjx/Hhg0b9Ca7lcvluvs786d4efK/hgYecnNz0/2/rW3hp4fMzEzJvIX5AxwlJycjMzNTN82MoeflKL3lW3x8PFatWoVx48axYUlERFSBabVak69OYuPSwhISErBr1y688MILqFSpkujqWKWKkIGTkxPq1q2LunXr6pVptVokJCQgOjoaqampSElJKfS/cXFxun+npqbqNUoLyp+r0MXFBU5OTlCr1br9ZGZmGtxGoVDAwcEBaWlp0Gg0ha5TsLEZEBCg1wsbEBDAEXZLWEl9DpYtWwZbW1u8+eabJVg761ARzkXlHTMQjxmIxwyk5LLHD5O2sUxVLK5u3bqYNWsW+vfvX+T3rBs3bmDx4sWoVq0apk2bZtJzsHFpYRqNBrGxsYV+0SbLq+gZyGQyeHt7w9vb2+Rtc3JyDA5A9ORgRGlpaXBycoKbm5vu0tuCj/xl+SOMabVapKen63o279y5g23btulGFM1vpCYnJ+P+/fu4cOEC7t+/r8tILpfrporJb3DWqFEDzz//vNH3tJJUSXwOEhMTsWbNGrzxxhsccMoMFf1cVB4wA/GYgXjMwHp9+eWXmDp1KsaOHYtu3bqhRYsW8Pf3h4ODA5KSknDlyhUcO3YMV65cwbhx4xAeHm7yc7BxSWTF7Ozs4OXlBS8vrxLdr0wmg5OTE5ycnODv7w9PT0/89ddfePHFFwuddiUnJwcPHjzQjdSbf+nv1atXsXfvXiQmJsLGxgatWrVCjx490KNHD1SrVq1E601FW7FiBfLy8jBq1CjRVSEiIioRMtnjh0nbWKYqFtepUyecPn0aJ06cwKZNm7B+/XrcuXMHGRkZqFSpEpo2bYqwsDC88sorZv+IzMYlEZUJdnZ2up7K559/Xq88JiYG+/btw549ezBv3jzMnj0bdevWRY8ePdC9e3c0btyYo5ZaUGpqKlauXImwsDBeRkVERFSOtW3bFm3btrXIvsvrJcNEZGX8/PwQFhaG9evX48qVK1i+fDnq16+PVatWoUePHmjWrBmmTZuG27dvi65qhbRmzRpkZGTgrbfeEl0VIiIiKqM4FYkRijMVSUZGBu7evYtq1arp7kej0sUMxLNkBjk5OTh16hT27NmDHTt2ICEhAUOGDMGkSZMQEBBQos9VnhUnA7VajZYtW6JXr15YuHChhWpY8fFcJB4zEI8ZiGctGRg7FcktD/OmIqmZxKlIDGHPpYUplUrUqVOnQn94yzpmIJ4lM7Czs0O7du0wd+5cnDp1Ch988AF27dqFtm3bYvbs2ZI5Qq2ZuRlkZWXh3XffRWpqKsaOHWuh2lkHnovEYwbiMQPxmEHpO3r0KHr16gV/f3/IZDJs3bpVUq7VahEREQF/f38olUqEhITg8uXLT93vTz/9hHr16kGhUKBevXrYsmWLhV6B8di4tDC1Wo0zZ85ArVaLrorVYgbilVYGDg4OGD16NP744w+MHz8eP/zwA4KDg7Fo0SKoVCqLPndZZ04GKSkpGDJkCHbt2oWvvvoKVatWtWANKz6ei8RjBuIxA/GYgZQc/05HYvTDxOdQq9Vo3Lgxli5darB80aJFWLx4MZYuXYrTp0/Dz88PXbt2LfK7y++//45BgwZh+PDhuHDhAoYPH46BAwfi1KlTJtauZLFxaWFpaWk4dOgQ0tLSRFfFajED8Uo7A2dnZ7zzzjv4448/EBYWhq+++grBwcH4+uuvkZWVVSp1KGtMzSA6Ohq9evXC1atX8b///Q8vvfSShWtY8fFcJB4zEI8ZiMcMSl/Pnj0xd+5c9OvXT69Mq9ViyZIlmDFjBvr164cGDRpg7dq1SE9Px/r16wvd55IlS9C1a1dMnz4dderUwfTp09G5c2csWbLEgq/k6di4JKIKy9PTE7Nnz8bvv/+OF198EfPmzUOXLl1w9uxZ0VUr0y5evIjQ0FBkZmZix44dCA4OFl0lIiKiMqfgXOGpqalm/YAdGRmJmJgYdOvWTbdMoVCgQ4cOOHHiRKHb/f7775JtAKB79+5FbvOkvLw8XL9+HceOHcPRo0clD3OxcUlEFV7lypWxaNEi7N+/H05OTnjxxRcRERGB9PR00VUrcw4ePIg+ffrA398fO3fuRK1atURXiYiIyHLkgMzER34LqkqVKnBzc9M9FixYYPLTx8TEAIDePOC+vr66ssK2M3Wbgk6ePIlatWqhbt26aN++PUJCQnSPjh07mvgq/sV5LonIatStWxe//PILli1bho8++gh79+7F4sWL0aZNG9FVE0qr1eLGjRvYu3cv/vvf/6Jz5874+uuv4eTkJLpqREREZVZ0dLRktFiFQmH2vp6cq1ur1T51/m5ztsk3ZswYtGjRAjt37kTlypVLbK5wNi4tzN7eHrVq1YK9vb3oqlgtZiBeWcrA1tYW48aNQ48ePTBp0iT07dsXr7/+OmbMmFGhG1MFM8jMzMTFixdx6tQpnD59GmfOnEFiYiLkcjlef/11/Oc//4GNjY3oKlc4ZelzYK2YgXjMQDxmICWXP36YtM0//3V1dS32VCR+fn4AHvdEVq5cWbc8Li5Or2fyye2e7KV82jYF3bhxA5s3by7xK5Q4z6URijPPJRGVXRqNBqtXr8a8efNQqVIlLFq0qFiXgpRFWVlZuHPnDm7duoUzZ87g9OnTuHDhArKzs+Ho6IjmzZujVatWaNWqFZo3bw5nZ2fRVSYiIio2Y+e5vOsNuJrYuEzNA6rFmzfPpUwmw5YtW9CnTx8Aj3sb/f39MWnSJEyZMgUAkJ2dDR8fHyxcuBCjR482uJ9BgwZBpVJh165dumU9e/aEu7s7NmzY8NR6dOrUCVOmTEGPHj1Mqv/TsOfSwjQaDTIzM+Hg4MCeAEGYgXhlNQMbGxuMHDkSXbt2xeTJkzFkyBC0b98e06dPR9OmTUVXz2i5ubmIjo7G7du3dY/IyEjcunUL9+/fR15eHgDAx8cHwcHB6N27N1q1aoV69erB1pZ/BkpLWf0cWBNmIB4zEI8ZSOnuozRlGxOfIy0tDTdv3tT9OzIyEufPn4enpyeqVq2KiRMnYv78+QgKCkJQUBDmz58PR0dHDB06VLdNWFgYAgICdPd1TpgwAe3bt8fChQvRu3dvbNu2DQcOHMCxY8cKrcfFixd1///222/jnXfeQUxMDBo2bAg7OzvJuo0aNTLxVT7GnksjFKfnMjY2FuvWrUNYWJjR3dRUspiBeOUhA61Wiz179mDBggW4fv06XnjhBUydOhXPPvus6KoZdOfOHfzyyy/YuXMnLl26hNzcXACP7/eoXr06atasicDAQNSoUQM1atSAi4sLdu/eXaYzqOjKw+egomMG4jED8awlA2N7LqN8zeu5rBprfM/l4cOHDV4Z9eqrr2LNmjXQarX4z3/+g2+++QZJSUkIDg7Gl19+iQYNGujWDQkJQfXq1bFmzRrdss2bN2PmzJm4ffs2atasiXnz5hmc7iSfXC6HTCZDYc2//DKZTAaNRvPU12UIf7ImIsLjE2rPnj3RrVs3/Pzzz7pLZF9++WW89957qFq1qugq4tatW/jll1/wyy+/4NKlS1AqlejUqRMGDhyImjVrokaNGvD394fcwM0jsbGxAmpMREREISEhhTbogMffQSIiIhAREVHoOocPH9Zb1r9/f/Tv39/oekRGRhq9rrnYuCQiKsDGxgYDBgxA79698cMPP+DTTz/F1q1b8corr2DixIml+itvdnY2bt26hV27duGXX37B1atX4ejoiK5du2L8+PHo1KlThR6EiIiIyNKKM6BPeVOtWjXd/x89ehRt27bVuz0mNzcXJ06ckKxrCjYuiYgMsLe3x2uvvYaBAwdi1apVWLp0KVavXo1nnnkGdevW1T3q1KmDmjVrFjrqnkajQWpqKlJSUpCcnIzU1FQkJyfr/p2UlCT5//yypKQk3Tyczs7O6NatG9577z2EhITA0dGxNA8FERERVTAdO3bEw4cP4ePjI1mekpKCjh078rJYIiJLcHJywttvv42wsDDs378fV69exdWrV7F582Y8ePAAAGBnZ4eaNWuiWrVqSEtLkzQgU1NTDe5XJpPB3d1d8vD19cWzzz4Ld3d3eHh4wM3NDX5+fggODoaDg0NpvmwiIiKrILMxY0CfkpkSUqjC5sR89OhRsa6K4oA+RijOgD55eXnIycmBnZ2dwfugyPKYgXgVNYPk5GT8/fffugbn/fv34eLiAldXV7i7u8PNzU3334IPd3d3uLi4lOqxqKgZlCfMQDxmIB4zEM9aMjB2QJ/7z5g3oE/APfOmIhEtf8Cfbdu2oUePHlAoFLoyjUaDixcv4tlnn8WePXvM2j97Li1MLpdLQqPSxwzEq6gZuLu7o3Xr1mjdurXoqjxVRc2gPGEG4jED8ZiBeMxAqjSmIilL3NzcADzuuXRxcYFSqdSV2dvbo3Xr1njzzTfN3j8blxaWmJiIgwcPonPnzvD09BRdHavEDMRjBuIxA/GYgXjMQDxmIB4zsG6rV68GAFSvXh3vvvtuiQ8MyMalheXk5ODOnTvIyckRXRWrxQzEYwbiMQPxmIF4zEA8ZiAeMyAAmD17NgAgLi4O165dg0wmQ+3atfUG+DFVxb3QmoiIiIiIqAgyG/Me5V1qaiqGDx+OgIAAdOjQAe3bt0dAQABeeeUVpKSkmL1fNi6JiIiIiIisyMiRI3Hq1Cn88ssvuhHuf/nlF5w5c4b3XBIREREREZlKJje9J7I8D+iTb+fOndi7dy/atWunW9a9e3csX74cPXr0MHu/7Lm0MGdnZ3Tu3BnOzs6iq2K1mIF4zEA8ZiAeMxCPGYjHDMRjBgQAXl5eupFjC3Jzc4OHh4fZ++U8l0YozjyXRERERERUuoyd5zKmJuBqYs9lqgbwu1U+57nM9+233+LHH3/EunXrULlyZQBATEwMXn31VfTr1w+jR482a7/F6rlcsGABZDIZJk6cqFum1WoREREBf39/KJVKhISE4PLly0/dV3JyMsaOHYvKlSvDwcEBdevWxa5du3TlKpUKEydORLVq1aBUKtG2bVucPn1aso+YmBj07NkT/v7+CA8PR15enq4sJCQEMpkMGzdulGyzZMkSVK9e3bwDYISMjAxcuXIFGRkZFnsOKhozEI8ZiMcMxGMG4jED8ZiBeMxAyloH9Pn6669x8uRJVKtWDbVq1UKtWrVQtWpVnDhxAt988w2aNWume5jC7Mbl6dOn8e2336JRo0aS5YsWLcLixYuxdOlSnD59Gn5+fujatStUKlWh+8rOzkbXrl1x584dbN68GdeuXcPy5csREBCgW2fkyJHYv38/vvvuO1y6dAndunVDly5dcP/+fd06M2fORMuWLbF7927cuXMHGzZskDyPg4MDZs6cWapDL6empmLnzp1ITU0tteckKWYgHjMQjxmIxwzEYwbiMQPxmAEBQJ8+ffDuu+9ixowZGD58OIYPH44ZM2bg3XffRe/evSUPU5g1oE9aWhqGDRuG5cuXY+7cubrlWq0WS5YswYwZM9CvXz8AwNq1a+Hr64v169cX2r26atUqJCYm4sSJE7CzswMAVKtWTVeekZGBn376Cdu2bUP79u0BABEREdi6dSu+/vprXR2Sk5PRtWtXNGzYEIGBgXrD6A4ZMgQ7duzA8uXLER4ebs5LJyIiIiKiCsKcnsiKMKBP/jyXJc2snsuxY8ciNDQUXbp0kSyPjIxETEwMunXrplumUCjQoUMHnDhxotD9bd++HW3atMHYsWPh6+uLBg0aYP78+dBoNACA3NxcaDQaODg4SLZTKpU4duyY7t/Tpk3D+PHjoVAocO7cOYSFhUnWd3V1xfvvv485c+ZArVab89KJiIiIiIjKveTkZKxYsQLTp09HYmIiAODs2bOSK0NNZXLjcuPGjTh79iwWLFigVxYTEwMA8PX1lSz39fXVlRly+/ZtbN68GRqNBrt27cLMmTPxySefYN68eQAAFxcXtGnTBh9++CEePHgAjUaD77//HqdOncLDhw91+2nRogXu37+P6OhonDhxwuAoWOHh4XBwcMDixYtNfelERERERFSR2Jj5KOcuXryI2rVrY+HChfj444+RnJwMANiyZQumT59u9n5Nuiw2OjoaEyZMwL59+/R6EQuSyaSdxVqtVm9ZQXl5efDx8cG3334LGxsbNG/eHA8ePMBHH32EDz74AADw3Xff4fXXX0dAQABsbGzQrFkzDB06FGfPnpW+IFtb+Pn5FfpcCoUCc+bMwbhx4/DWW28Z87J14uLikJ6eLtmXu7s7cnNz8ejRI731fX19YWtrC1dXVyQlJUnKXF1doVQqoVarkZaWJimzs7ODp6cn8vLyEB8fr7ffSpUqwcbGBklJScjOzpaUOTs7w8nJCRkZGXrX0tvY2KBSpUoAgNjYWL39enp6ws7ODikpKcjMzJSUOTo6wsXFBVlZWbo3Xz65XA5vb28AQHx8vGQgJQBwd3eHQqGASqWSHD/g8X2wbm5uyMnJ0f1iUlD+DxUJCQm6nux8RR1De3t7eHh4QKPRICkpCc7OzpIMvL29IZfLkZiYqHcPblHH0NbWFl5eXgAMH0MvLy/Y2toiOTkZWVlZkjInJyc4OzubdQw9PDxgb29v8BgqlUq4uroaPIYymQw+Pj4ADB9DNzc3ODg4GDyG+e9vjUaDhIQEvdfq4+MDmUxm8Bi6uLjA0dER6enpUKlUkgzy399arRZxcXF6+81/fxs6hvnZZGZm6l32XvD9HRcXhycHws5/f6empuoNYpD//s7Oztb7rBr7/k5LS9O7IsKYcwQAPHr0CLm5uZKykj5H5GeQf0x5jvj3HGHo/W2Jc0RSUpLu7wLPEdJzREGWPEfY2trC399f73MO8ByRz9LfI/Ly8vT+JvMc8a/S+B7x5PeiinqOePIcQFKTJ0/GiBEjsGjRIslsGD179sTQoUPN3q9Jjcs///wTcXFxaN68uW6ZRqPB0aNHsXTpUly7dg3A4x7M/CFtgcdf9J7szSyocuXKsLOzg43Nvz8D1K1bFzExMcjOzoa9vT1q1qyJI0eOQK1WIzU1FZUrV8agQYMQGBhoyksAALzyyiv4+OOPMXfuXJNGit2wYQMUCoXu3/Xq1UNoaChUKhXWrVunt/57770HLy8vODs7Y8eOHZKy0NBQ1KtXD9euXcPBgwclZdWrV8eAAQOQk5NjcL/h4eFwcnLC4cOHcfPmTUlZx44d0aJFC9z9f3t3Ht5EtbAB/E3TNt3Sla4IBdnKVouUCwWBIgICH6uoXLkCInrZZBPZr/ChggUuIlcvCoiIinAvZRWEArIom0VWAUuRUtbSlu5r0mS+P/o1Mk1akrbpaZv39zx5HjpnMjk5b2bIyZmZk5ho9Jr+/v6GU4W//fZbowPE6NGj4evri1OnTuHixYuyso4dO6Jbt2548OABtmzZIitTq9UYN24cACA6OtroIPDyyy+jYcOGOHfuHE6fPi0rCw0NRZ8+fZCRkWH0XpVKJaZPnw4A2Lt3r9FBeMCAAQgJCcHVq1dx+PBhWVnTpk0xZMgQFBQUGNrh0fYoOX360KFDuHnzpuy5PXv2xNNPP42EhATs2bNHVhYUFIQRI0YAgMlsxo4dCy8vLxw/fhxXrlyRlXXu3BldunTBvXv3sHXrVlmZl5cXxo4dCwDYsmWL0RebV155BfXr18eZM2dw5swZWVlYWBh69eqFtLQ0ozqpVCpMnjwZQPHp56W/vAwZMgRNmzbFpUuX8NNPP8nKmjdvjkGDBiEvL8/ke502bRrs7e0RExOD27dvy8r69OmD0NBQXL9+Hfv37zcs3717Nxo0aIDhw4dDp9OZ3O64ceOgVqtx9OhRXLt2TVbWtWtXdOrUCXfu3MH27dtlZT4+PhgzZgyA4jMsSv+nPHLkSPj7++P06dM4f/68rCw8PBw9evRASkoKNm3aJCtzdnbGpEmTAAA7d+40+mI5bNgwNG7cGBcuXDA6/d+cYwQA7Nu3D/fu3ZOVWesYkZycjIYNG/IY8cgxwlQbWvsYsWfPHh4jTBwjAFj9GDFixAisWrWKxwhB3yO0Wi1ycnJk2+Yx4k/V+T2iJIO6eox49NI5MhYbG4vPP//caHn9+vXLPeP0cSya5zI7OxuJiYmyZa+99hpCQkIwa9YstG7dGkFBQZg2bRpmzpwJoPhOsH5+foiKiirzhj5z587Fpk2bcOPGDdjZFZ+p+/HHHyMqKsroYFoiPT0djRs3xtKlS/Hmm28+tu6RkZEICwvDypUrAQB79uzB0KFDMX78eOzYscPowPCoknlwjh8/LjvV1hZ/ceSohPhfHDkqwZFLHiP+xGNEMR4jivEYUYzHiD/xGFHMFo8Rd+7cQXh4+GPnuUx5qmLzXPpeqN3zXPr7+2Pfvn1o164d1Go1Lly4gCeffBIxMTF4/fXXjTr85rKoc2lK6U5bVFQUlixZgi+//BLNmjXD4sWLceTIEcTFxRmGXEeOHIn69esbrtu8ffs2WrVqhdGjR+Ott95CfHw8xowZg8mTJ2PevHkAgP3790OSJLRo0QLXr1/HO++8A5VKhZ9//tlwh1lL6gkA3bp1Q2xsLPz9/c3qXMbHx8uGjc3x4MEDbNy40fCLKFU/ZiAeMxCPGYjHDMRjBuIxA/FsJYPs7Gw0a9aMncsyvPnmm0hJScF//vMfeHt74+LFi1AqlRg8eDC6desm6zNZokJTkZRn5syZyM/Px4QJE5Ceno6OHTsiJiZG1im7deuWYYQSKB7ejomJwbRp0xAaGor69etjypQpmDVrlmGdzMxMzJkzB3fu3IG3tzdeeOEFfPDBB2Z1LMsSFRWFzp07V/j5RERERERUe9nqVCTLly9Hv3794Ofnh/z8fHTv3h1JSUmIiIgw3FS1IirduTxy5Ijsb4VCgYULF2LhwoVmPwcAIiIicOrUqTKf89JLL+Gll16qYC3Lfs1KDtwSEdVJimwF/Jr5PXa95PhkSGoeR4mIiGoTd3d3/Pzzz/jxxx9x9uxZ6PV6PP3000ZTTVqqykcuiYioltMBvm19zVrVt60vkv9IrhO3ZSciIhtkB8v/D6tDv6k+++yzePbZZ6tsexbPc0lERHWcEtA8rYGkKP9/T0khQdNew44lERFRLaLX67F+/Xr8z//8D9q0aYO2bdti4MCB2LhxY6XP6qz0DX1sQWVu6FNUVITs7Gyo1WrY23OgWARmIB4zEM/SDBxOOcB7sPdj10vbmQZtR+1j1yPuBzUBMxCPGYhnKxmYe0Of1HDA3cJmyCoC6p2pnTf0kSQJAwYMwN69e/HUU08hJCQEkiTh6tWruHTpEgYOHIgdO3ZUePt19xNVQ9jb28PLy0t0NWwaMxCPGYhnaQbaTloUdi6E42lHKHTGty6QlBI0nTTsWFqA+4F4zEA8ZiAeM5Cr0A19avHQ3IYNG3Ds2DEcOnQIPXr0kJX9+OOPGDx4sOFuwhXB02KtLCMjA3v27DGaj4iqDzMQjxmIV5EMcmfmmuxYAoBCp0DuzFyTZWQa9wPxmIF4zEA8ZmDbvvvuO8ydO9eoYwkUX385e/ZsfPvttxXePjuXVlZYWIgrV64YTYRL1YcZiMcMxKtIBiWjl5JS/hOtpJRQ2KWQo5YW4n4gHjMQjxmIxwxKUVbwUUtdvHgRzz//fJnlffv2xYULFyq8fXYuiYioTKZGLzlqSUREVDulpaXB39+/zHJ/f3+kp6dXePvsXBIRUZlKj15y1JKIiKj20ul05d7ISalUoqioqMLb5w19iIioXLkzc6EarALAUUsiIqpbbO2GPpIkYfTo0VCpVCbLK3u6NDuXVubq6orOnTvD1dVVdFVsFjMQjxmIV5kMSkYvVSdUHLWsBO4H4jED8ZiBeMzAto0aNeqx61T0TrEA57k0S2XmuSQiqgscYh3gOcITGZsyoA1n55KIiGo2c+e5TIus2DyX3kdq5zyX1sZrLq2ssLAQCQkJvCOXQMxAPGYgXmUz0HbQIuVyCjuWlcD9QDxmIB4zEI8ZkDWxc2llGRkZ2Lp1K+cSEogZiMcMxKuSDByqrDo2ifuBeMxAPGYgHjMoxa6CDzKJTUNERERERESVxs4lERERERERVRrvFktERERkAUW2An7N/B67XnJ8MiQ175tIVJMp7CowFYneOnWpCzhyaWV2dnbw8vKCnR2bWhRmIB4zEI8ZiMcMxKuSDHSAb1tfs1b1besL6Cr+UnUR9wPxmAFZE6ciMQOnIiEiIqISnkM94XjSEQpJUeY6kkKCprMGGdEZ1VcxIjIwdyqS9D6Au4U3rMvSAl77ORWJKfzJgoiIiMgCuTNzy+1YAoBCUiB3Zm411YiIqGZg59LKUlJS8MknnyAlJUV0VWwWMxCPGYjHDMRjBuJVVQbaTloUdi6EpDR98peklFDYpRDajpwXtjTuB+IxA7Imdi6tTK/XIz8/H3o9r/wVhRmIxwzEYwbiMQPxqjKD3Jm5UOhMj14qdBy1LAv3A/GYQSmc57JKsWmIiIiILFTW6CVHLYnIlrFzSURERFQBpkYvOWpJVMsoK/ggk9i5JCIiIqqA0qOXHLUkIlvHqUjMUJmpSDQaDVJSUuDr6wtHR0cr1ZDKwwzEYwbiMQPxmIF41sjA4ZQDvAd7G/5O25nGzmU5uB+IZysZmDsVScagik1F4rmTU5GYYi+6AnWdo6Mj6tevL7oaNo0ZiMcMxGMG4jED8ayRQcnopeqEiqOWZuB+IB4zIGviabFWlp2djcOHDyM7O1t0VWwWMxCPGYjHDMRjBuJZK4PcObnQu+uRO4fXWj4O9wPxmAFZEzuXVpaXl4czZ84gLy9PdFVsFjMQjxmIxwzEYwbiWSsDbQctUi6nQBvOUcvH4X4gHjMohVORVCk2DREREVFlWXjNFhFRXcRrLomIiIiIyDZVZGoRvTUqUjdw5JKIiIiIiIgqjSOXVubs7IywsDA4OzuLrorNYgbiMQPxmIF4zEA8ZiAeMxCPGZRSkWsoOTxXJs5zaYbKzHNJRERERETVy+x5Ll+q4DyX/+E8l6aw321lWq0WDx48gFbLO8iJwgzEYwbiMQPxmIF4zEA8ZiAeMyBrYufSytLS0rBx40akpaWJrorNYgbiMQPxmIF4zEA8ZiAeMxCPGZSigOXTkCiE1LRWYOeSiIiIiIiIKo039CEiIiIiIttUkalILF3fhnDkkoiIiIiIiCqNnUsrUygUUKlUUCh4crYozEA8ZiAeMxCPGYjHDMRjBuIxA7ImTkViBk5FQkRERERUe5g9FcnfAHdHy7adpQE8v+FUJKZw5JKIiIiIiIgqjZ1LK0tNTcX69euRmpoquio2ixmIxwzEYwbiMQPxmIF4zEA8ZlCKpdOQlDzIJDaNlel0Ojx8+BA6nU50VWwWMxCPGYjHDMRjBuIxA/GYgXjMoPo1atQICoXC6DFx4kST6x85csTk+r///ns119xynIqEiIiIiIhskkJZ/LD0OZaIjY2VdeZ/++039OrVCy+++GK5z4uLi5Nd0+nr62vZCwvAziUREREREZGVlO4Ufvjhh2jSpAm6d+9e7vP8/Pzg6elpxZpVPZ4WS0REREREZKGsrCzZo7Cw8LHP0Wg0+OabbzBmzJjHTgfTrl07BAYGomfPnjh8+HBVVduq2Lm0Mg8PDwwZMgQeHh6iq2KzmIF4zEA8ZiAeMxCPGYjHDMRjBqVU4oY+DRo0gIeHh+GxZMmSx77cjh07kJGRgdGjR5e5TmBgINasWYPo6Ghs27YNLVq0QM+ePXHs2LGKv89qwnkuzcB5LskWKbIV8Gvm99j1kuOTIal5GCEiIqKaw9x5LjNfr9g8lx5fALdv35ZtW6VSQaVSlfvcPn36wNHREbt377boNQcMGACFQoFdu3ZZVtlqxpFLK8vNzcWpU6eQm5sruio2ixlUgA7wbWveReO+bX2Bx9xwjhmIxwzEYwbiMQPxmIF4zKCUSoxcuru7yx6P61gmJibi4MGDGDt2rMXV7NSpE+Lj4y1+XnVj59LKcnJy8NNPPyEnJ0d0VWwWM6gAJaB5WgNJUf6IpKSQoGmvAR5z1zRmIB4zEI8ZiMcMxGMG4jEDcb788kv4+fmhf//+Fj/33LlzCAwMtEKtqhbvFktEJuXOzIVqcPm/wCkkBXJn8pdPIiIiqqUeGYm06DkW0uv1+PLLLzFq1CjY28u7YHPmzMHdu3exceNGAMDKlSvRqFEjtG7d2nADoOjoaERHR1v+wtWMnUsiMknbSYvCzoVwPO0Ihc74bmaSUoKmkwbajloBtSMiIiKqPQ4ePIhbt25hzJgxRmX379/HrVu3DH9rNBrMmDEDd+/ehbOzM1q3bo09e/agX79+1VnlCmHnkojKVN7opULHUUsiIiIic/Tu3Rtl3Ud1w4YNsr9nzpyJmTNnVkOtqh6vubQylUqF5s2bP/YCX7IeZlBxJaOXklJ+MJSUEgq7FJo9askMxGMG4jED8ZiBeMxAPGZQigKW38yn/OkpbRqnIjEDpyIhW+ZwygHeg72NlqftTOMpsURERFQjmT0VyTjA3cJ+dlYh4PEZyty2LePIpZXpdDpkZ2dDp3vMXA1kNcygckqPXlo6agkwg5qAGYjHDMRjBuIxA/GYQSnKCj7IJHYurSw1NRWfffYZUlNTRVfFZjGDysudmWu4qU9FrrVkBuIxA/GYgXjMQDxmIB4zIGti55KIHqtk9BKAxaOWRERERGQb2LkkIrPkzsmF3l2P3Dm8QywRERHVEZbezKci82LaEE5FQkRm0XbQIuVyCuAguiZEREREVBOxc0lE5mPHkoiIiOqSioxEcuSyTJyKxAyVmYpEkiTodDoolUooFJwURwRmIB4zEI8ZiMcMxGMG4jED8WwlA7OnIplSwalIPuZUJKZw5NLKFAoF7O3ZzCIxA/GYgXjMQDxmIB4zEI8ZiMcMSuHIZZVi01hZWloaNm/ejLS0NNFVsVnMQDxmIB4zEI8ZiMcMxGMG4jEDsiZ2Lq1Mq9Xi9u3b0Go5dYMozEA8ZiAeMxCPGYjHDMRjBuIxA7ImjokTEREREZFt4mmxVapSTbNkyRIoFApMnTrVsEySJCxcuBBBQUFwdnZGZGQkLl++/NhtZWRkYOLEiQgMDISTkxNatmyJvXv3yta5e/cu/va3v8HHxwcuLi4ICwvDr7/+aihPSkpC3759ERQUhAkTJkCv1xvKIiMjoVAosHnzZtk2V65ciUaNGlWsAYiIiIiIiAhAJTqXsbGxWLNmDUJDQ2XLly5dihUrVuCTTz5BbGwsAgIC0KtXL2RnZ5e5LY1Gg169euHmzZvYunUr4uLisHbtWtSvX9+wTnp6Orp06QIHBwf88MMPuHLlCv75z3/C09PTsM78+fPRoUMH/PDDD7h58ya+++472es4OTlh/vz5PA2AiIiIiIj+HLm09EEmVahpcnJyMGLECKxduxZeXl6G5ZIkYeXKlZg3bx6GDh2KNm3a4KuvvkJeXh42bdpU5vbWr1+PtLQ07NixA126dEFwcDCeeeYZPPXUU4Z1oqKi0KBBA3z55Zf4y1/+gkaNGqFnz55o0qSJYZ2MjAy0bt0abdu2RePGjZGZmSl7nb/+9a/IzMzE2rVrK/K2K0StVqNPnz4WT2FCVYcZiMcMxGMG4jED8ZiBeMxAPGZA1lShzuXEiRPRv39/PPfcc7LlCQkJSEpKQu/evQ3LVCoVunfvjhMnTpS5vV27diEiIgITJ06Ev78/2rRpg8WLF0On08nWCQ8Px4svvgg/Pz+0a9fOqJM4e/ZsTJ48GSqVCufOncPIkSNl5e7u7pg7dy4WLVqE3Nzcirx1i7m4uCA0NBQuLi7V8npkjBmIxwzEYwbiMQPxmIF4zEA8ZlAKRy6rlMU39Nm8eTPOnj2L2NhYo7KkpCQAgL+/v2y5v78/EhMTy9zmjRs38OOPP2LEiBHYu3cv4uPjMXHiRBQVFeHdd981rLN69WpMnz4dc+fOxS+//GLoSJZ0IsPDw3H37l2kpqYiICDA5GtNmDABH3/8MVasWIF//OMfFr335ORk5OXlGf5WqVTw9PREUVERHj58aLS+v78/8vLy8Ouvv6JBgwZwdnY2lLm7u8PZ2Rm5ubnIycmRPc/BwQHe3t7Q6/VISUkx2m69evWgVCqRnp4OjUYjK3Nzc4Orqyvy8/ORlZUlK1MqlahXrx4A4MGDB0bb9fb2hoODAzIzM1FQUCArc3FxgVqtRmFhITIyMmRldnZ28PX1BQCkpKTIrnUFAE9PT6hUKmRnZ8vaDyg+VdnDwwNardbkLbFLPkupqamyHxuA8tvQ0dERXl5e0Ol0uH37NhISEtC4cWNDBr6+vrCzs0NaWprRadLltaG9vT18fHwAmG5DHx8f2NvbIyMjA4WFhbIyV1dXuLm5VagNvby84OjoaLINnZ2d4e7ubrINFQoF/Pz8ymxDDw8PODk5mWzDks+3TqdDamqq0Xv18/ODQqEw2YZqtRouLi7Iy8tDdnY28vPzDRm4u7vD29sbkiQhOTnZaLsln29TbViSTUFBgdGZCY9+vpOTkyFJkqy85POdlZWF/Px8WVnJ51uj0SA9PV1WZu7nOycnx+hHK3OOEQDw8OFDFBUVycqq+hhRkkGbNm3g6+vLY8QjxwhTn29rHCPy8/ORnp6OFi1aQKPR8BjxyDHiUSWfb2scI1xcXHD9+nXD+3qUrR8jSlj7e0R6ejrOnz8v+z+Zx4g/Vcf3iIcPH8q+F9XVY0TpYwBVD4s6l7dv38aUKVMQExNjdFB+lEKhkP0tSZLRskfp9Xr4+flhzZo1UCqVaN++Pe7du4dly5YZOpd6vR7h4eFYvHgxAKBdu3a4fPkyVq9eLRuhtLe3L7NjCRR/0BctWoRJkyZh/PjxZr3vEt999x1UKpXh71atWqF///7Izs7Gxo0bjdZ/5513kJ2djTVr1qBJkyZwdXU1lPXv3x+tWrVCXFwcDh06JHteo0aN8OKLL0Kr1Zrc7oQJE+Dq6oojR47g+vXrsrIePXogPDwciYmJ2L17t6zM39/f0Fbffvut0QFi9OjR8PX1xalTp3Dx4kVZWceOHdGtWzc8ePAAW7ZskZWp1WqMGzcOABAdHW10EHj55ZfRsGFDnDt3DqdPn5aVhYaGok+fPsjIyDB6r0qlEtOnTwcA7N271+ggPGDAAISEhODq1as4fPiwrKxp06YYMmQICgoKsGHDBly4cAFPPfWUIYOSHyYOHTqEmzdvyp7bs2dPPP3000hISMCePXtkZUFBQRgxYgQAmMxm7Nix8PLywvHjx3HlyhVZWefOndGlSxfcu3cPW7dulZV5eXlh7NixAIAtW7YYfbF55ZVXUL9+fZw5cwZnzpyRlYWFhaFXr15IS0szqpNKpcLkyZMBFI/+l/7yMmTIEDRt2hSXLl3CTz/9JCtr3rw5Bg0ahLy8PJPvddq0abC3t0dMTAxu374tK+vTpw9CQ0Nx/fp17N+/H7m5uYYMQkJCMHz4cOh0OpPbHTduHNRqNY4ePYpr167Jyrp27YpOnTrhzp072L59u6zMx8cHY8aMAVD8I1jp/5RHjhwJf39/nD59GufPn5eVhYeHo0ePHkhJSTE6hd/Z2RmTJk0CAOzcudPoi+WwYcPQuHFjXLhwwegMDXOOEQCwb98+3Lt3T1ZW1ceIkgzGjx+P3r178xjxyDHCVBta4xiRm5sLOzs7BAUF4cyZMzxGPHKMeFSDBg2sdozo378/9u/fD61WCwcHB1m5rR8jSlj7e0RCQgJWrVol+z+Zx4g/Vcf3iKNHj8q+F9XVY8TPP/9sVEbWp5BK/7xfjh07dmDIkCFQKpWGZTqdDgqFAnZ2doiLi0PTpk1x9uxZtGvXzrDOoEGD4Onpia+++srkdrt37w4HBwccPHjQsOyHH35Av379UFhYCEdHRwQHB6NXr15Yt26dYZ3Vq1fj/fffx927dx9b98jISISFhWHlypXQ6/UICwvDs88+i0aNGmHlypVGB4ZHZWVlwcPDA8ePH4ebm5thuTm/OD548ACfffYZXnjhBcMvSkDt/cWxNo5KXL16Ff/973/x4osvGupZm39xrI2jEikpKYYMgoKCOHL5/6pzVKIkg9GjR6Nx48Y8RggYlUhJScGePXswevRoqFQqHiMEjFyWfBnt16+f4bNewtaPESWs/T3i9u3bWLdunez/ZB4j/lQd3yMSExNl34vq6jHizp07CA8PR2ZmJtzd3Y3WK/l+nzkbcC97zMykrALA40OUuW1bZtHIZc+ePXHp0iXZstdeew0hISGYNWsWnnzySQQEBODAgQOGzqVGo8HRo0cRFRVV5na7dOmCTZs2Qa/Xw86u+CTma9euITAwEI6OjoZ14uLiZM+7du0agoODLXkLAIp3wCVLlmDo0KEWjV76+fmZvPjZ3t7e6FTgR7m4uMDX19fkOq6urrIRzdL1LG+7j95MqbSS0xzKUt52PTw84OHhYbJMpVKV+9xHO9ClqdXqMi8ed3BwKHe7pb8EPKq8NlQqlfD19YWbm5vJDLy9vcvcbmXa8NG7GJdWG9uwvO2W14YuLi6GazpKMihZX6FQVLgNnZycyj17ouQ/QlPc3d3L/I/A0dGxwtm4ubnJfnx61OOOESVfNEypymOEm5ubIQ8eI4pV5vNdkTYs+T+Ox4hijx4jSrPGMaLky3y9evXK3LYtHyMeZa1jhKOjY5n/JwN16/NdU79HlPW9qCa2YWWOEWV9Bsm6LLocVa1Wo02bNrKHq6srfHx80KZNG8Ocl4sXL8b27dvx22+/YfTo0XBxccErr7xi2M7IkSMxZ84cw9/jx4/Hw4cPMWXKFFy7dg179uzB4sWLMXHiRMM606ZNw6lTp7B48WJcv34dmzZtwpo1a2TrWKJ///7o2LEjPv/88wo9n4iIiIiIajne0KdKWXxDn8eZOXMm8vPzMWHCBKSnp6Njx46IiYmR/dJ069Ytw6+3QPG50zExMZg2bRpCQ0NRv359TJkyBbNmzTKs06FDB2zfvh1z5szBokWL0LhxY6xcudJw3npFREVFoXPnzhV+vjkcHBzQoEEDo2s7qPowA/GYgXjMQDxmIB4zEI8ZiMcMyJosuubSVpWckx0fH885gYiIiIiIarjs7Gw0a9bs8ddczq3gNZeLec2lKRzUtTJJklBUVGR0cxGqPsxAPGYgHjMQjxmIxwzEYwbiMYNSeFpslWLTWFlycjI++ugjk3ezourBDMRjBuIxA/GYgXjMQDxmIB4zIGuq8msuiYiIiIiIaoWKjERyeK5MbBoiIiIiIiKqNI5cEhERERGRbeLIZZVi0xAREREREVGlcSoSM1RmKhKdToe8vDy4uLhAqVRaqYZUHmYgHjMQjxmIxwzEYwbiMQPxbCUDs6ciWVjBqUgWcioSU3harJUplUrOjSkYMxCPGYjHDMRjBuIxA/GYgXjMoBSeFlul2DRWlpGRgZ07dyIjI0N0VWwWMxCPGYjHDMRjBuIxA/GYgXjMgKyJnUsrKywsxLVr11BYWCi6KjaLGYjHDMRjBuIxA/GYgXjMQDxmUIpdBR9kEpuGiIiIiIiIKo3XXBIRERERkW3iNZdVik1DRERERERElcbOpZW5ubmha9eucHNzE10Vm8UMxGMG4jED8ZiBeMxAPGYgHjMga+I8l2aozDyXRERERERUvcye53JJBee5nMN5Lk3hyKWVFRQU4Pr16ygoKBBdFZvFDMRjBuIxA/GYgXjMQDxmIB4zIGti59LKMjMzsX37dmRmZoquis1iBuIxA/GYgXjMQDxmIB4zEI8ZlMKpSKoUm4aIiIiIiIgqjZ1LIiIiIiIiqjTOc0lERERERLZJAcuH2xTWqEjdwJFLK1MqlfDx8YFSqRRdFZvFDMRjBuIxA/GYgXjMQDxmIB4zIGviVCRm4FQkRERERES1h9lTkSwH3J0t23ZWPuAxg1ORmMKRSyIiIiIiIqo0di6tLDk5GatWrUJycrLoqtgsZiAeMxCPGYjHDMRjBuIxA/GYQSmciqRKsWmsTJIkFBYWgmcfi8MMxGMG4jED8ZiBeMxAPGYgHjMga2LnkoiIiIiIiCqNU5EQEREREZFtqshprhyeKxObhoiIiIiIiCqNU5GYoTJTkWi1WqSlpcHb2xsODg5WqiGVhxmIxwzEYwbiMQPxmIF4zEA8W8nA7KlIPq7gVCRTOBWJKTwt1socHBzg7+8vuho2jRmIxwzEYwbiMQPxmIF4zEA8ZkDWxNNirSwrKwsHDhxAVlaW6KrYLGYgHjMQjxmIxwzEYwbiMQPxmAFZEzuXVpafn4/z588jPz9fdFVsFjMQjxmIxwzEYwbiMQPxmIF4zKAUOwB2Cgsfoitdc7FpiIiIiIiIqNJ4zSUREREREdkmTkVSpdg0REREREREVGkcubQyFxcXhIeHw8XFRXRVbBYzEI8ZiMcMxGMG4jED8ZiBeMygFI5cVinOc2mGysxzSURERERE1cvseS5XA+7OCou2nZUvwWM857k0hf1uK9NoNLh79y40Go3oqtgsZiAeMxCPGYjHDMRjBuIxA/GYAVkTO5dWlp6ejk2bNiE9PV10VWwWMxCPGYjHDMRjBuIxA/GYgXjMoBRFBR9kEjuXREREREREVGm8oQ8REREREdkm3tCnSrFpiIiIiIiIrGThwoVQKBSyR0BAQLnPOXr0KNq3bw8nJyc8+eST+Oyzz6qptpXDkUsrs7Ozg7OzM+zs2I8XhRmIxwzEYwbiMQPxmIF4zEA8ZlCKApYPt1XgmsvWrVvj4MGDhr+VSmWZ6yYkJKBfv35444038M033+D48eOYMGECfH198cILL1j+4tWIU5GYgVOREBERERHVHmZPRbIWcHexcCqSPAkeb5g/FcnChQuxY8cOnD9/3qztz5o1C7t27cLVq1cNy8aNG4cLFy7g5MmTFtW1uvEnCyIiIiIiIgtlZWXJHoWFhWWuGx8fj6CgIDRu3BjDhw/HjRs3ylz35MmT6N27t2xZnz59cObMGWi12iqrvzWwc2llKSkpWLduHVJSUkRXxWYxA/GYgXjMQDxmIB4zEI8ZiMcMSrGr4ANAgwYN4OHhYXgsWbLE5Et07NgRGzduxP79+7F27VokJSWhc+fOePjwocn1k5KS4O/vL1vm7++PoqIipKamVvYdWxWvubQyvV6P9PR06PV60VWxWcxAPGYgHjMQjxmIxwzEYwbiMYOqc/v2bdlpsSqVyuR6ffv2Nfy7bdu2iIiIQJMmTfDVV19h+vTpJp+jUMhP1S25krH08pqGnUsiIiIiIrJNClh+g57/X9/d3d2say5Lc3V1Rdu2bREfH2+yPCAgAElJSbJlycnJsLe3h4+Pj8WvV514WiwREREREVE1KSwsxNWrVxEYGGiyPCIiAgcOHJAti4mJQXh4OBwcHKqjihXGziUREREREZGVzJgxA0ePHkVCQgJOnz6NYcOGISsrC6NGjQIAzJkzByNHjjSsP27cOCQmJmL69Om4evUq1q9fjy+++AIzZswQ9RbMxtNirczT0xPDhg2Dp6en6KrYLGYgHjMQjxmIxwzEYwbiMQPxmEEpj9ygx6LnWODOnTv461//itTUVPj6+qJTp044deoUgoODAQD379/HrVu3DOs3btwYe/fuxbRp0/Dpp58iKCgIq1atqvFzXAKc59IsnOeSiIiIiKj2MHueyw0VnOdytPnzXNoSnhZrZTk5OTh+/DhycnJEV8VmMQPxmIF4zEA8ZiAeMxCPGYjHDEqpxFQkZIxNY2W5ubk4ceIEcnNzRVfFZjED8ZiBeMxAPGYgHjMQjxmIxwzImnjNJRERERER2SaFovhh0XMAgFcWmsKRSyIiIiIiIqo0di6JiIiIiIio0nharJWpVCq0atUKKpVKdFVsFjMQjxmIxwzEYwbiMQPxmIF4zKCUapiKxJZwKhIzcCoSIiIiIqLaw+ypSL5VVGwqkhESpyIxgf1uKysqKkJ6ejqKiopEV8VmMQPxmIF4zEA8ZiAeMxCPGYjHDErhVCRVik1jZQ8fPsS6devw8OFD0VWxWcxAPGYgHjMQjxmIxwzEYwbiMQOyJl5zSUREREREtknx/w9Ln0MmceSSiIiIiIiIKo2dSyIiIiIiIqo0nhZLRERERES2iVORVKlKNc2SJUugUCgwdepUwzJJkrBw4UIEBQXB2dkZkZGRuHz58mO3lZGRgYkTJyIwMBBOTk5o2bIl9u7dayhfvXo1QkND4e7uDnd3d0REROCHH36QbSMpKQl9+/ZFUFAQJkyYAL1ebyiLjIyEQqHA5s2bZc9ZuXIlGjVqVLEGMIO/vz/eeecd+Pv7W+01qHzMQLyqyuC3337Da6+9hoEDB+Kll14y2p+pbNwPxGMG4jED8ZiBeMyArKnCncvY2FisWbMGoaGhsuVLly7FihUr8MknnyA2NhYBAQHo1asXsrOzy9yWRqNBr169cPPmTWzduhVxcXFYu3Yt6tevb1jniSeewIcffogzZ87gzJkzePbZZzFo0CBZx3X+/Pno0KEDfvjhB9y8eRPfffed7HWcnJwwf/58aLXair5tIhKgqKgIw4YNQ1RUFKZMmYKtW7fi448/xtWrVxEZGYmrV6+KriIRERHVRpyKpEpVqGlycnIwYsQIrF27Fl5eXoblkiRh5cqVmDdvHoYOHYo2bdrgq6++Ql5eHjZt2lTm9tavX4+0tDTs2LEDXbp0QXBwMJ555hk89dRThnUGDBiAfv36oXnz5mjevDk++OADuLm54dSpU4Z1MjIy0Lp1a7Rt2xaNGzdGZmam7HX++te/IjMzE2vXrq3I266Qhw8f4ttvv+XtngViBuJVNoPhw4fjr3/9K2JiYtCnTx80aNAAYWFh+Oyzz7B161a8+eabSE9Pr+Ja1y3cD8RjBuIxA/GYgXjMgKypQp3LiRMnon///njuuedkyxMSEpCUlITevXsblqlUKnTv3h0nTpwoc3u7du1CREQEJk6cCH9/f7Rp0waLFy+GTqczub5Op8PmzZuRm5uLiIgIw/LZs2dj8uTJUKlUOHfuHEaOHCl7nru7O+bOnYtFixYhNze3Im/dYkVFRbh37x4nqhWIGYhXmQwuXrwIZ2dnTJgwwWR569atMWvWLLz//vuVrWadxv1APGYgHjMQjxmIxwzImizuXG7evBlnz57FkiVLjMqSkpIAwOgcbn9/f0OZKTdu3MDWrVuh0+mwd+9ezJ8/H//85z/xwQcfyNa7dOkS3NzcoFKpMG7cOGzfvh2tWrUylIeHh+Pu3bu4ffs2Tpw4ATc3N6PXmjBhApycnLBixQqL3jcRifHRRx/h7bffLnedESNG4Ny5c9VUIyIiIqo7FIDCwgcnuiyTRXeLvX37NqZMmYKYmBg4OTmVuZ5CIW9wSZKMlj1Kr9fDz88Pa9asgVKpRPv27XHv3j0sW7YM7777rmG9Fi1a4Pz588jIyEB0dDRGjRqFo0ePyjqY9vb2CAgIKPO1VCoVFi1ahEmTJmH8+PHmvG2D5ORk5OXlybbl6emJoqIik6cWlHSy8/LykJKSIitzd3eHs7MzcnNzkZOTIytzcHCAt7c39Hq90fMAoF69elAqlUhPT4dGo5GVubm5wdXVFfn5+cjKypKVKZVK1KtXDwDw4MEDo+16e3vDwcEBmZmZKCgokJW5uLhArVajsLAQGRkZsjI7Ozv4+voCAFJSUmQ3UgIAT09PqFQqZGdny9oPKL4O1sPDA1qtFmlpaUZ1KmnD1NRUo5Hs8trQ0dERXl5e0Ol0SElJQU5OjqwtfX19YWdnh7S0NKNrcMtrQ3t7e/j4+AAw3YY+Pj6wt7dHRkYGCgsLZWWurq5wc3OrUBt6eXnB0dHRZBs6OzvD3d3dZBsqFAr4+fkBMN2GHh4ecHJyMtmGJZ9vnU6H1NRUo/fq5+cHhUJhsg3VajVcXFyQl5eH7OxsWQYln29JkpCcnGy03ZLPd0kb3r9/H/Xq1cP9+/ehVqvh5uaGgoICo9Ng7e3/PJwlJydDkiRZecnnOysrC/n5+bKyks+3RqMx2q65n++cnByjMyLMPUY8fPjQ6Bfkqj5GlGRQ8vnhMeLPY4Spz7c1jhGPvnceI+THiEdZeox4VEk2BQUFRpfGKJVKw79N1dfWjxElrP09QqPRGP2fzGPEn6rje0Tp70V19RhR+hhA1cOizuWvv/6K5ORktG/f3rBMp9Ph2LFj+OSTTxAXFwegeAQzMDDQsE5ycnK5d6QKDAyEg4OD7MDfsmVLJCUlQaPRwNHREUDxjt60aVMAxaOUsbGx+Pjjj/H5559b8jbwt7/9DcuXL8f7779v0Z1iv/vuO6hUKsPfrVq1Qv/+/ZGdnY2NGzcarf/OO+8AAK5fv46tW7fC1dXVUNa/f3+0atUKcXFxOHTokOx5jRo1wosvvgitVmtyuxMmTICrqyuOHDmC69evy8p69OiB8PBwJCYmYvfu3bIyf39/w6nC3377rdEBYvTo0fD19cWpU6dw8eJFWVnHjh3RrVs3PHjwAFu2bJGVqdVqjBs3DgAQHR1tdBB4+eWX0bBhQ5w7dw6nT5+WlYWGhqJPnz7IyMgweq9KpRLTp08HAOzdu9foIDxgwACEhITg6tWrOHz4sKysadOmGDJkCAoKCrB161ZcvHgRCoXCkEHJ6dOHDh3CzZs3Zc/t2bMnnn76aSQkJGDPnj2ysqCgIIwYMQIATGYzduxYeHl54fjx47hy5YqsrHPnzujSpQvu3buHrVu3ysq8vLwwduxYAMCWLVuMvti88sorqF+/vuGGVo8KCwtDr169kJaWZlQnlUqFyZMnAyg+/bz0l5chQ4agadOmuHTpEn766SdZWfPmzTFo0CDk5eWZfK/Tpk2Dvb09YmJicPv2bVlZnz59EBoaiuvXr2P//v3Izc01ZBASEoLhw4dDp9OZ3O64ceOgVqtx9OhRXLt2DWlpaVi7di0CAgLQs2dPdO3aFYmJibIbdkmSJPuisnnzZqP/lEeOHAl/f3+cPn0a58+fl5WFh4ejR48eSElJMbo+3NnZGZMmTQIA7Ny50+iL5bBhw9C4cWNcuHDB6PR/c48R+/btw71792RlVX2MKMkgPj4ejRs35jHikWOEqTa0xjEiNzcXdnbFJwzxGCE/RjyqQYMGFh0jHtW1a1d06tQJd+7cwfbt22VlPj4+6N+/P4DifdnBwUFWbuvHiBLW/h6RkpJi9H8yjxF/qo7vEUePHpVlUFePET///LNRmUmciqRKKaTSP++XIzs7G4mJibJlr732GkJCQjBr1iy0bt0aQUFBmDZtGmbOnAmg+E6wfn5+iIqKwt///neT2507dy42bdqEGzduGP7j/fjjjxEVFWV0MH1Uz5490aBBA2zYsOGxdY+MjERYWBhWrlwJANizZw+GDh2K8ePHY8eOHUYHhkdlZWXBw8MDx48fl51qa84vjvn5+Th//jyCgoJko7219RfH2jgqcefOHdy6dQsNGzY0ZFCbf3GsjaMSBQUFhgzUarVFoxI7duxAfHw8li5dWubI5cmTJ/HPf/4T27ZtA8CRS1PHiJIMWrZsiXr16vEYIWBUoqCgAFlZWWjatCkKCwt5jBAwcunq6oqEhATDJTaPsvVjRAlrf4/IyMjApUuXZP8n8xjxp+r4HpGWlib7XlRXjxF37txBeHg4MjMz4e7ubrReyff7zG12cHe17DTXrFwJHkP1ZW7bllnUuTSldKctKioKS5YswZdffolmzZph8eLFOHLkCOLi4qBWqwEU/zpYv359w3Wbt2/fRqtWrTB69Gi89dZbiI+Px5gxYzB58mTMmzcPQHEHtG/fvmjQoAGys7OxefNmfPjhh9i3bx969eplcT0BoFu3boiNjYW/v79Zncv4+HjDeyCi6hMZGYno6GjZKfAlCgoK0LVrV7z33nto166dgNoRERFRTZOdnY1mzZo9vnO5o4Kdy8HsXJpS5YO6M2fOxNSpUzFhwgTDDXZiYmJknbJbt27h/v37hr8bNGiAmJgYxMbGIjQ0FJMnT8aUKVMwe/ZswzoPHjzAq6++ihYtWqBnz544ffq02R3LskRFRRn9slbVcnNzcfbs2Wq7Oy0ZYwbiVTaD1atXY/Dgwfjiiy8M+6wkSTh69Ci6du2K/v37s2P5GNwPxGMG4jED8ZiBeMyArMmiay5NOXLkiOxvhUKBhQsXYuHChWY/BwAiIiJkc1aW9sUXX1SwhuW/ZiUHbh8rJycHhw4dQv369WXXXFL1YQbiVTaDli1bYseOHfjggw+wYsUKuLi4oKCgAPXq1cP//u//yq4DJ9O4H4jHDMRjBuIxA/GYAVlTpTuXRETVwcfHh1MIERERUdWqyMwinImkTLzXEREREREREVUaRy6JiIiIiMg2cSqSKsWmsTIHBwc0atTIaD4tqj7MQDxmIB4zEI8ZiMcMxGMG4jEDsqZKT0ViCzgVCRERERFR7WH2VCR7lBWbiqS/jlORmMDTYq1Mr9dDq9XCwcEBdnYcKBaBGYjHDMQTmYEiWwG/Zn6PXS85PhmSuu7+3sn9QDxmIB4zEI8ZkDXxE2VlKSkpWLVqFVJSUkRXxWYxA/GYgXjCMtABvm19zVrVt60voLNyfQTifiAeMxCPGYjHDMia2LkkIiLrUQKapzWQFOWPSEoKCZr2GkBZTfUiIiIC/pyKxNIHmcTOJRERWVXuzFwopPL/J1ZICuTOzK2mGhEREZE1sHNJRERWpe2kRWHnQkhK06OXklJCYZdCaDtqq7lmRERk8+wq+CCT2DRERGR1uTNzodCZHr1U6DhqSUREVBdwKhIzVGYqEp1Oh4KCAjg5OUGp5MVEIjAD8ZiBeDUhA8+hnnA87SjrZEpKCZpOGmREZwipU3WqCRnYOmYgHjMQz1YyMHsqkn0VnIrkeU5FYgpHLq1MqVTC1dW1Tu+8NR0zEI8ZiFcTMjA1emlLo5Y1IQNbxwzEYwbiMYNSeEOfKsXOpZWlp6dj+/btSE9PF10Vm8UMxGMG4tWEDEpfe2lr11rWhAxsHTMQjxmIxwzImti5tDKNRoPr169Do9GIrorNYgbiMQPLFRQU4ObNm7h79y6q4uqFmpLBo6OXtjRqCdScDGwZMxCPGYjHDEqxU1TsQSbZi64AERH9KSUlBZ988glu3LiBFi1aIC8vDwkJCejXrx9GjBgBO7va/Ztgyeil6oTKpkYtiYiIbAE7l0RENcTdu3cxbdo0LFu2DH/5y18MyzUaDVavXo2ZM2di2bJlUChq9y+muXNy4TDCAblzbGfUkoiIaqiKTC1Su3/ntSo2DRFRDbFgwQKsX79e1rEEAEdHR0yZMgVt2rRBdHS0oNpVHW0HLVIup0AbzlFLIiKiuoSdSytzc3NDjx494ObmJroqNosZiMcMHu/GjRvw8/NDkyZNylznrbfewo4dOyq0/RqXgYPoClS/GpeBDWIG4jED8ZgBWRNPi7UyV1dXhIeHi66GTWMG4jGDxzt+/DgGDRpU7jouLi5Qq9XIy8uDi4uLRdtnBuIxA/GYgXjMQDxmYELtvtqkRuHIpZXl5+fj999/R35+vuiq2CxmIB4zeDydTgcHh8cP5zk6OkKv11u8fWYgHjMQjxmIxwzEYwZkTexcWllWVhZ2796NrKws0VWxWcxAPGbweG3btsWRI0fKXUen0yEpKQmurq4Wb58ZiMcMxGMG4jED8ZhBKXYVfJBJPC2WiOoURbYCfs38HrtecnwyJHXl54+sKk8//TSWL1+OrKwsuLu7m1wnOjoakZGRtf5usURERFQ3sd9NRHWHDvBt62vWqr5tfQGdletjAYVCgRkzZuDll19Genq6UflPP/2EtWvXYtSoUQJqR0RERPR4HLkkorpDCWie1sDxpCMUUtmje5JCgqa9BlBWY93M0L59e0yePBnDhw9H06ZN0bFjR+Tn5+P777+Ht7c3PvvsM4tv5ENERETlUCiKHxY9xzpVqQvYubQypVIJf39/KJU17FusDWEG4lVnBrkzc6EarCp3HYWkQO7MXKvXpSKefvppbNy4EVevXkVcXBxUKhWWLVsGLy+vSm2X+4F4zEA8ZiAeMxCPGZA1KSRJqjkXHdVQWVlZ8PDwQHx8PNRqtejqENFjeA71hONpRyh0xj8tSkoJmk4aZERnVH/FiIiIqFpkZ2ejWbNmyMzMNHkvg5Lv95nHHODuZtlQZFaOBI9u2jK3bct4zSUR1Tm5M3NNdiwBQKGruaOWRERERLUZO5dW9uDBA6xYsQIPHjwQXRWbxQzEq+4MtJ20KOxcCEkpPzFDUkoo7FIIbUdttdSjJuF+IB4zEI8ZiMcMxGMGpXAqkirFpqkGOl0NuiWljWIG4lV3BqZGL2191JL7gXjMQDxmIB4zEI8ZkLWwc0lEdVLp0UtbHrUkIiIiqg7sXBJRnfXo6KWtj1oSERGRCSVTkVj6IJPYuSSiOqtk9BIARy2JiIiIrIxTkZihMlORaLVaZGRkwNPTEw4ODlaqIZWHGYgnMgOHWAd4jvBExqYMaMNtt3PJ/UA8ZiAeMxCPGYhnKxmYPRXJSceKTUUSoeFUJCbYi65AXefg4ABfX1/R1bBpzEA8kRloO2iRcjkFqLv/f5qF+4F4zEA8ZiAeMxCPGZA18bRYK8vMzMT+/fuRmZkpuio2ixmIJzwDG+9YAjUgA2IGNQAzEI8ZiMcMSuE1l1WKnUsrKygowMWLF1FQUCC6KjaLGYjHDMRjBuIxA/GYgXjMQDxmQNbEziURERERERFVGq+5JCIiIiIi22QHy4fbODxXJjYNERERERERVRpHLq3MxcUFHTt2hIuLi+iq2CxmIB4zEI8ZiMcMxGMG4jED8ZhBKRW5QQ/v51MmznNphsrMc0lERERERNXL7HkuY50qNs9lhwKz57lcsmQJtm3bht9//x3Ozs7o3LkzoqKi0KJFizKfc+TIEfTo0cNo+dWrVxESEmJRfasTT4u1ssLCQty6dQuFhYWiq2KzmIF4zEA8ZiAeMxCPGYjHDMRjBtXv6NGjmDhxIk6dOoUDBw6gqKgIvXv3Rm5u7mOfGxcXh/v37xsezZo1q4YaVxw7l1aWkZGBLVu2ICMjQ3RVbBYzEI8ZiMcMxGMG4jED8ZiBeMygFLsKPiywb98+jB49Gq1bt8ZTTz2FL7/8Erdu3cKvv/762Of6+fkhICDA8FAqlZa9eDVj55KIiIiIiMhCWVlZsoe5o8GZmZkAAG9v78eu265dOwQGBqJnz544fPhwpepbHdi5JCIiIiIi26RQAHYWPv7/BkANGjSAh4eH4bFkyZLHvpwkSZg+fTqeeeYZtGnTpsz1AgMDsWbNGkRHR2Pbtm1o0aIFevbsiWPHjlXZW7cG3i2WiIiIiIjIQrdv35bd0EelUj32OZMmTcLFixfx888/l7teixYtZDf8iYiIwO3bt7F8+XJ069at4pW2Mo5cWpmdnR3UajXs7NjUojAD8ZiBeMxAPGYgHjMQjxmIxwxKUVTwAcDd3V32eFzn8q233sKuXbtw+PBhPPHEExZXtVOnToiPj7f4edWJU5GYgVOREBERERHVHmZPRXLOGe5qC6ciyZbg0S7f7KlIJEnCW2+9he3bt+PIkSMVvuPrsGHDkJaWhh9//LFCz68OPC2WiIiIiIjISiZOnIhNmzZh586dUKvVSEpKAgB4eHjA2dkZADBnzhzcvXsXGzduBACsXLkSjRo1QuvWraHRaPDNN98gOjoa0dHRwt6HOTgebmUpKSn47LPPkJKSIroqNosZiMcMxGMG4jED8ZiBeMxAPGZQiqU38yl5WGD16tXIzMxEZGQkAgMDDY8tW7YY1rl//z5u3bpl+Fuj0WDGjBkIDQ1F165d8fPPP2PPnj0YOnRolb11a+DIpZXp9XpkZ2dDr9eLrorNYgbiMQPxmIF4zEA8ZiAeMxCPGVQ/c65C3LBhg+zvmTNnYubMmVaqkfWwc0lERERERLbpkRv0WPQcMomnxRIREREREVGlceSSiIiIiIhsUwWuoeTwXNk4FYkZKjMVSWFhIR48eAB/f3+zJlalqscMxGMG4jED8ZiBeMxAPGYgnq1kYPZUJL+5Vmwqkja5Zk9FYkvYuTQD57kkIiIiIqo92LkUg4O6VpadnY1jx44hOztbdFVsFjMQjxmIxwzEYwbiMQPxmIF4zKAUhaJiDzKJnUsry8vLw+nTp5GXlye6KjaLGYjHDMRjBuIxA/GYgXjMQDxmQNbEG/oQEREREZFtsoPlw20cnisTm4aIiIiIiIgqjZ1LIiIiIiIiqjSeFmtlTk5OCA0NhZOTk+iq2CxmIB4zEI8ZiMcMxGMG4jED8ZhBKRW5QQ/v51MmTkViBk5FQkRERERUe5g9Fcnv6opNRRKSzalITOBpsVam1WqRkpICrVYruio2ixmIxwzEq4sZFBUVISsrCzqdTnRVzFIXM6htmIF4zEA8ZlCKnaJiDzLJ6p3LJUuWQKFQYOrUqYZlkiRh4cKFCAoKgrOzMyIjI3H58uXHbisjIwMTJ05EYGAgnJyc0LJlS+zdu9dQnpOTg+HDhyMwMBDDhw9Hbm6uoWz06NFQKBT48MMPZdvcsWMHFFacqyYtLQ0bNmxAWlqa1V6DyscMxGMG4tWlDC5cuIApU6Zg7NixePfddzFy5EjMnz8fiYmJoqtWrrqUQW3FDMRjBuIxA7Imq3YuY2NjsWbNGoSGhsqWL126FCtWrMAnn3yC2NhYBAQEoFevXuVO5qrRaNCrVy/cvHkTW7duRVxcHNauXYv69esb1lm5ciXc3NwQExMDFxcXrFy5UrYNJycnREVFIT09vUrfJxERVY/vv/8ea9asQVRUFH744Qd89913OHjwICZNmoS5c+fi/PnzoqtIRES1CUcuq5TVbuiTk5ODESNGYO3atXj//fcNyyVJwsqVKzFv3jwMHToUAPDVV1/B398fmzZtwt///neT21u/fj3S0tJw4sQJODg4AACCg4Nl62RkZKB58+Zo27YtQkJCkJqaKit/7rnncP36dSxZsgRLly6tyrdLRERWdvfuXURHR2PXrl2wt5f/9/XUU09h69atGDhwIL799ls4OjoKqiWRbZEkCUVFRRatr1arIUkST8sUpK5koFQqYWfHK/xqGqt1LidOnIj+/fvjueeek3UuExISkJSUhN69exuWqVQqdO/eHSdOnCizc7lr1y5ERERg4sSJ2LlzJ3x9ffHKK69g1qxZUCqVAIBJkyahZ8+emDdvHpo2bYqDBw/KtqFUKrF48WK88sormDx5Mp544gkrvHMiIrKGb7/9FrNnzzbqWJbw9PTEyy+/jB9++AGDBg2q5toR2Z6ioqIKnQ3Wq1cvAMWDAiRGXchAkiQ4OTlBrVZb9RI3soxVOpebN2/G2bNnERsba1SWlJQEAPD395ct9/f3L/d6mRs3buDHH3/EiBEjsHfvXsTHx2PixIkoKirCu+++CwBo1KgR4uPjkZycDH9/f5MftCFDhiAsLAwLFizAF198UZm3abaSzi+JwwzEYwbi1fYMfvvtNyxfvrzcdV588UVMnTq1xnYua3sGdQEzqBqSJCE7OxuOjo4ICAgw+8t9UVERMjMz4eHhUeYPRWRddSEDSZJQUFCAlJQUZGdnV+6OrZyKpEpV+Sfq9u3bmDJlCmJiYsqdP6f0QUiSpHIPTHq9Hn5+flizZg2USiXat2+Pe/fuYdmyZYbOJQDY2dkhICCg3DpGRUXh2Wefxdtvv23muyqWnJyMvLw8w98qlQqenp4oKirCw4cPjdb39/eHv78/Ro0ahaKiIjx48MBQ5u7uDmdnZ+Tm5iInJ0f2PAcHB3h7e0Ov1yMlJcVou/Xq1YNSqUR6ejo0Go2szM3NDa6ursjPz0dWVpasTKlUol69egAgq0sJb29vODg4IDMzEwUFBbIyFxcXqNVqFBYWGv3KZWdnB19fXwBASkoK9Hq9rNzT0xMqlQrZ2dmy9gOKr4P18PCAVqs1eWF5yY8QqampRneELK8NHR0d4eXlZXjOiBEjZO/b19cXdnZ2SEtLMzolpLw2tLe3h4+Pj2xbj/Lx8YG9vT0yMjJQWFgoK3N1dYWbm1uF2tDLywuOjo4m29DZ2Rnu7u4m21ChUMDPzw+A6Tb08PCAk5OTyTYs+XzrdDqjU8wBwM/PDwqFwmQbqtVquLi4IC8vz3AtdUkGaWlp8Pb2hiRJSE5ONtpuyefbVBuWZFNQUIDMzExZ2aOf7+TkZJSeZank852VlYX8/HxZWcnnW6PRGP0Kb+7nOycnR3YTMcC8YwQAPHz40Oi0MmscI0aMGAE3NzcAqJXHCI1GY/iBskRgYKBhu0VFRcjJyUFGRgYePHhg9jHC1OfbWseIyZMn8xgB08eIEiWfb2scI/z9/TF9+nQkJycb5cNjRDFLvkdIkoSgoCBDB8Xe3h4KhQI6nc6oHezs7KBUKqHX66FSqWRlCoXCsI2ioiKj43fJ6Y/lbbes03NLLqUqb7t6vd7os19Sp7K2W/JeK7pdACZPSTW3Dcvbrqk6PbpdpVJp2O8f3W5Vt6G1s3F2dkZRUZHh+3lJP6Lk8136GEDVo8o7l7/++iuSk5PRvn17wzKdTodjx47hk08+QVxcHIDiEcySLwUADKONZQkMDISDg4PsF8eWLVsiKSkJGo3GoutrunXrhj59+mDu3LkYPXq02c/77rvvZAfEVq1aoX///sjOzsbGjRuN1n/nnXcAAPv27cO9e/dkZf3790erVq0QFxeHQ4cOycoaNWqEF198EVqt1uR2J0yYAFdXVxw5cgTXr1+XlfXo0QPh4eFITEzE7t27ZWX+/v4YOXIkgOLTy0rvrKNHj4avry9OnTqFixcvyso6duyIbt264cGDB9iyZYusTK1WY9y4cQCA6Ohooy8KL7/8Mho2bIhz587h9OnTsrLQ0FD06dMHGRkZRu9VqVRi+vTpAIC9e/cafREYMGAAQkJCcPXqVRw+fFhW1rRpUwwZMgQFBQUm23Dy5MlQqVQ4dOgQbt68KSvr2bMnnn76aSQkJGDPnj2ysqCgIEMnydR2x44dCy8vLxw/fhxXrlyRlXXu3BldunTBvXv3sHXrVlmZl5cXxo4dCwDYsmWL0RebV155BfXr18eZM2dw5swZWVlYWBh69eqFtLQ0ozqpVCpMnjwZQPGp5aW/vAwZMgRNmzbFpUuX8NNPP8nKmjdvjkGDBiEvL8/ke502bRrs7e0RExOD27dvy8r69OmD0NBQXL9+Hfv375eVNWjQAMOHD4dOpzO53XHjxkGtVuPo0aO4du2arKxr167o1KkT7ty5g+3bt8vKfHx8MGbMGADFZ0+U/tI5cuRI+Pv74/Tp00Y3fQkPD0ePHj2QkpKCTZs2ycqcnZ0xadIkAMDOnTuNvlgOGzYMjRs3xoULF3DixAlZGY8RxarqGJGcnIxly5YZfqFWKpX4xz/+AQDYtm0b7t+/jxs3biArKwsbN27kMeL/8RhRjMeIP1XFMWLXrl149tlnkZuba2jLevXqwd7eHjk5OUafUVdXV6jVahQVFRn9yKFUKg0d9PT0dKNjj7e3NxwdHZGXl2fUQXd2doaHhwd0Op3R51ehUBi+W2ZmZhp15jw9PeHk5IT8/Hyj45JKpYKXlxckSTLZ8S/58SQ7O9vos+Tu7g4XFxcUFhYadXAcHBwMP0CZ2m55bejm5gY3NzdotVqjz5m9vb2h45+WlmbUMS2vDV1cXODu7m7yRw47OztDRzQjI8Ook+jl5QWVSmWyDZ2cnODp6Qm9Xl/mjycKhQJZWVlGP3J4eHjA2dnZZBs6OjoafoAqLCxEbm4uDh48aHj9kmPEzz//bPSaJtkpAEuv3bTTP34dG6WQSv9UUEnZ2dlGp7e+9tprCAkJwaxZs9C6dWsEBQVh2rRpmDlzJoDiO8H6+fkhKiqqzGsu586di02bNuHGjRuGi3c//vhjREVFGR1wTRk9ejQyMjKwY8cOAMClS5cQFhaGt99+G8uWLTP6xeRRJZOsHj9+3PCrP2DeL46pqan473//i8jISHh7exvKasIvjqWJHpWw1sjltWvXcOjQIfTs2dOQAUcui1XXqERaWpohA39/f45c/r/qHJUoyWDgwIFo2LBhrTxG7Nu3DxcuXMDcuXMN5aVHLl9//XVMnz4dfn5+NW7kMi0tDadOncKAAQNgb2/PY4SAkUug+MfKv/zlL/Dy8pKV2/oxooS53yNKziJo2LCh4Yd3c0bdSjpG7u7uhkw4cmm8XWuOXGq1WmRlZRkyqK0jl0DxDURv3bplWA78+fm+c+cOwsPDkZmZafK02ZLv95kJXnBXW9a5zMrWw6NxepnbtmVV3rk0JTIyEmFhYYapQaKiorBkyRJ8+eWXaNasGRYvXowjR44gLi4OarUaQPEviPXr18eSJUsAFJ9u26pVK4wePRpvvfUW4uPjMWbMGEyePBnz5s17bB1Kdy5LXuO///0vCgoKzOpcxsfHG+pnrgcPHmDjxo2GX0Sp+jED8ZiBeHUhA0mSMHnyZAwbNgwvvfSSUdl7772HvLw8TJs2TVANy1cXMqjtmEHV0Wq1yMjIQHBwcLmXQZl63sOHD+Hj42PoXFD1qksZFBQUIDExEZ6enkbvJTs7G82aNTOjc+kDd3cLO5dZeng0fsjOpQlC7t87c+ZMTJ06FRMmTEB4eDju3r2LmJgYWcft1q1buH//vuHvBg0aICYmBrGxsQgNDcXkyZMxZcoUzJ49u8L1eO+998rtVBIRUc2hUCiwYsUKHD16FP3798fXX3+NAwcO4N///jeee+45KJVKTJ06VXQ1iYgAADdv3oSjo2ONmH+3JtWF6rZquUXUkSNHZH8rFAosXLgQCxcuNPs5ABAREYFTp05VqA4bNmwwWhYcHGx0ahcREdVcDg4OePfdd5GZmYmYmBjcunULAQEBWL9+vUWjJ0RUM6Snp+PcuXOQJAmhoaGGU4yt5fXXX8fXX39ttLx37974/vvvK7XdjIwMREdHV6Z6RLVe7bz/MBER2TQPDw+8+OKLoqtBRBX08OFDLFy4EKmpqejevTsUCgXWrl0LV1dXvP/++7KbPla1Pn36YO3atbJlpe9gay6dTsc5Fms7O7sK3NDHOlWpC9g0Vubu7o4BAwbwfGyBmIF4zEA8ZiAeMxCPGYhXckOaUaNGYfz48di5cyemT5+OadOmITo6GrNmzcKoUaNkl0ZVtZK5OR99lNzgaeXKlWjXrh08PT3x5JNP4q233pLdMGnjxo3w9fXFnj17EBoaCjc3N4wdOxZff/01du/eDUdHRzg6OuLo0aOG5yQkJKBXr17w8PBA+/btjc7C27hxI5o0aQIPDw8MGzYMH330kWwE9/XXX8cLL7wge87bb7+N5557zvD3/v37ERkZCV9fXwQEBGDw4MH4448/TL5/pVIJd3d3TJo0Ca1atTLciPP7779Hx44doVar0aJFC7z33nuyG/EsWrQITZo0gZubG4KDg2vs9e0kFjuXVubs7IyQkBA4OzuLrorNYgbiMQPxmIF4zEA8ZiCenZ0dli1bhg8++ADh4eFG5a1bt8Ynn3ximGaoutnZ2eGjjz7CuXPn8MUXX+Dw4cOYM2eObJ28vDwsXboUn3/+Oc6fP4+PPvoIw4YNQ58+fXDr1i3cunULERERhvXfffddTJs2DbGxsWjWrBleffVVQ6ftl19+wRtvvIG///3viI2NRWRkpOFmlpbIzc3FlClTcOLECezbtw8KhQIvvvii0R1ngeK7s7722ms4e/Ysjhw5guDgYMTExGD06NGYOHEiLly4gE8//RRff/21oS7R0dFYtWoVPv30U1y5cgVbt25FmzZtLK5njaRQVuxBJvG0WCvLzc3F1atX0bJlS7i6uoqujk1iBuIxA/GYgXjMQDxmIF5WVhb++OMPWeertNatWyM7OxupqamGqU+q0t69e42mopkxYwbmzZtnmPcVABo3boyFCxfirbfewr/+9S/Dcq1Wi1WrVuGpp54yLCuZkzEgIMDo9aZPn45+/foBKO5ohoWF4fr16wgJCcG//vUv9O7d2zA9X/PmzXHy5EnExMRY9J6GDh0q+3vNmjWoX78+rly5IusE5ubmYuDAgcjNzUVMTIyhHT788EO88847hnlMn3zySSxYsABz587FP/7xD9y+fRv+/v7o2bMnHBwc0LBhQ3To0MGiOpJt4MilleXk5ODw4cNGc1BR9WEG4jED8ZiBeMxAPGYg3u+//4727ds/dr1nnnkGly5dskodIiMjERsbK3uMHz8eQPENJfv27YtGjRrB29sbY8aMwcOHD2VzlDo6OiI0NNTs12vbtq3h34/OzQsUt0fHjh1l63fq1Mni9/THH3/g1VdfRYsWLeDj44PmzZsDKJ7K71GvvvoqcnJysHHjRtnc7WfPnsUHH3wALy8vw2P8+PG4f/8+8vLy8MILL6CgoAAtWrTAuHHjsGPHDpNzVxJx5JKIiIiIqo0508Dp9Xqr3SjHxcUFTZs2NVqemJiIgQMH4s0338TChQvh5eWFEydO4M0334RWqzWs5+zsbFHd7O3//Lpd8ryS01XNaQs7Ozuj9R6tDwAMGTIEDRo0wOrVqxEYGAi9Xo927dpBo9HI1nv++eexadMmnD17Fk888YRhuV6vx7vvvovBgwcbvb6TkxMaNGiA3377DQcPHsSPP/6IyZMnY8WKFTh06FCtnysTdg4VuKGP8enGVIydSyIiIiKqFiEhIXj33Xcfu96xY8cwatSoaqjRn3799VcUFRVh6dKlsPv/zsbWrVvNeq6joyN0Op3Fr9myZUv88ssvsmWnT5+W/V2vXj1cvnxZtuzChQuGTt3Dhw/x+++/49///jeeeeYZAMDx48dNvt6bb76JkJAQvP7669i2bRueffZZAEC7du1w7do1k53uEs7OzhgwYAAGDBiAcePGoW3btvjtt9/Qrl07y9401WnsXBIRERFRtXB2dkbz5s1x8OBB2d1OH/XLL7/A398fnp6eVqmDRqNBUlKSbJm9vT2efPJJFBUV4dNPP0X//v1x4sQJoylLyhIcHIwDBw4gLi4OPj4+8PDwMOt5kyZNQrdu3bB8+XIMHDgQBw8eNLreskePHlixYgW+/vprdOrUCZs2bcLly5cRFhYGAPDy8oKPjw/WrVuHgIAA3L59G/PmzSvzNcePH4+srCwMGzYMu3fvRpcuXTBv3jwMHjwYTzzxBF544QXY2dnh0qVL+O2337Bo0SJs3LgROp0OHTp0gIuLC7799ls4OzujYcOGZr3PGk3hACgsHLlUcOSyLLzm0socHR3RtGlTODo6iq6KzWIG4jED8ZiBeMxAPGYgnkKhwDvvvIOoqCjExMQYne75888/Y86cOXj//fetVof9+/ejYcOGskdkZCTCwsKwbNkyLF++HO3atcPmzZvx3nvvmbXN119/Hc2bN0dERASCgoJw4sQJs57XsWNHfP755/j3v/+NDh064MCBA0Z3p+3duzfmzp2LuXPnonPnzsjJycHf/vY3Q7mdnR2++eYbnD17Fu3atcOMGTPw4YcflvmaCoUCEydOxPz58zFw4ECcPHkSvXv3xo4dO3Do0CF07twZXbt2xccff4zg4GAAxXMLf/HFF4iMjET79u1x+PBhbN++HT4+Pma9T7IdCsmck71tXFZWFjw8PBAfHw+1Wi26OkRERERCabVaZGRkIDg4GE5OThY/PycnB++//z4uXbqEDh06wM7ODmfOnEHTpk3xj3/8w+hurrZk48aNePvttw03/aGyFRQUIDExEZ6enkbXfmZnZ6NZs2bIzMw0Obdtyff7zPshcHe3bGqRrCwdPAJ/L3PbtoynxVqZTqdDQUEBnJycoFRyThwRmIF4zEA8ZiAeMxCPGYgnSRIkSYKrqys+/PBD5OfnIy4uDpIk4e233+YUMdWgJAOFQmG1myaR7eJpsVaWmpqKf//730hNTRVdFZvFDMRjBuIxA/GYgXjMQLyioiIkJycbprFwdnZGWFgY2rVrx45lNSmdAVFVYueSiIiIiKiGGDlyJE+JrU4Kp4o9yCR2LomIiIiIiKjSeM0lERERERHZJoUToLCwS6TgKcVl4cglERERERERVRqnIjFDZaYi0ev10Gq1cHBwgJ0d+/IiMAPxmIF4zEA8ZiAeM6g6FZ2KhHcqFa8uZVAlU5E86AR3d8tGLrOyiuDhf4pTkZjA02KtzM7ODiqVSnQ1bBozEI8ZiMcMxGMG4jED8epCh6a2Ywal2LkCdhZ2iex4WmxZ+LOdlaWlpeG///0v0tLSRFfFZjED8ZiBeMxAPGYgHjMQr6ioCOnp6ZwGQyBmQNbEzqWVabVa3Lx5E1qtVnRVbBYzEI8ZiMcMxGMG4jED8SRJQmFhIWrzVVmLFi1CeHi4VV/D0dERO3futMq2qzKDjRs3wtfXtwpqJZDCDVCoLXy4ia51jcXOJRERERFVG0W2Aop7CuAuyn9kVf1rJycnY8KECWjSpAnc3NzQoEED9O/fH6dOnTJ7G9OnT8f+/furvnKPuHXrFp5//nmrbNvV1bVC9W/WrBlWrVolW/biiy/i8uXLVVU1qgN4zSURERERVQ8dENQ+CHYFjx/fkJwlFKUVAcqqe/mXX34ZWq0WX3zxBRo3bozk5GT8+OOPFp0q7ebmBjc3645cBQQEWHX7VcXZ2RnOzs6iq1E5CjWgcLTwORrr1KUO4MglEREREVUPJaBpp4GkKP+UTEkhQeooVWnHMiMjA8ePH8fixYsRGRmJ4OBgdOjQAbNmzUK/fv0M62VmZmL8+PGoX78+fHx80Lt3b1y4cMFQXvq02KNHj6Jz587w9PSEr68vunfvjsTERNm6GzZsQJMmTeDl5YVJkyZBp9Nh+fLlaNCgAerXr48lS5bI6lr6tNg7d+5gxIgR8Pf3h6enJzp16oRffvnF5PvUaDSYMmUKGjZsCLVajWbNmiEqKgpA8egjALzxxhtwdXU1/P3HH39g6NCheOKJJ+Dl5YWIiAgcOnTIsM3nnnsOiYmJmDFjBhwdHeHoWNwZM3Va7Oeff46QkBC4urqidevW+Oabb4ze2/r16zFs2DB4eHigVatW2L17t6E8PT0dI0eORFBQENzd3dGqVSt89dVXJt8r1TzsXFqZm5sbevbsafVfuKhszEA8ZiAeMxCPGYjHDMRTKpUo+kcRFFL5dytVSAroF+ir9LVLRhx37dqFwsJCk+tIkoRBgwYhKSkJu3btwqlTp9CuXTs8//zzJkc3i4qKMGzYMHTr1g2//vorjh07htdff112N9YbN25g37592L17N77++mts2LABgwYNwt27d3Hw4EEsXrwYCxYswOnTp03WKScnB8899xzu37+Pbdu24cyZM3j77beh15tun08++QTff/89Nm3ahN9++w0bNmxAcHAwAODEiRMAgE8//RQ3b940/J2Tk4O+ffvihx9+wC+//IJevXphyJAhuHXrFgDgP//5D5544gksWLAAt27dMiwvbceOHZg+fTqmTp2Kc+fO4Y033sAbb7yBI0eOyNZ7//33MWzYMPz66694/vnnMWrUKEP7Lly4EFevXsXu3btx8eJF/Otf/4KPj4/J16Oah6fFWpmrqyuefvpp0dWwacxAPGYgHjMQjxmIxwzEs7Ozg+o5FfTd9VD8rIBCZ9zJlJQSpK4SpC5Ve9Mfe3t7rFu3DuPHj8eaNWvQrl07dO3aFS+99BJCQ0MBAEeOHMFvv/2Gu3fvGqatiYqKwq5du7Bt2zaMHTtWts2srCxkZmaiX79+aNKkCQCgZcuWsnX0ej3Wrl0LtVqNVq1aITIyEteuXcOuXbtgZ2eHFi1aYNmyZTh69Cg6duxoVO/NmzcjJSUFJ06cgLe3NwCgadOmZb7P27dvo2nTpujSpQsUCoWhYwnAMMro5+eHoKAgw/KnnnoKTz31lOHvRYsWYefOnfj+++8xYcIEeHt7Q6lUQq1Wl3vK7kcffYSRI0di3LhxAIDmzZvj9OnT+OijjxAZGWlY79VXX8Xw4cMBAO+99x4+/fRTxMbGok+fPrh16xbCwsLQvn17AECjRo3KfL0qofAAFBZOUaQw/eMEceTS6vLz83HlyhXk5+eLrorNYgbiMQPxmIF4zEA8ZiCeXq9Hfn5+8eiliY4lACh0VT9qWWLo0KFITEzEtm3b0KtXLxw7dgwdO3bExo0bAQBnz55FTk4OAgIC4OXlZXgkJCTgjz/+MNqet7c3Ro4cif79+2Pw4MH417/+hfv378vWCQ4OhlqtNvzt5+eHli1bws7uz6/h/v7+SElJMVnnCxcuICwszNCxfJyRI0fiwoULaN26NaZNm4YDBw4YraPRaGQjn7m5uZg9ezZCQ0Ph6+sLLy8vxMXFlTlCWZbff/8dERERsmWdO3fG77//LlvWtm1bw79dXV2hVquRnJwMAPj73/+O//znPwgPD8fs2bNx8uRJi+pAYrFzaWVZWVnYs2cPsrKscMszMgszEI8ZiMcMxGMG4jED8XQ6HTIzM1EUUQR9dz0kpXx0UlJK0Efqq3zU8lFOTk547rnnMH/+fBw7dgwjR47EokWLABR3fgMDAxEbGyt7/Pbbb3j77bdNbm/dunU4duwYIiIi8N///hetW7eWneLq4OAgW1+hUMDe3t5oWVmnuVp6w5x27drh2rVrWLhwIfLz8/HKK6/g5Zdflq2Tl5cHnU5n+Hv27NnYsWMHFi1ahB9//BGxsbFo06ZNhabtefSUYKD4VOPSy0y1ScnUKM8//zyuX7+OyZMn4/79++jTpw9mzZplcT3Mr7AXoPC28OFlvfrUcuxcEhEREVG10y/QG41eWnPUsiwtW7ZEbm4ugOKOWVJSEuzt7dG0aVPZo169emVuo127dpg1axaOHTuG1q1bY/PmzVVWvzZt2uDChQsW3dHW3d0dL730Ej777DN8++232L59u+H5Dg4Oso4lAPz888949dVXMXjwYLRt2xYBAQGGmxKVMPW80kJCQgzXcZY4efIkQkJCzK47UHz67siRI/HVV1/hn//8J9atW2fR80kcdi6JiIiIqNpJz0iy0Utrj1o+fPgQvXv3xrfffouLFy8iISEBW7duxT//+U8MGDAAANCzZ0906tQJw4YNQ0xMDG7evImTJ0/i3Xffxa+//mq0zYSEBMybNw+nTp1CYmIiDhw4gPj4eIs7U+UZPnw4/P39MWzYMJw4cQI3btzAtm3bypyb8+OPP8aWLVvw+++/49q1a4iOjkZAQAA8PT0BFJ+me/z4cSQlJSE9PR0A0KRJE+zYsQPnz5/HhQsX8OqrrxqNpDZq1Ag//fQT7t69i9TUVJOvPX36dGzcuBFr1qxBfHw8Vq5ciR07dmDatGlmv9+FCxdi165duH79Oi5fvow9e/ZUaXsa4chlleINfYiIiIhICP0CPeyfLf46qtApoFtQ/shYZbi5uaFDhw5YtWoVbty4Aa1WiyeeeAJjxozB7Nmzi+ugUGDXrl1499138eabbyIlJQUBAQF45pln4OfnZ7RNFxcXxMXF4ZtvvsHDhw8RGBiI8ePH44033qiyejs6OmLv3r2YOXMmBg4ciKKiIrRs2RKrVq0q830uX74c169fh1KpRHh4OHbu3Gm4xnPJkiV455130KJFC9SvXx/x8fFYvnw53nzzTXTv3h316tXDjBkzkJ2dLdvuggULMGHCBISEhKCwsBAajfFcj4MGDcKKFSuwYsUKTJs2DY0aNcLatWvRvXt3i97v/PnzkZiYCGdnZ3Tp0sVoOhOquRRSyQnOVKasrCx4eHggPj5edkG2OR4+fIh9+/bh+eef522UBWEG4jED8ZiBeMxAPGZQdbRaLTIyMhAcHAwnJyezn1dUVITMzEx4eHgYrjtU9lLC7qgd9JF66GKs17mkYqYyqK0KCgqQmJgIT09Po+s4s7Oz0axZM2RmZsLd3d3ouSXf7zMz/gl3d8uua83KyoeH59tlbtuWsXNphsp0LomIiIjqmop2Lk1RnFRAOVAJ3W4dpE78Wkrmq5rO5Xq4u7tY9LpZWXnw8BzDzqUJtfvnCiIiIiKq1aQICUX3igCHx69LRDUbb+hjZQ8ePMCyZcvw4MED0VWxWcxAPGYgHjMQjxmIxwzE02q1SEpKMp7igh3LalNmBjbLG4CPhQ/z5hy1RexcEhERERERUaWxc0lERERERLUObx1T8/CaSyIiIiKySMm0FlqtttI39CGqqIKCAkiSBKVSWfGNKLwAhZuFz3Gs+OvVcexcEhEREZFF7OzsYG9vj9TUVNjb20OhUJj1vKKiIhQVFaGwsBA6HacdEaEuZCBJEgoKCpCSkgInJyfDjx0kHqciMUNlpiIpKipCdnY21Gp1rZ9LqLZiBuIxA/GYgXjMQDxmULV0Oh3S0tIseo4kSZAkCQqFwuwOKVWtupKBJElwcnKCWq02+T7Mnook8wLc3S37fp+VlQ0Pj6c4FYkJPLJamb29Pby8vERXw6YxA/GYgXjMQDxmIB4zqFpKpRL16tWDTqfjtW9U7ZRKJUcsayB2Lq0sIyMDx48fR5cuXeDp6Sm6OjaJGYjHDMRjBuIxA/GYQdVTKBQWjQIzA/GYQWmeACwdfazENZ51HLv7VlZYWIgrV66gsLBQdFVsFjMQjxmIxwzEYwbiMQPxmIF4zECcf//732jcuDGcnJzQvn17/PTTT+Wuf/ToUbRv3x5OTk548skn8dlnn1VTTSuOnUsiIiIiIiIr2rJlC6ZOnYp58+bh3Llz6Nq1K/r27Ytbt26ZXD8hIQH9+vVD165dce7cOcydOxeTJ09GdHR0NdfcMjwtloiIiIiIbJQnLD8t1vLxuRUrVuD111/H2LFjAQArV67E/v37sXr1aixZssRo/c8++wwNGzbEypUrAQAtW7bEmTNnsHz5crzwwgsWv351YefSApMnT4aDg4NFz8nPz0diYiIuXrwIZ2dnK9WMysMMxGMG4jED8ZiBeMxAPGYgnq1koNVqzVovKyvL4m2XPKf0c1UqFVQqldH6Go0Gv/76K2bPni1b3rt3b5w4ccLka5w8eRK9e/eWLevTpw+++OILaLVai/sk1YWdSzOUfEh++OGHCm/j2rVrVVUdqiBmIB4zEI8ZiMcMxGMG4jED8Wwhg4CAADg6Oposc3R0REBAABo0aFChbbu5uRk9d8GCBVi4cKHRuqmpqdDpdPD395ct9/f3R1JSksntJyUlmVy/qKgIqampCAwMrFC9rY2dSzOoVCoUFBTwwmciIiIiolrC0dERTk5OJsucnJyQkJAAjUZToW2XzBX6KFOjlo8qvb6pbTxufVPLaxJ2Ls1U1jA3ERERERHVPk5OTmV2PqtSvXr1oFQqjUYpk5OTjUYnSwQEBJhc397eHj4+Plara2XxbrFERERERERW4ujoiPbt2+PAgQOy5QcOHEDnzp1NPiciIsJo/ZiYGISHh9fY6y0Bdi6JiIiIiIisavr06Vi3bh3Wr1+Pq1evYtq0abh16xbGjRsHAJgzZw5GjhxpWH/cuHFITEzE9OnTcfXqVaxfvx5ffPEFZsyYIeotmIWnxRIREREREVnRyy+/jIcPH2LRokW4f/8+2rRpg7179yI4OBgAcP/+fdmcl40bN8bevXsxbdo0fPrppwgKCsKqVatq9DQkAKCQSq4MJSIiIiIiIqognhZLRERERERElWbTncvVq1cjNDQU7u7ucHd3R0REhGwuS0mSsHDhQgQFBcHZ2RmRkZG4fPlyudu8fPkyXnjhBTRq1AgKhQIrV640WmfhwoVQKBSyR0BAgGydpKQk9O3bF0FBQZgwYQL0er2hLDIy0uj5CoXCcM52bWaNTNauXYuuXbvCy8sLXl5eeO655/DLL7/I1snJycHw4cMRGBiI4cOHIzc311A2evRok+39/PPPV+2bF0RUm3M/KJs1Mtm2bRvCw8Ph6ekJV1dXhIWF4euvv5atY6v7gaj25j5QPmvk8qjNmzdDoVBg8ODBsuXcD6q3vbkflM8auWzYsMFkmxUUFBjWsdX9gCrPpjuXTzzxBD788EOcOXMGZ86cwbPPPotBgwYZdsqlS5dixYoV+OSTTxAbG4uAgAD06tUL2dnZZW4zLy8PTz75JD788EOjg+OjWrdujfv37xsely5dkpXPnz8fHTp0wA8//ICbN2/iu+++k5W/8cYbsuffv38fS5curURr1AzWyOTIkSP461//isOHD+PkyZNo2LAhevfujbt37xrWWblyJdzc3BATEwMXFxejHwWef/55o/YunUltJarNAe4HZbFGJt7e3pg3bx5OnjyJixcv4rXXXsNrr72G/fv3G9ax1f1AVHsD3AfKY41cSiQmJmLGjBno2rWrURn3g+ptb4D7QXmslYu7u7tRmz06JYet7gdUBSSS8fLyktatWyfp9XopICBA+vDDDw1lBQUFkoeHh/TZZ5+Zta3g4GDpo48+Mlq+YMEC6amnnir3uS+88IK0efNmSafTSRMmTJA+/fRTQ1n37t2lKVOmmFWHuqAqM5EkSSoqKpLUarX01VdfGZa9/fbbUlRUlCRJkhQVFSW98847hrJRo0ZJgwYNqvwbqUWqo825H1imqjORJElq166dNH/+fMPf3A/+VB3tzX3AclWRS1FRkdSlSxdp3bp1Jj/X3A/+VB3tzf3AcpXN5csvv5Q8PDzKfQ3uB1RRNj1y+SidTofNmzcjNzcXERERSEhIQFJSEnr37m1YR6VSoXv37jhx4kSlXy8+Ph5BQUFo3Lgxhg8fjhs3bsjKZ8+ejcmTJ0OlUuHcuXOyWxPbCmtlkpeXB61WC29vb8OySZMm4fPPP4eDgwO+/PJLTJkypUrfS21RnW0OcD8whzUykSQJhw4dQlxcHLp162ZYzv2getsb4D5grqrMZdGiRfD19cXrr79uspz7QfW2N8D9wFxVmUtOTg6Cg4PxxBNP4H/+539w7tw5WTn3A6ow0b1b0S5evCi5urpKSqVS8vDwkPbs2SNJkiQdP35cAiDdvXtXtv4bb7wh9e7d26xtlzVyuXfvXmnr1q3SxYsXpQMHDkjdu3eX/P39pdTUVNl6Wq1Wun//vtHzu3fvLjk4OEiurq6yx4YNG8x81zWbNTORJEmaMGGC1KRJEyk/P1+2XKfTSffv35f0er1s+ahRoySlUmnU3osWLargO6x5RLQ594PyWSOTjIwMydXVVbK3t5dUKpX0xRdfGK1jq/uBiPbmPvB4VZ3Lzz//LNWvX19KSUmRJKnsERjuB9XX3twPHq+qczl58qT09ddfS+fPn5eOHTsmvfDCC5Kzs7N07do12Xq2uh9Q5dj8PJctWrTA+fPnkZGRgejoaIwaNQpHjx41lCsUCtn6kiQZLbNU3759Df9u27YtIiIi0KRJE3z11VeYPn26ocze3r7M6zZHjBiBefPmyZb5+flVql41hTUzWbp0Kb777jscOXJEdm0BANjZ2ZXZ3j169MDq1atly0qPwtVmItqc+0H5rJGJWq3G+fPnkZOTg0OHDmH69Ol48sknERkZaVjHVvcDEe3NfeDxqjKX7Oxs/O1vf8PatWtRr169cl+X+0H1tTf3g8er6uNTp06d0KlTJ8PfXbp0wdNPP41//etfWLVqlWG5re4HVDk237l0dHRE06ZNAQDh4eGIjY3Fxx9/jFmzZgEovkNZYGCgYf3k5GT4+/tXaR1cXV3Rtm1bxMfHm/0cDw8PQ73rGmtlsnz5cixevBgHDx5EaGioRXVydXWts+0N1Iw2534gZ41M7OzsDNsMCwvD1atXsWTJElnnsjx1eT+oCe3NfcBYVebyxx9/4ObNmxgwYIBhWcldR+3t7REXF4cmTZo8tk7cD6zb3twPjFn7u6qdnR06dOhgUZvX5f2AKofXXJYiSRIKCwvRuHFjBAQE4MCBA4YyjUaDo0ePonPnzlX6moWFhbh69arswEB/qopMli1bhvfeew/79u1DeHi4tatc64loc+4H5bPGsalkm2RMRHtzH3i8yuQSEhKCS5cu4fz584bHwIED0aNHD5w/fx4NGjSorrdRa4hob+4Hj1fVxydJknD+/Hm2OVUJmx65nDt3Lvr27YsGDRogOzsbmzdvxpEjR7Bv3z4oFApMnToVixcvRrNmzdCsWTMsXrwYLi4ueOWVVwzbGDlyJOrXr48lS5YAKN6pr1y5Yvj33bt3cf78ebi5uRl+4ZkxYwYGDBiAhg0bIjk5Ge+//z6ysrIwatQos+uel5eHpKQk2TKVSgUvL6/KNotQ1shk6dKl+Mc//oFNmzahUaNGhnZzc3ODm5ubWfUqLCw0am97e/vHnlpVG4hqc+4HZbNGJkuWLEF4eDiaNGkCjUaDvXv3YuPGjUanNZWnru4Hotqb+0D5qjoXJycntGnTRvYanp6eAGC0vDzcD6q2vbkflM8ax6f//d//RadOndCsWTNkZWVh1apVOH/+PD799FOz61VX9wOqAtV8jWeNMmbMGCk4OFhydHSUfH19pZ49e0oxMTGGcr1eLy1YsEAKCAiQVCqV1K1bN+nSpUuybXTv3l0aNWqU4e+EhAQJgNGje/fuhnVefvllKTAwUHJwcJCCgoKkoUOHSpcvXza73t27dzf5Gn369KlwW9QU1sgkODjYZHstWLDArDqNGjXK5PNbtGhRFW9ZOFFtzv2gbNbIZN68eVLTpk0lJycnycvLS4qIiJA2b95sdp3q8n4gqr25D5TPGrmUZumUCtwPqr69uR+Uzxq5TJ06VWrYsKFhm71795ZOnDhhdp3q8n5AlaeQJEmqwr4qERERERER2SBec0lERERERESVxs4lERERERERVRo7l0RERERERFRp7FwSERERERFRpbFzSURERERERJXGziURERERERFVGjuXREREREREVGnsXBIREREREVGlsXNJRERERERElcbOJREREREREVUaO5dERERERERUaexcEhERERERUaX9H28sKVe09GCxAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1000x1000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = template_group.catalog.plot_map(\n",
    "    figsize=(10, 10), network=net, s=50, markersize_station=50, lat_margin=0.02, plot_uncertainties=False\n",
    "    )\n",
    "ax = fig.get_axes()[0]\n",
    "ax.set_facecolor(\"dimgrey\")\n",
    "ax.patch.set_alpha(0.15)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bonus: Relocate each events\n",
    "\n",
    "In your workflow, you might be ok with the approximate locations of the template matching catalog. However, if you decide to keep refining the catalog, here are some suggestions to get started.\n",
    "\n",
    "One possibility to start refining the locations of all events is to re-run the same process as in notebook 6, namely `PhaseNet` and `NonLinLoc`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PhaseNet(\n",
       "  (inc): Conv1d(3, 8, kernel_size=(7,), stride=(1,), padding=same)\n",
       "  (in_bn): BatchNorm1d(8, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "  (down_branch): ModuleList(\n",
       "    (0): ModuleList(\n",
       "      (0): Conv1d(8, 8, kernel_size=(7,), stride=(1,), padding=same, bias=False)\n",
       "      (1): BatchNorm1d(8, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (2): Conv1d(8, 8, kernel_size=(7,), stride=(4,), padding=(3,), bias=False)\n",
       "      (3): BatchNorm1d(8, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    )\n",
       "    (1): ModuleList(\n",
       "      (0): Conv1d(8, 16, kernel_size=(7,), stride=(1,), padding=same, bias=False)\n",
       "      (1): BatchNorm1d(16, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (2): Conv1d(16, 16, kernel_size=(7,), stride=(4,), bias=False)\n",
       "      (3): BatchNorm1d(16, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    )\n",
       "    (2): ModuleList(\n",
       "      (0): Conv1d(16, 32, kernel_size=(7,), stride=(1,), padding=same, bias=False)\n",
       "      (1): BatchNorm1d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (2): Conv1d(32, 32, kernel_size=(7,), stride=(4,), bias=False)\n",
       "      (3): BatchNorm1d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    )\n",
       "    (3): ModuleList(\n",
       "      (0): Conv1d(32, 64, kernel_size=(7,), stride=(1,), padding=same, bias=False)\n",
       "      (1): BatchNorm1d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (2): Conv1d(64, 64, kernel_size=(7,), stride=(4,), bias=False)\n",
       "      (3): BatchNorm1d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    )\n",
       "    (4): ModuleList(\n",
       "      (0): Conv1d(64, 128, kernel_size=(7,), stride=(1,), padding=same, bias=False)\n",
       "      (1): BatchNorm1d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (2): None\n",
       "      (3): None\n",
       "    )\n",
       "  )\n",
       "  (up_branch): ModuleList(\n",
       "    (0): ModuleList(\n",
       "      (0): ConvTranspose1d(128, 64, kernel_size=(7,), stride=(4,), bias=False)\n",
       "      (1): BatchNorm1d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (2): Conv1d(128, 64, kernel_size=(7,), stride=(1,), padding=same, bias=False)\n",
       "      (3): BatchNorm1d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    )\n",
       "    (1): ModuleList(\n",
       "      (0): ConvTranspose1d(64, 32, kernel_size=(7,), stride=(4,), bias=False)\n",
       "      (1): BatchNorm1d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (2): Conv1d(64, 32, kernel_size=(7,), stride=(1,), padding=same, bias=False)\n",
       "      (3): BatchNorm1d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    )\n",
       "    (2): ModuleList(\n",
       "      (0): ConvTranspose1d(32, 16, kernel_size=(7,), stride=(4,), bias=False)\n",
       "      (1): BatchNorm1d(16, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (2): Conv1d(32, 16, kernel_size=(7,), stride=(1,), padding=same, bias=False)\n",
       "      (3): BatchNorm1d(16, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    )\n",
       "    (3): ModuleList(\n",
       "      (0): ConvTranspose1d(16, 8, kernel_size=(7,), stride=(4,), bias=False)\n",
       "      (1): BatchNorm1d(8, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (2): Conv1d(16, 8, kernel_size=(7,), stride=(1,), padding=same, bias=False)\n",
       "      (3): BatchNorm1d(8, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    )\n",
       "  )\n",
       "  (out): Conv1d(8, 3, kernel_size=(1,), stride=(1,), padding=same)\n",
       "  (softmax): Softmax(dim=1)\n",
       ")"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import seisbench.models as sbm\n",
    "\n",
    "ml_detector = sbm.PhaseNet.from_pretrained(\"original\")\n",
    "ml_detector.eval()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [],
   "source": [
    "# PhaseNet picking parameters\n",
    "\n",
    "# PhaseNet was trained for 100Hz data. Even if we saw that running PhaseNet on 25Hz data\n",
    "# was good for backprojection, here, picking benefits from running PhaseNet on 100Hz data.\n",
    "# Thus, we will upsample the waveforms before running PhaseNet.\n",
    "PHASENET_SAMPLING_RATE_HZ = 100.\n",
    "UPSAMPLING_BEFORE_PN_RELOCATION = int(PHASENET_SAMPLING_RATE_HZ/BPMF.cfg.SAMPLING_RATE_HZ)\n",
    "DOWNSAMPLING_BEFORE_PN_RELOCATION = 1\n",
    "\n",
    "# DURATION_SEC: the duration, in seconds, of the data stream starting at the detection time\n",
    "#               defined by Event.origin_time. This data stream is used for picking the P/S waves.\n",
    "DURATION_SEC = 60.0\n",
    "# THRESHOLD_P: probability of P-wave arrival above which we declare a pick. If several picks are\n",
    "#              declared during the DURATION_SEC data stream, we only keep the best one. We can\n",
    "#              afford using a low probability threshold since we already know with some confidence\n",
    "#              that an earthquake is in the data stream.\n",
    "THRESHOLD_P = 0.10\n",
    "# THRESHOLD_S: probability of S-wave arrival above which we declare a pick.\n",
    "THRESHOLD_S = 0.10\n",
    "# DATA_FOLDER: name of the folder where the waveforms we want to use for picking are stored\n",
    "DATA_FOLDER = \"preprocessed_2_12\"\n",
    "# COMPONENT_ALIASES: A dictionary that defines the possible channel names to search for\n",
    "#                    for example, the seismometer might not be oriented and the horizontal channels\n",
    "#                    might be named 1 and 2, in which case we arbitrarily decide to take 1 as the \"N\" channel\n",
    "#                    and 2 as the \"E\" channel. This doesn't matter for picking P- and S-wave arrival times.\n",
    "COMPONENT_ALIASES = {\"N\": [\"N\", \"1\"], \"E\": [\"E\", \"2\"], \"Z\": [\"Z\"]}\n",
    "# PHASE_ON_COMP: dictionary defining which moveout we use to extract the waveform\n",
    "PHASE_ON_COMP = {\"N\": \"S\", \"1\": \"S\", \"E\": \"S\", \"2\": \"S\", \"Z\": \"P\"}\n",
    "# USE_APRIORI_PICKS: boolean. This option is IMPORTANT when running BPMF in HIGH SEISMICITY CONTEXTS, like\n",
    "#                   during the aftershock sequence of a large earthquake. If there are many events happening\n",
    "#                   close to each other in time, we need to guide PhaseNet to pick the right set of picks.\n",
    "#                   For that, we use the predicted P- and S-wave times from backprojection to add extra weight to\n",
    "#                   the picks closer to those times and make it more likely to identify them as the \"best\" picks.\n",
    "#                   WARNING: If there are truly many events, even this trick might fail. It's because \"phase association\"\n",
    "#                   is an intrinsically hard problem in this case, and the picking might be hard to do automatically.\n",
    "USE_APRIORI_PICKS = True\n",
    "#SEARCH_WIN_SEC: When `use_apriori_picks=True`, the P/S picks in the `DURATION_SEC`-long window are weighted\n",
    "#                using a gaussian centered on the predicted P/S wave arrivals and with standard deviation\n",
    "#                equal to `SEARCH_WIN_SEC`. Thus, the picks outside of +/- `3*SEARCH_WIN_SEC` are essentially\n",
    "#                given a weight of 0.\n",
    "SEARCH_WIN_SEC = 1.0\n",
    "\n",
    "# MAX_HORIZONTAL_UNC_KM: Horizontal location uncertainty, in km, above which we keep the template location\n",
    "MAX_HORIZONTAL_UNC_KM = 10.\n",
    "\n",
    "# location parameters\n",
    "\n",
    "LOCATION_ROUTINE = \"NLLoc\"\n",
    "# NLLOC_METHOD: string that defines what loss function is used by NLLoc, see http://alomax.free.fr/nlloc/ for more info.\n",
    "#               Using some flavor of 'EDT' is important to obtain robust locations that are not sensitive to pick outliers.\n",
    "NLLOC_METHOD = \"EDT_OT_WT_ML\"\n",
    "# MINIMUM_NUM_STATIONS_W_PICKS: minimum number of stations with picks to even try relocation.\n",
    "MINIMUM_NUM_STATIONS_W_PICKS = 3\n",
    "# we set a maximum tolerable difference, in percentage, between the picked time and the predicted travel time\n",
    "MAX_TIME_DIFFERENT_PICKS_PREDICTED_PERCENT = 25"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Relocating each individual event:   0%|          | 0/67 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Relocating each individual event: 100%|██████████| 67/67 [00:37<00:00,  1.78it/s]\n"
     ]
    }
   ],
   "source": [
    "events = {}\n",
    "for i in tqdm(range(len(template_group.catalog.catalog)), desc=\"Relocating each individual event\"):\n",
    "    row = template_group.catalog.catalog.iloc[i]\n",
    "    tid, evidx = row.name.split(\".\")\n",
    "    # get the template instance from template_group\n",
    "    template = template_group.templates[template_group.tindexes.loc[int(tid)]]\n",
    "    # this is the filename of the database where template tid's detected events were stored\n",
    "    detection_db_filename = f\"detections_template{tid}.h5\"\n",
    "    db_path = os.path.join(BPMF.cfg.OUTPUT_PATH, MATCHED_FILTER_DB)\n",
    "    with h5.File(os.path.join(db_path, detection_db_filename), mode=\"r\") as fdet:\n",
    "        keys = list(fdet.keys())\n",
    "        event = BPMF.dataset.Event.read_from_file(\n",
    "            hdf5_file=fdet[keys[int(evidx)]], data_reader=data_reader_mseed\n",
    "            )\n",
    "    # set arrival_times attribute to re-pick P-/S-wave arrivals with prior information\n",
    "    event.set_arrival_times_from_moveouts(verbose=0)\n",
    "    # # attach data reader this way (note: conflict with data_reader argument in phasenet's wrapper module)\n",
    "    # event.data_reader = data_reader_mseed\n",
    "    # pick P-/S-wave arrivals\n",
    "    event.pick_PS_phases(\n",
    "        DURATION_SEC,\n",
    "        phase_on_comp=PHASE_ON_COMP,\n",
    "        threshold_P=THRESHOLD_P,\n",
    "        threshold_S=THRESHOLD_S,\n",
    "        component_aliases=COMPONENT_ALIASES,\n",
    "        data_folder=DATA_FOLDER,\n",
    "        upsampling=UPSAMPLING_BEFORE_PN_RELOCATION,\n",
    "        downsampling=DOWNSAMPLING_BEFORE_PN_RELOCATION,\n",
    "        use_apriori_picks=USE_APRIORI_PICKS,\n",
    "        ml_model=ml_detector,\n",
    "    )\n",
    "    if len(event.picks.dropna(how=\"any\")) >= MINIMUM_NUM_STATIONS_W_PICKS:\n",
    "        # first relocation, insensitive to outliers\n",
    "        event.relocate(\n",
    "            stations=net.stations, routine=LOCATION_ROUTINE, method=NLLOC_METHOD,\n",
    "        )    \n",
    "    if \"NLLoc_reloc\" in event.aux_data:\n",
    "        # this variable was inserted into ev.aux_data if NLLoc successfully located the event\n",
    "        # use predicted times to remove outlier picks\n",
    "        event.remove_outlier_picks(max_diff_percent=MAX_TIME_DIFFERENT_PICKS_PREDICTED_PERCENT)\n",
    "        if len(event.picks.dropna(how=\"any\")) >= MINIMUM_NUM_STATIONS_W_PICKS:\n",
    "            # first relocation, insensitive to outliers\n",
    "            event.relocate(\n",
    "                stations=net.stations, routine=LOCATION_ROUTINE, method=NLLOC_METHOD,\n",
    "            )\n",
    "        else:\n",
    "            del event.aux_data[\"NLLoc_reloc\"]\n",
    "    events[row.name] = event\n",
    "    if (\"NLLoc_reloc\" in event.aux_data) and (event.hmax_unc) < MAX_HORIZONTAL_UNC_KM:\n",
    "        template_group.catalog.catalog.loc[row.name, \"longitude\"] = event.longitude\n",
    "        template_group.catalog.catalog.loc[row.name, \"latitude\"] = event.latitude\n",
    "        template_group.catalog.catalog.loc[row.name, \"depth\"] = event.depth\n",
    "        template_group.catalog.catalog.loc[row.name, \"origin_time\"] = event.origin_time\n",
    "        template_group.catalog.catalog.loc[row.name, \"hmax_unc\"] = event.hmax_unc\n",
    "        template_group.catalog.catalog.loc[row.name, \"hmin_unc\"] = event.hmin_unc\n",
    "        template_group.catalog.catalog.loc[row.name, \"vmax_unc\"] = event.vmax_unc\n",
    "        template_group.catalog.catalog.loc[row.name, \"az_hmax_unc\"] = event.az_hmax_unc\n",
    "                                           "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x1000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = template_group.catalog.plot_map(\n",
    "    figsize=(10, 10), network=net, s=50, markersize_station=50, lat_margin=0.02, plot_uncertainties=False\n",
    "    )\n",
    "ax = fig.get_axes()[0]\n",
    "ax.set_facecolor(\"dimgrey\")\n",
    "ax.patch.set_alpha(0.15)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Assemble the backprojection and template matching catalog \n",
    "\n",
    "When selecting the template events from the backprojection catalog, we imposed some quality criteria that might have thrown out some events that we still want in our final catalog. Here, we make a simple comparison of the backprojection and template matching catalogs to find these missing events and add them to the final catalog."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [],
   "source": [
    "BACKPROJECTION_CATALOG_FILENAME = \"backprojection_catalog.csv\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>event_id</th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>depth</th>\n",
       "      <th>origin_time</th>\n",
       "      <th>cc</th>\n",
       "      <th>tid</th>\n",
       "      <th>origin_time_sec</th>\n",
       "      <th>interevent_time_sec</th>\n",
       "      <th>unique_event</th>\n",
       "      <th>hmax_unc</th>\n",
       "      <th>hmin_unc</th>\n",
       "      <th>az_hmax_unc</th>\n",
       "      <th>vmax_unc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tm_5.0</td>\n",
       "      <td>30.260000</td>\n",
       "      <td>40.630000</td>\n",
       "      <td>-0.500000</td>\n",
       "      <td>2012-07-26 00:20:46.200000</td>\n",
       "      <td>0.333776</td>\n",
       "      <td>5</td>\n",
       "      <td>1.343262e+09</td>\n",
       "      <td>0.00</td>\n",
       "      <td>True</td>\n",
       "      <td>4.138734</td>\n",
       "      <td>2.266640</td>\n",
       "      <td>145.441242</td>\n",
       "      <td>1.879851</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tm_2.0</td>\n",
       "      <td>30.320117</td>\n",
       "      <td>40.721875</td>\n",
       "      <td>9.476562</td>\n",
       "      <td>2012-07-26 00:58:11.080000</td>\n",
       "      <td>0.385646</td>\n",
       "      <td>2</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>0.00</td>\n",
       "      <td>True</td>\n",
       "      <td>2.232884</td>\n",
       "      <td>2.065874</td>\n",
       "      <td>-173.163204</td>\n",
       "      <td>5.369457</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tm_0.1</td>\n",
       "      <td>30.322070</td>\n",
       "      <td>40.726875</td>\n",
       "      <td>10.695312</td>\n",
       "      <td>2012-07-26 00:58:16.360000</td>\n",
       "      <td>0.306255</td>\n",
       "      <td>0</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>5.28</td>\n",
       "      <td>True</td>\n",
       "      <td>2.154916</td>\n",
       "      <td>1.692434</td>\n",
       "      <td>155.518831</td>\n",
       "      <td>2.975361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tm_2.2</td>\n",
       "      <td>30.320117</td>\n",
       "      <td>40.721875</td>\n",
       "      <td>9.476562</td>\n",
       "      <td>2012-07-26 00:59:12.800000</td>\n",
       "      <td>0.236728</td>\n",
       "      <td>2</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>56.16</td>\n",
       "      <td>True</td>\n",
       "      <td>2.232884</td>\n",
       "      <td>2.065874</td>\n",
       "      <td>-173.163204</td>\n",
       "      <td>5.369457</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tm_0.2</td>\n",
       "      <td>30.322070</td>\n",
       "      <td>40.726875</td>\n",
       "      <td>10.695312</td>\n",
       "      <td>2012-07-26 01:02:53.120000</td>\n",
       "      <td>0.286318</td>\n",
       "      <td>0</td>\n",
       "      <td>1.343265e+09</td>\n",
       "      <td>220.32</td>\n",
       "      <td>True</td>\n",
       "      <td>2.154916</td>\n",
       "      <td>1.692434</td>\n",
       "      <td>155.518831</td>\n",
       "      <td>2.975361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>tm_7.12</td>\n",
       "      <td>30.319141</td>\n",
       "      <td>40.716250</td>\n",
       "      <td>9.578125</td>\n",
       "      <td>2012-07-26 14:38:50.760000</td>\n",
       "      <td>0.250089</td>\n",
       "      <td>7</td>\n",
       "      <td>1.343314e+09</td>\n",
       "      <td>0.16</td>\n",
       "      <td>True</td>\n",
       "      <td>7.482605</td>\n",
       "      <td>2.519412</td>\n",
       "      <td>121.069720</td>\n",
       "      <td>6.019241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>tm_8.8</td>\n",
       "      <td>30.350391</td>\n",
       "      <td>40.713750</td>\n",
       "      <td>10.390625</td>\n",
       "      <td>2012-07-26 14:49:28.320000</td>\n",
       "      <td>0.245483</td>\n",
       "      <td>8</td>\n",
       "      <td>1.343314e+09</td>\n",
       "      <td>637.56</td>\n",
       "      <td>True</td>\n",
       "      <td>5.444797</td>\n",
       "      <td>2.801365</td>\n",
       "      <td>90.878884</td>\n",
       "      <td>5.589809</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>tm_3.0</td>\n",
       "      <td>30.325488</td>\n",
       "      <td>40.600313</td>\n",
       "      <td>-1.949219</td>\n",
       "      <td>2012-07-26T15:06:20.040000Z</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3</td>\n",
       "      <td>1.343315e+09</td>\n",
       "      <td>1011.76</td>\n",
       "      <td>True</td>\n",
       "      <td>1.312401</td>\n",
       "      <td>1.086642</td>\n",
       "      <td>132.946490</td>\n",
       "      <td>2.321178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>tm_10.3</td>\n",
       "      <td>30.333789</td>\n",
       "      <td>40.713125</td>\n",
       "      <td>7.445312</td>\n",
       "      <td>2012-07-26 16:26:52.800000</td>\n",
       "      <td>0.239526</td>\n",
       "      <td>10</td>\n",
       "      <td>1.343320e+09</td>\n",
       "      <td>4832.72</td>\n",
       "      <td>True</td>\n",
       "      <td>2.652178</td>\n",
       "      <td>1.579905</td>\n",
       "      <td>93.702470</td>\n",
       "      <td>3.878422</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>tm_4.0</td>\n",
       "      <td>30.430000</td>\n",
       "      <td>40.720000</td>\n",
       "      <td>9.500000</td>\n",
       "      <td>2012-07-26 17:28:21.040000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4</td>\n",
       "      <td>1.343324e+09</td>\n",
       "      <td>3688.24</td>\n",
       "      <td>True</td>\n",
       "      <td>3.942112</td>\n",
       "      <td>1.625908</td>\n",
       "      <td>72.443923</td>\n",
       "      <td>4.694059</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>67 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   event_id  longitude   latitude      depth                  origin_time        cc  tid  origin_time_sec  interevent_time_sec  unique_event  hmax_unc  hmin_unc  az_hmax_unc  vmax_unc\n",
       "0    tm_5.0  30.260000  40.630000  -0.500000   2012-07-26 00:20:46.200000  0.333776    5     1.343262e+09                 0.00          True  4.138734  2.266640   145.441242  1.879851\n",
       "1    tm_2.0  30.320117  40.721875   9.476562   2012-07-26 00:58:11.080000  0.385646    2     1.343264e+09                 0.00          True  2.232884  2.065874  -173.163204  5.369457\n",
       "2    tm_0.1  30.322070  40.726875  10.695312   2012-07-26 00:58:16.360000  0.306255    0     1.343264e+09                 5.28          True  2.154916  1.692434   155.518831  2.975361\n",
       "3    tm_2.2  30.320117  40.721875   9.476562   2012-07-26 00:59:12.800000  0.236728    2     1.343264e+09                56.16          True  2.232884  2.065874  -173.163204  5.369457\n",
       "4    tm_0.2  30.322070  40.726875  10.695312   2012-07-26 01:02:53.120000  0.286318    0     1.343265e+09               220.32          True  2.154916  1.692434   155.518831  2.975361\n",
       "..      ...        ...        ...        ...                          ...       ...  ...              ...                  ...           ...       ...       ...          ...       ...\n",
       "62  tm_7.12  30.319141  40.716250   9.578125   2012-07-26 14:38:50.760000  0.250089    7     1.343314e+09                 0.16          True  7.482605  2.519412   121.069720  6.019241\n",
       "63   tm_8.8  30.350391  40.713750  10.390625   2012-07-26 14:49:28.320000  0.245483    8     1.343314e+09               637.56          True  5.444797  2.801365    90.878884  5.589809\n",
       "64   tm_3.0  30.325488  40.600313  -1.949219  2012-07-26T15:06:20.040000Z  1.000000    3     1.343315e+09              1011.76          True  1.312401  1.086642   132.946490  2.321178\n",
       "65  tm_10.3  30.333789  40.713125   7.445312   2012-07-26 16:26:52.800000  0.239526   10     1.343320e+09              4832.72          True  2.652178  1.579905    93.702470  3.878422\n",
       "66   tm_4.0  30.430000  40.720000   9.500000   2012-07-26 17:28:21.040000  1.000000    4     1.343324e+09              3688.24          True  3.942112  1.625908    72.443923  4.694059\n",
       "\n",
       "[67 rows x 14 columns]"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tm_catalog = template_group.catalog.catalog.copy()\n",
    "tm_catalog.reset_index(inplace=True)\n",
    "for i in range(len(tm_catalog)):\n",
    "    tm_catalog.loc[i, \"event_id\"] = f\"tm_{tm_catalog.loc[i, 'event_id']}\"\n",
    "tm_catalog"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>depth</th>\n",
       "      <th>origin_time</th>\n",
       "      <th>hmax_unc</th>\n",
       "      <th>hmin_unc</th>\n",
       "      <th>az_hmax_unc</th>\n",
       "      <th>vmax_unc</th>\n",
       "      <th>event_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>30.322070</td>\n",
       "      <td>40.726875</td>\n",
       "      <td>10.695312</td>\n",
       "      <td>2012-07-26 01:10:22.000</td>\n",
       "      <td>2.154916</td>\n",
       "      <td>1.692434</td>\n",
       "      <td>155.518831</td>\n",
       "      <td>2.975361</td>\n",
       "      <td>bp_0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>30.331836</td>\n",
       "      <td>40.718125</td>\n",
       "      <td>9.070312</td>\n",
       "      <td>2012-07-26 01:15:54.320</td>\n",
       "      <td>3.778648</td>\n",
       "      <td>2.197736</td>\n",
       "      <td>90.308290</td>\n",
       "      <td>3.466360</td>\n",
       "      <td>bp_1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>30.260000</td>\n",
       "      <td>40.630000</td>\n",
       "      <td>-0.500000</td>\n",
       "      <td>2012-07-26 01:58:19.840</td>\n",
       "      <td>4.138734</td>\n",
       "      <td>2.266640</td>\n",
       "      <td>145.441242</td>\n",
       "      <td>1.879851</td>\n",
       "      <td>bp_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>30.334766</td>\n",
       "      <td>40.718750</td>\n",
       "      <td>8.765625</td>\n",
       "      <td>2012-07-26 02:35:01.160</td>\n",
       "      <td>6.868111</td>\n",
       "      <td>2.659949</td>\n",
       "      <td>113.998302</td>\n",
       "      <td>6.660057</td>\n",
       "      <td>bp_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>30.320117</td>\n",
       "      <td>40.720625</td>\n",
       "      <td>9.679688</td>\n",
       "      <td>2012-07-26 03:00:39.000</td>\n",
       "      <td>2.108578</td>\n",
       "      <td>1.945735</td>\n",
       "      <td>36.913097</td>\n",
       "      <td>3.823750</td>\n",
       "      <td>bp_4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>30.319141</td>\n",
       "      <td>40.716250</td>\n",
       "      <td>9.578125</td>\n",
       "      <td>2012-07-26 04:43:38.560</td>\n",
       "      <td>7.482605</td>\n",
       "      <td>2.519412</td>\n",
       "      <td>121.069720</td>\n",
       "      <td>6.019241</td>\n",
       "      <td>bp_5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>30.350391</td>\n",
       "      <td>40.713750</td>\n",
       "      <td>10.390625</td>\n",
       "      <td>2012-07-26 04:48:38.400</td>\n",
       "      <td>5.444797</td>\n",
       "      <td>2.801365</td>\n",
       "      <td>90.878884</td>\n",
       "      <td>5.589809</td>\n",
       "      <td>bp_6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>30.303516</td>\n",
       "      <td>40.723750</td>\n",
       "      <td>10.390625</td>\n",
       "      <td>2012-07-26 08:08:25.520</td>\n",
       "      <td>3.553459</td>\n",
       "      <td>2.339270</td>\n",
       "      <td>97.545388</td>\n",
       "      <td>6.632963</td>\n",
       "      <td>bp_7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>30.333789</td>\n",
       "      <td>40.713125</td>\n",
       "      <td>7.445312</td>\n",
       "      <td>2012-07-26 10:07:23.960</td>\n",
       "      <td>2.652178</td>\n",
       "      <td>1.579905</td>\n",
       "      <td>93.702470</td>\n",
       "      <td>3.878423</td>\n",
       "      <td>bp_8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>30.290000</td>\n",
       "      <td>40.620000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2012-07-26 11:55:36.200</td>\n",
       "      <td>5.354502</td>\n",
       "      <td>0.617736</td>\n",
       "      <td>122.424652</td>\n",
       "      <td>1.831314</td>\n",
       "      <td>bp_9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>30.304492</td>\n",
       "      <td>40.799375</td>\n",
       "      <td>-1.898438</td>\n",
       "      <td>2012-07-26 13:35:26.320</td>\n",
       "      <td>3.834992</td>\n",
       "      <td>1.344920</td>\n",
       "      <td>89.061111</td>\n",
       "      <td>6.283254</td>\n",
       "      <td>bp_10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>30.320117</td>\n",
       "      <td>40.719375</td>\n",
       "      <td>9.476562</td>\n",
       "      <td>2012-07-26 13:48:32.840</td>\n",
       "      <td>1.981176</td>\n",
       "      <td>1.782798</td>\n",
       "      <td>7.829659</td>\n",
       "      <td>3.604760</td>\n",
       "      <td>bp_11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>30.316211</td>\n",
       "      <td>40.718125</td>\n",
       "      <td>9.882812</td>\n",
       "      <td>2012-07-26 13:51:58.680</td>\n",
       "      <td>2.361664</td>\n",
       "      <td>2.032220</td>\n",
       "      <td>22.657235</td>\n",
       "      <td>5.617083</td>\n",
       "      <td>bp_12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>30.320117</td>\n",
       "      <td>40.721875</td>\n",
       "      <td>9.476562</td>\n",
       "      <td>2012-07-26 13:53:31.640</td>\n",
       "      <td>2.232884</td>\n",
       "      <td>2.065874</td>\n",
       "      <td>6.836796</td>\n",
       "      <td>5.369457</td>\n",
       "      <td>bp_13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>30.333789</td>\n",
       "      <td>40.713125</td>\n",
       "      <td>7.851562</td>\n",
       "      <td>2012-07-26 13:56:54.520</td>\n",
       "      <td>4.292925</td>\n",
       "      <td>1.990915</td>\n",
       "      <td>82.517667</td>\n",
       "      <td>6.385122</td>\n",
       "      <td>bp_14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>30.327441</td>\n",
       "      <td>40.600313</td>\n",
       "      <td>-1.949219</td>\n",
       "      <td>2012-07-26 15:06:20.080</td>\n",
       "      <td>1.397271</td>\n",
       "      <td>1.183020</td>\n",
       "      <td>128.315144</td>\n",
       "      <td>2.780649</td>\n",
       "      <td>bp_15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>30.430000</td>\n",
       "      <td>40.720000</td>\n",
       "      <td>9.500000</td>\n",
       "      <td>2012-07-26 17:28:21.040</td>\n",
       "      <td>3.942112</td>\n",
       "      <td>1.625908</td>\n",
       "      <td>72.443923</td>\n",
       "      <td>4.694059</td>\n",
       "      <td>bp_16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    longitude   latitude      depth             origin_time  hmax_unc  hmin_unc  az_hmax_unc  vmax_unc event_id\n",
       "0   30.322070  40.726875  10.695312 2012-07-26 01:10:22.000  2.154916  1.692434   155.518831  2.975361     bp_0\n",
       "1   30.331836  40.718125   9.070312 2012-07-26 01:15:54.320  3.778648  2.197736    90.308290  3.466360     bp_1\n",
       "2   30.260000  40.630000  -0.500000 2012-07-26 01:58:19.840  4.138734  2.266640   145.441242  1.879851     bp_2\n",
       "3   30.334766  40.718750   8.765625 2012-07-26 02:35:01.160  6.868111  2.659949   113.998302  6.660057     bp_3\n",
       "4   30.320117  40.720625   9.679688 2012-07-26 03:00:39.000  2.108578  1.945735    36.913097  3.823750     bp_4\n",
       "5   30.319141  40.716250   9.578125 2012-07-26 04:43:38.560  7.482605  2.519412   121.069720  6.019241     bp_5\n",
       "6   30.350391  40.713750  10.390625 2012-07-26 04:48:38.400  5.444797  2.801365    90.878884  5.589809     bp_6\n",
       "7   30.303516  40.723750  10.390625 2012-07-26 08:08:25.520  3.553459  2.339270    97.545388  6.632963     bp_7\n",
       "8   30.333789  40.713125   7.445312 2012-07-26 10:07:23.960  2.652178  1.579905    93.702470  3.878423     bp_8\n",
       "9   30.290000  40.620000   0.000000 2012-07-26 11:55:36.200  5.354502  0.617736   122.424652  1.831314     bp_9\n",
       "10  30.304492  40.799375  -1.898438 2012-07-26 13:35:26.320  3.834992  1.344920    89.061111  6.283254    bp_10\n",
       "11  30.320117  40.719375   9.476562 2012-07-26 13:48:32.840  1.981176  1.782798     7.829659  3.604760    bp_11\n",
       "12  30.316211  40.718125   9.882812 2012-07-26 13:51:58.680  2.361664  2.032220    22.657235  5.617083    bp_12\n",
       "13  30.320117  40.721875   9.476562 2012-07-26 13:53:31.640  2.232884  2.065874     6.836796  5.369457    bp_13\n",
       "14  30.333789  40.713125   7.851562 2012-07-26 13:56:54.520  4.292925  1.990915    82.517667  6.385122    bp_14\n",
       "15  30.327441  40.600313  -1.949219 2012-07-26 15:06:20.080  1.397271  1.183020   128.315144  2.780649    bp_15\n",
       "16  30.430000  40.720000   9.500000 2012-07-26 17:28:21.040  3.942112  1.625908    72.443923  4.694059    bp_16"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bp_catalog = pd.read_csv(\n",
    "    os.path.join(BPMF.cfg.OUTPUT_PATH, BACKPROJECTION_CATALOG_FILENAME),\n",
    "    index_col=0\n",
    ")\n",
    "# convert origin times from string to pandas.Timestamp\n",
    "bp_catalog[\"origin_time\"] = pd.to_datetime(bp_catalog[\"origin_time\"])\n",
    "bp_catalog"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "# catalog merging parameters\n",
    "dt_criterion_pd = pd.Timedelta(DT_CRITERION_SEC, \"s\")\n",
    "HMAX_UNC_CRITERION_KM = 10."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Loop through BP cat: 100%|██████████| 17/17 [00:00<00:00, 530.93it/s]\n"
     ]
    }
   ],
   "source": [
    "combined_catalog = tm_catalog.copy()\n",
    "missing_event = np.zeros(len(bp_catalog), dtype=bool)\n",
    "\n",
    "for i in tqdm(range(len(bp_catalog)), desc=\"Loop through BP cat\"):\n",
    "    if bp_catalog.iloc[i][\"hmax_unc\"] > HMAX_UNC_CRITERION_KM:\n",
    "        continue\n",
    "    t_min = bp_catalog.iloc[i][\"origin_time\"] - dt_criterion_pd\n",
    "    t_max = bp_catalog.iloc[i][\"origin_time\"] + dt_criterion_pd\n",
    "    subset_tm = (tm_catalog[\"origin_time\"] > t_min) & (tm_catalog[\"origin_time\"] < t_max)\n",
    "    if np.sum(subset_tm) == 0:\n",
    "        missing_event[i] = True\n",
    "\n",
    "combined_catalog = pd.concat(\n",
    "        (tm_catalog, bp_catalog[missing_event]),\n",
    "        ignore_index=True\n",
    "        )\n",
    "combined_catalog.sort_values(\n",
    "        \"origin_time\", ascending=True, inplace=True\n",
    "        )"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And here is the combined catalog! In this simple example, it appears that all events in the backprojection catalog were re-detected in the template matching catalog so that the final catalog has no extra events with respect to the template matching catalog. However, it may not be always like that. Some events in the backprojection catalog may not have been well enough located for you to use them as templates, and they may not have been subsequently re-detected in the template matching catalog."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>event_id</th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>depth</th>\n",
       "      <th>origin_time</th>\n",
       "      <th>cc</th>\n",
       "      <th>tid</th>\n",
       "      <th>origin_time_sec</th>\n",
       "      <th>interevent_time_sec</th>\n",
       "      <th>unique_event</th>\n",
       "      <th>hmax_unc</th>\n",
       "      <th>hmin_unc</th>\n",
       "      <th>az_hmax_unc</th>\n",
       "      <th>vmax_unc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tm_5.0</td>\n",
       "      <td>30.260000</td>\n",
       "      <td>40.630000</td>\n",
       "      <td>-0.500000</td>\n",
       "      <td>2012-07-26 00:20:46.200000</td>\n",
       "      <td>0.333776</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.343262e+09</td>\n",
       "      <td>0.00</td>\n",
       "      <td>True</td>\n",
       "      <td>4.138734</td>\n",
       "      <td>2.266640</td>\n",
       "      <td>145.441242</td>\n",
       "      <td>1.879851</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tm_2.0</td>\n",
       "      <td>30.320117</td>\n",
       "      <td>40.721875</td>\n",
       "      <td>9.476562</td>\n",
       "      <td>2012-07-26 00:58:11.080000</td>\n",
       "      <td>0.385646</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>0.00</td>\n",
       "      <td>True</td>\n",
       "      <td>2.232884</td>\n",
       "      <td>2.065874</td>\n",
       "      <td>-173.163204</td>\n",
       "      <td>5.369457</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tm_0.1</td>\n",
       "      <td>30.322070</td>\n",
       "      <td>40.726875</td>\n",
       "      <td>10.695312</td>\n",
       "      <td>2012-07-26 00:58:16.360000</td>\n",
       "      <td>0.306255</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>5.28</td>\n",
       "      <td>True</td>\n",
       "      <td>2.154916</td>\n",
       "      <td>1.692434</td>\n",
       "      <td>155.518831</td>\n",
       "      <td>2.975361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tm_2.2</td>\n",
       "      <td>30.320117</td>\n",
       "      <td>40.721875</td>\n",
       "      <td>9.476562</td>\n",
       "      <td>2012-07-26 00:59:12.800000</td>\n",
       "      <td>0.236728</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>56.16</td>\n",
       "      <td>True</td>\n",
       "      <td>2.232884</td>\n",
       "      <td>2.065874</td>\n",
       "      <td>-173.163204</td>\n",
       "      <td>5.369457</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tm_0.2</td>\n",
       "      <td>30.322070</td>\n",
       "      <td>40.726875</td>\n",
       "      <td>10.695312</td>\n",
       "      <td>2012-07-26 01:02:53.120000</td>\n",
       "      <td>0.286318</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.343265e+09</td>\n",
       "      <td>220.32</td>\n",
       "      <td>True</td>\n",
       "      <td>2.154916</td>\n",
       "      <td>1.692434</td>\n",
       "      <td>155.518831</td>\n",
       "      <td>2.975361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>tm_7.12</td>\n",
       "      <td>30.319141</td>\n",
       "      <td>40.716250</td>\n",
       "      <td>9.578125</td>\n",
       "      <td>2012-07-26 14:38:50.760000</td>\n",
       "      <td>0.250089</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1.343314e+09</td>\n",
       "      <td>0.16</td>\n",
       "      <td>True</td>\n",
       "      <td>7.482605</td>\n",
       "      <td>2.519412</td>\n",
       "      <td>121.069720</td>\n",
       "      <td>6.019241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>tm_8.8</td>\n",
       "      <td>30.350391</td>\n",
       "      <td>40.713750</td>\n",
       "      <td>10.390625</td>\n",
       "      <td>2012-07-26 14:49:28.320000</td>\n",
       "      <td>0.245483</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.343314e+09</td>\n",
       "      <td>637.56</td>\n",
       "      <td>True</td>\n",
       "      <td>5.444797</td>\n",
       "      <td>2.801365</td>\n",
       "      <td>90.878884</td>\n",
       "      <td>5.589809</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>tm_3.0</td>\n",
       "      <td>30.325488</td>\n",
       "      <td>40.600313</td>\n",
       "      <td>-1.949219</td>\n",
       "      <td>2012-07-26T15:06:20.040000Z</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.343315e+09</td>\n",
       "      <td>1011.76</td>\n",
       "      <td>True</td>\n",
       "      <td>1.312401</td>\n",
       "      <td>1.086642</td>\n",
       "      <td>132.946490</td>\n",
       "      <td>2.321178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>tm_10.3</td>\n",
       "      <td>30.333789</td>\n",
       "      <td>40.713125</td>\n",
       "      <td>7.445312</td>\n",
       "      <td>2012-07-26 16:26:52.800000</td>\n",
       "      <td>0.239526</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.343320e+09</td>\n",
       "      <td>4832.72</td>\n",
       "      <td>True</td>\n",
       "      <td>2.652178</td>\n",
       "      <td>1.579905</td>\n",
       "      <td>93.702470</td>\n",
       "      <td>3.878422</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>tm_4.0</td>\n",
       "      <td>30.430000</td>\n",
       "      <td>40.720000</td>\n",
       "      <td>9.500000</td>\n",
       "      <td>2012-07-26 17:28:21.040000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.343324e+09</td>\n",
       "      <td>3688.24</td>\n",
       "      <td>True</td>\n",
       "      <td>3.942112</td>\n",
       "      <td>1.625908</td>\n",
       "      <td>72.443923</td>\n",
       "      <td>4.694059</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>67 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   event_id  longitude   latitude      depth                  origin_time        cc   tid  origin_time_sec  interevent_time_sec unique_event  hmax_unc  hmin_unc  az_hmax_unc  vmax_unc\n",
       "0    tm_5.0  30.260000  40.630000  -0.500000   2012-07-26 00:20:46.200000  0.333776   5.0     1.343262e+09                 0.00         True  4.138734  2.266640   145.441242  1.879851\n",
       "1    tm_2.0  30.320117  40.721875   9.476562   2012-07-26 00:58:11.080000  0.385646   2.0     1.343264e+09                 0.00         True  2.232884  2.065874  -173.163204  5.369457\n",
       "2    tm_0.1  30.322070  40.726875  10.695312   2012-07-26 00:58:16.360000  0.306255   0.0     1.343264e+09                 5.28         True  2.154916  1.692434   155.518831  2.975361\n",
       "3    tm_2.2  30.320117  40.721875   9.476562   2012-07-26 00:59:12.800000  0.236728   2.0     1.343264e+09                56.16         True  2.232884  2.065874  -173.163204  5.369457\n",
       "4    tm_0.2  30.322070  40.726875  10.695312   2012-07-26 01:02:53.120000  0.286318   0.0     1.343265e+09               220.32         True  2.154916  1.692434   155.518831  2.975361\n",
       "..      ...        ...        ...        ...                          ...       ...   ...              ...                  ...          ...       ...       ...          ...       ...\n",
       "62  tm_7.12  30.319141  40.716250   9.578125   2012-07-26 14:38:50.760000  0.250089   7.0     1.343314e+09                 0.16         True  7.482605  2.519412   121.069720  6.019241\n",
       "63   tm_8.8  30.350391  40.713750  10.390625   2012-07-26 14:49:28.320000  0.245483   8.0     1.343314e+09               637.56         True  5.444797  2.801365    90.878884  5.589809\n",
       "64   tm_3.0  30.325488  40.600313  -1.949219  2012-07-26T15:06:20.040000Z  1.000000   3.0     1.343315e+09              1011.76         True  1.312401  1.086642   132.946490  2.321178\n",
       "65  tm_10.3  30.333789  40.713125   7.445312   2012-07-26 16:26:52.800000  0.239526  10.0     1.343320e+09              4832.72         True  2.652178  1.579905    93.702470  3.878422\n",
       "66   tm_4.0  30.430000  40.720000   9.500000   2012-07-26 17:28:21.040000  1.000000   4.0     1.343324e+09              3688.24         True  3.942112  1.625908    72.443923  4.694059\n",
       "\n",
       "[67 rows x 14 columns]"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined_catalog"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this example, we see that two entries of the catalog end up pointing to the same event (see below):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>event_id</th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>depth</th>\n",
       "      <th>origin_time</th>\n",
       "      <th>cc</th>\n",
       "      <th>tid</th>\n",
       "      <th>origin_time_sec</th>\n",
       "      <th>interevent_time_sec</th>\n",
       "      <th>unique_event</th>\n",
       "      <th>hmax_unc</th>\n",
       "      <th>hmin_unc</th>\n",
       "      <th>az_hmax_unc</th>\n",
       "      <th>vmax_unc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>tm_2.34</td>\n",
       "      <td>30.318164</td>\n",
       "      <td>40.719375</td>\n",
       "      <td>9.679688</td>\n",
       "      <td>2012-07-26T13:48:32.800000Z</td>\n",
       "      <td>0.790949</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.343311e+09</td>\n",
       "      <td>0.16</td>\n",
       "      <td>True</td>\n",
       "      <td>2.066821</td>\n",
       "      <td>1.825771</td>\n",
       "      <td>-155.971604</td>\n",
       "      <td>3.545014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>tm_0.33</td>\n",
       "      <td>30.318164</td>\n",
       "      <td>40.721875</td>\n",
       "      <td>9.476562</td>\n",
       "      <td>2012-07-26T13:48:32.800000Z</td>\n",
       "      <td>0.190980</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.343311e+09</td>\n",
       "      <td>18.48</td>\n",
       "      <td>True</td>\n",
       "      <td>2.113576</td>\n",
       "      <td>1.811872</td>\n",
       "      <td>-161.635648</td>\n",
       "      <td>3.550606</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   event_id  longitude   latitude     depth                  origin_time        cc  tid  origin_time_sec  interevent_time_sec unique_event  hmax_unc  hmin_unc  az_hmax_unc  vmax_unc\n",
       "55  tm_2.34  30.318164  40.719375  9.679688  2012-07-26T13:48:32.800000Z  0.790949  2.0     1.343311e+09                 0.16         True  2.066821  1.825771  -155.971604  3.545014\n",
       "56  tm_0.33  30.318164  40.721875  9.476562  2012-07-26T13:48:32.800000Z  0.190980  0.0     1.343311e+09                18.48         True  2.113576  1.811872  -161.635648  3.550606"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined_catalog[\n",
    "    (combined_catalog[\"origin_time\"] >= pd.Timestamp(\"2012-07-26T13:40:00\"))\n",
    "    &\n",
    "    (combined_catalog[\"origin_time\"] <= pd.Timestamp(\"2012-07-26T13:50:00\"))\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**versus** (before relocating each event individually)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>depth</th>\n",
       "      <th>origin_time</th>\n",
       "      <th>cc</th>\n",
       "      <th>tid</th>\n",
       "      <th>origin_time_sec</th>\n",
       "      <th>interevent_time_sec</th>\n",
       "      <th>unique_event</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>event_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2.34</th>\n",
       "      <td>30.320117</td>\n",
       "      <td>40.721875</td>\n",
       "      <td>9.476562</td>\n",
       "      <td>2012-07-26 13:48:32.760</td>\n",
       "      <td>0.790949</td>\n",
       "      <td>2</td>\n",
       "      <td>1.343311e+09</td>\n",
       "      <td>0.16</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.33</th>\n",
       "      <td>30.322070</td>\n",
       "      <td>40.726875</td>\n",
       "      <td>10.695312</td>\n",
       "      <td>2012-07-26 13:48:51.400</td>\n",
       "      <td>0.190980</td>\n",
       "      <td>0</td>\n",
       "      <td>1.343311e+09</td>\n",
       "      <td>18.48</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          longitude   latitude      depth             origin_time        cc  tid  origin_time_sec  interevent_time_sec  unique_event\n",
       "event_id                                                                                                                            \n",
       "2.34      30.320117  40.721875   9.476562 2012-07-26 13:48:32.760  0.790949    2     1.343311e+09                 0.16          True\n",
       "0.33      30.322070  40.726875  10.695312 2012-07-26 13:48:51.400  0.190980    0     1.343311e+09                18.48          True"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "initial_catalog[\n",
    "    (initial_catalog[\"origin_time\"] >= pd.Timestamp(\"2012-07-26T13:40:00\"))\n",
    "    &\n",
    "    (initial_catalog[\"origin_time\"] <= pd.Timestamp(\"2012-07-26T13:50:00\"))\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is because, despite using the `use_apriori_picks=True`, the automatic picking ended up picking the event before `tm_0.33`. So, before I release a fix to this issue, we need to clean up these redundant catalog entries! And keep in mind that the initial template matching catalog might have better temporal resolution."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Last clean up"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------ Iteration 0 --------\n",
      "Removed 1 events. Examples:\n",
      "------ Iteration 1 --------\n",
      "Removed 0 events. Examples:\n"
     ]
    }
   ],
   "source": [
    "final_cat = combined_catalog.copy()\n",
    "final_cat[\"origin_time_sec\"] = (\n",
    "        final_cat[\"origin_time\"].values.astype(\"datetime64[ms]\").astype(\"float64\") / 1000.\n",
    "        )\n",
    "\n",
    "num_removed = -1\n",
    "iteration = 0\n",
    "while num_removed != 0:\n",
    "    print(f\"------ Iteration {iteration} --------\")\n",
    "    interevent_time_sec = (\n",
    "            final_cat[\"origin_time_sec\"].values[1:] - final_cat[\"origin_time_sec\"].values[:-1]\n",
    "            )\n",
    "    interevent_time_sec = np.hstack( (1000., interevent_time_sec) )\n",
    "    remove = np.zeros(len(final_cat), dtype=bool)\n",
    "    for i in np.where(interevent_time_sec < DT_CRITERION_SEC)[0]:\n",
    "        dist = BPMF.utils.two_point_epicentral_distance(\n",
    "                final_cat.iloc[i-1].longitude,\n",
    "                final_cat.iloc[i-1].latitude,\n",
    "                final_cat.iloc[i].longitude,\n",
    "                final_cat.iloc[i].latitude,\n",
    "                )\n",
    "        if dist < DISTANCE_CRITERION_KM:\n",
    "            if final_cat.iloc[i-1].hmax_unc < final_cat.iloc[i].hmax_unc:\n",
    "                remove[i] = True\n",
    "            else:\n",
    "                remove[i-1] = True\n",
    "    num_removed = np.sum(remove)\n",
    "    print(f\"Removed {num_removed} events. Examples:\")\n",
    "    if num_removed > 1:\n",
    "        removed_events = np.where(remove)[0]\n",
    "        print(final_cat[[\"origin_time\", \"event_id\", \"longitude\", \"latitude\"]].iloc[removed_events[0]])\n",
    "        if interevent_time_sec[removed_events[0]] < DT_CRITERION_SEC:\n",
    "            print(final_cat[[\"origin_time\", \"event_id\", \"longitude\",\n",
    "                \"latitude\"]].iloc[removed_events[0] - 1])\n",
    "        else:\n",
    "            print(final_cat[[\"origin_time\", \"event_id\", \"longitude\",\n",
    "                \"latitude\"]].iloc[removed_events[0] + 1])\n",
    "\n",
    "    final_cat = final_cat[~remove]\n",
    "    iteration += 1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>event_id</th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>depth</th>\n",
       "      <th>origin_time</th>\n",
       "      <th>cc</th>\n",
       "      <th>tid</th>\n",
       "      <th>hmax_unc</th>\n",
       "      <th>hmin_unc</th>\n",
       "      <th>az_hmax_unc</th>\n",
       "      <th>vmax_unc</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>event_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>tm_5.0</th>\n",
       "      <td>tm_5.0</td>\n",
       "      <td>30.260000</td>\n",
       "      <td>40.630000</td>\n",
       "      <td>-0.500000</td>\n",
       "      <td>2012-07-26 00:20:46.200000</td>\n",
       "      <td>0.333776</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.138734</td>\n",
       "      <td>2.266640</td>\n",
       "      <td>145.441242</td>\n",
       "      <td>1.879851</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tm_2.0</th>\n",
       "      <td>tm_2.0</td>\n",
       "      <td>30.320117</td>\n",
       "      <td>40.721875</td>\n",
       "      <td>9.476562</td>\n",
       "      <td>2012-07-26 00:58:11.080000</td>\n",
       "      <td>0.385646</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.232884</td>\n",
       "      <td>2.065874</td>\n",
       "      <td>-173.163204</td>\n",
       "      <td>5.369457</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tm_0.1</th>\n",
       "      <td>tm_0.1</td>\n",
       "      <td>30.322070</td>\n",
       "      <td>40.726875</td>\n",
       "      <td>10.695312</td>\n",
       "      <td>2012-07-26 00:58:16.360000</td>\n",
       "      <td>0.306255</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.154916</td>\n",
       "      <td>1.692434</td>\n",
       "      <td>155.518831</td>\n",
       "      <td>2.975361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tm_2.2</th>\n",
       "      <td>tm_2.2</td>\n",
       "      <td>30.320117</td>\n",
       "      <td>40.721875</td>\n",
       "      <td>9.476562</td>\n",
       "      <td>2012-07-26 00:59:12.800000</td>\n",
       "      <td>0.236728</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.232884</td>\n",
       "      <td>2.065874</td>\n",
       "      <td>-173.163204</td>\n",
       "      <td>5.369457</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tm_0.2</th>\n",
       "      <td>tm_0.2</td>\n",
       "      <td>30.322070</td>\n",
       "      <td>40.726875</td>\n",
       "      <td>10.695312</td>\n",
       "      <td>2012-07-26 01:02:53.120000</td>\n",
       "      <td>0.286318</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.154916</td>\n",
       "      <td>1.692434</td>\n",
       "      <td>155.518831</td>\n",
       "      <td>2.975361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tm_7.12</th>\n",
       "      <td>tm_7.12</td>\n",
       "      <td>30.319141</td>\n",
       "      <td>40.716250</td>\n",
       "      <td>9.578125</td>\n",
       "      <td>2012-07-26 14:38:50.760000</td>\n",
       "      <td>0.250089</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.482605</td>\n",
       "      <td>2.519412</td>\n",
       "      <td>121.069720</td>\n",
       "      <td>6.019241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tm_8.8</th>\n",
       "      <td>tm_8.8</td>\n",
       "      <td>30.350391</td>\n",
       "      <td>40.713750</td>\n",
       "      <td>10.390625</td>\n",
       "      <td>2012-07-26 14:49:28.320000</td>\n",
       "      <td>0.245483</td>\n",
       "      <td>8.0</td>\n",
       "      <td>5.444797</td>\n",
       "      <td>2.801365</td>\n",
       "      <td>90.878884</td>\n",
       "      <td>5.589809</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tm_3.0</th>\n",
       "      <td>tm_3.0</td>\n",
       "      <td>30.325488</td>\n",
       "      <td>40.600313</td>\n",
       "      <td>-1.949219</td>\n",
       "      <td>2012-07-26T15:06:20.040000Z</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.312401</td>\n",
       "      <td>1.086642</td>\n",
       "      <td>132.946490</td>\n",
       "      <td>2.321178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tm_10.3</th>\n",
       "      <td>tm_10.3</td>\n",
       "      <td>30.333789</td>\n",
       "      <td>40.713125</td>\n",
       "      <td>7.445312</td>\n",
       "      <td>2012-07-26 16:26:52.800000</td>\n",
       "      <td>0.239526</td>\n",
       "      <td>10.0</td>\n",
       "      <td>2.652178</td>\n",
       "      <td>1.579905</td>\n",
       "      <td>93.702470</td>\n",
       "      <td>3.878422</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tm_4.0</th>\n",
       "      <td>tm_4.0</td>\n",
       "      <td>30.430000</td>\n",
       "      <td>40.720000</td>\n",
       "      <td>9.500000</td>\n",
       "      <td>2012-07-26 17:28:21.040000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.942112</td>\n",
       "      <td>1.625908</td>\n",
       "      <td>72.443923</td>\n",
       "      <td>4.694059</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>66 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         event_id  longitude   latitude      depth                  origin_time        cc   tid  hmax_unc  hmin_unc  az_hmax_unc  vmax_unc\n",
       "event_id                                                                                                                                  \n",
       "tm_5.0     tm_5.0  30.260000  40.630000  -0.500000   2012-07-26 00:20:46.200000  0.333776   5.0  4.138734  2.266640   145.441242  1.879851\n",
       "tm_2.0     tm_2.0  30.320117  40.721875   9.476562   2012-07-26 00:58:11.080000  0.385646   2.0  2.232884  2.065874  -173.163204  5.369457\n",
       "tm_0.1     tm_0.1  30.322070  40.726875  10.695312   2012-07-26 00:58:16.360000  0.306255   0.0  2.154916  1.692434   155.518831  2.975361\n",
       "tm_2.2     tm_2.2  30.320117  40.721875   9.476562   2012-07-26 00:59:12.800000  0.236728   2.0  2.232884  2.065874  -173.163204  5.369457\n",
       "tm_0.2     tm_0.2  30.322070  40.726875  10.695312   2012-07-26 01:02:53.120000  0.286318   0.0  2.154916  1.692434   155.518831  2.975361\n",
       "...           ...        ...        ...        ...                          ...       ...   ...       ...       ...          ...       ...\n",
       "tm_7.12   tm_7.12  30.319141  40.716250   9.578125   2012-07-26 14:38:50.760000  0.250089   7.0  7.482605  2.519412   121.069720  6.019241\n",
       "tm_8.8     tm_8.8  30.350391  40.713750  10.390625   2012-07-26 14:49:28.320000  0.245483   8.0  5.444797  2.801365    90.878884  5.589809\n",
       "tm_3.0     tm_3.0  30.325488  40.600313  -1.949219  2012-07-26T15:06:20.040000Z  1.000000   3.0  1.312401  1.086642   132.946490  2.321178\n",
       "tm_10.3   tm_10.3  30.333789  40.713125   7.445312   2012-07-26 16:26:52.800000  0.239526  10.0  2.652178  1.579905    93.702470  3.878422\n",
       "tm_4.0     tm_4.0  30.430000  40.720000   9.500000   2012-07-26 17:28:21.040000  1.000000   4.0  3.942112  1.625908    72.443923  4.694059\n",
       "\n",
       "[66 rows x 11 columns]"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_cat.set_index(\"event_id\", drop=False, inplace=True)\n",
    "final_cat.drop(columns=[\"interevent_time_sec\", \"unique_event\", \"origin_time_sec\"], inplace=True)\n",
    "final_cat.sort_values(\"origin_time\", ascending=True, inplace=True)\n",
    "final_cat"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Save final catalog"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [],
   "source": [
    "# csv format\n",
    "final_cat.to_csv(\n",
    "    os.path.join(BPMF.cfg.OUTPUT_PATH, OUTPUT_CSV_FILENAME)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [],
   "source": [
    "# hdf5 / BPMF format\n",
    "for i in range(len(final_cat)):\n",
    "    evid = final_cat.iloc[i][\"event_id\"]\n",
    "    if evid[:2] == \"tm\":\n",
    "        events[evid.split(\"_\")[1]].write(\n",
    "            OUTPUT_DB_FILENAME,\n",
    "            db_path=BPMF.cfg.OUTPUT_PATH,\n",
    "            gid=evid\n",
    "        )\n",
    "    elif evid[:2] == \"bp\":\n",
    "        with h5.File(os.path.join(BPMF.cfg.OUTPUT_PATH, OUTPUT_DB_FILENAME), mode=\"a\") as fout:\n",
    "            with h5.File(os.path.join(BPMF.cfg.OUTPUT_PATH, BACKPROJ_DB_FILENAME), mode=\"r\") as fin:\n",
    "                # copy the corresponding hdf5 group into fout\n",
    "                fin.copy(fin[evid], fout)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n",
      "    ⠀⠀⠀⠀⠀⠀⢀⡤⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡀⠀⠀⠀⠀⠀⠀\n",
      "    ⠀⠀⠀⠀⠀⢀⡏⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⣀⠴⠋⠉⠉⡆⠀⠀⠀⠀⠀\n",
      "    ⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠈⠉⠉⠙⠓⠚⠁⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀\n",
      "    ⠀⠀⠀⠀⢀⠞⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣄⠀⠀⠀⠀\n",
      "    ⠀⠀⠀⠀⡞⠀⠀⠀⠀⠀⠶⠀⠀⠀⠀⠀⠀⠦⠀⠀⠀⠀⠀⠸⡆⠀⠀⠀\n",
      "    ⢠⣤⣶⣾⣧⣤⣤⣀⡀⠀⠀⠀⠀⠈⠀⠀⠀⢀⡤⠴⠶⠤⢤⡀⣧⣀⣀⠀\n",
      "    ⠻⠶⣾⠁⠀⠀⠀⠀⠙⣆⠀⠀⠀⠀⠀⠀⣰⠋⠀⠀⠀⠀⠀⢹⣿⣭⣽⠇\n",
      "    ⠀⠀⠙⠤⠴⢤⡤⠤⠤⠋⠉⠉⠉⠉⠉⠉⠉⠳⠖⠦⠤⠶⠦⠞⠁⠀⠀⠀\n",
      "                ALL DONE!⠀⠀⠀⠀\n",
      "    \n"
     ]
    }
   ],
   "source": [
    "# The final cat!\n",
    "BPMF.utils.donefun()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.10.4 ('hy7_py310')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "221f0e5b1b98151b07a79bf3b6d0c1d306576197d2c4531763770570a29e708e"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
