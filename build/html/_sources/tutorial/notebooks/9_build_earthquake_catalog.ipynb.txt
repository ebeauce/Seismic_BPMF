{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Build Earthquake Catalog\n",
    "\n",
    "In this final notebook, we read the matched-filter database, remove the multiple detections and write a clean earthquake catalog in a csv file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "n_CPUs = 12\n",
    "os.environ[\"OMP_NUM_THREADS\"] = str(n_CPUs)\n",
    "\n",
    "import BPMF\n",
    "import glob\n",
    "import h5py as h5\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import sys\n",
    "\n",
    "from BPMF.data_reader_examples import data_reader_mseed\n",
    "from tqdm import tqdm\n",
    "from time import time as give_time\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "# PROGRAM PARAMETERS\n",
    "NETWORK_FILENAME = \"network.csv\"\n",
    "TEMPLATE_DB = \"template_db\"\n",
    "MATCHED_FILTER_DB = \"matched_filter_db\"\n",
    "OUTPUT_CSV_FILENAME = \"final_catalog.csv\"\n",
    "OUTPUT_DB_FILENAME = \"final_catalog.h5\"\n",
    "BACKPROJ_DB_FILENAME = \"reloc_db.h5\"\n",
    "CHECK_SUMMARY_FILE = False\n",
    "PATH_MF = os.path.join(BPMF.cfg.OUTPUT_PATH, MATCHED_FILTER_DB)\n",
    "DATA_FOLDER = \"preprocessed_2_12\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# read network metadata\n",
    "net = BPMF.dataset.Network(NETWORK_FILENAME)\n",
    "net.read()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Read the detected events' metadata for each template"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Reading catalog: 100%|██████████| 13/13 [00:00<00:00, 17.22it/s]\n"
     ]
    }
   ],
   "source": [
    "# template filenames\n",
    "template_filenames = glob.glob(os.path.join(BPMF.cfg.OUTPUT_PATH, TEMPLATE_DB, \"template*\"))\n",
    "template_filenames.sort()\n",
    "\n",
    "# initialize the template group\n",
    "template_group = BPMF.dataset.TemplateGroup.read_from_files(template_filenames, net)\n",
    "template_group.read_catalog(\n",
    "    extra_attributes=[\"cc\"],\n",
    "    progress=True,\n",
    "    db_path=PATH_MF,\n",
    "    check_summary_file=CHECK_SUMMARY_FILE,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `BPMF.dataset.TemplateGroup` now has a `catalog` attribute, which is a `BPMF.dataset.Catalog` instance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<BPMF.dataset.Catalog at 0x7f7ef07cb460>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "template_group.catalog"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>depth</th>\n",
       "      <th>origin_time</th>\n",
       "      <th>cc</th>\n",
       "      <th>tid</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>event_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.0</th>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.720312</td>\n",
       "      <td>11.152344</td>\n",
       "      <td>2012-07-26 00:58:10.600</td>\n",
       "      <td>0.250974</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.0</th>\n",
       "      <td>30.311328</td>\n",
       "      <td>40.711250</td>\n",
       "      <td>13.234375</td>\n",
       "      <td>2012-07-26 00:58:10.720</td>\n",
       "      <td>0.375740</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.0</th>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.720312</td>\n",
       "      <td>9.628906</td>\n",
       "      <td>2012-07-26 00:58:10.920</td>\n",
       "      <td>0.384727</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.0</th>\n",
       "      <td>30.345020</td>\n",
       "      <td>40.760312</td>\n",
       "      <td>9.019531</td>\n",
       "      <td>2012-07-26 00:58:11.040</td>\n",
       "      <td>0.276359</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.0</th>\n",
       "      <td>30.325488</td>\n",
       "      <td>40.696562</td>\n",
       "      <td>-1.949219</td>\n",
       "      <td>2012-07-26 00:58:11.080</td>\n",
       "      <td>0.206369</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.41</th>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.720312</td>\n",
       "      <td>9.628906</td>\n",
       "      <td>2012-07-26 14:38:50.440</td>\n",
       "      <td>0.154461</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4.11</th>\n",
       "      <td>30.357227</td>\n",
       "      <td>40.718125</td>\n",
       "      <td>10.289062</td>\n",
       "      <td>2012-07-26 14:49:28.240</td>\n",
       "      <td>0.227342</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11.0</th>\n",
       "      <td>30.333301</td>\n",
       "      <td>40.691563</td>\n",
       "      <td>-0.222656</td>\n",
       "      <td>2012-07-26 15:06:22.200</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.3</th>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.719062</td>\n",
       "      <td>9.324219</td>\n",
       "      <td>2012-07-26 16:26:52.400</td>\n",
       "      <td>0.239987</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12.0</th>\n",
       "      <td>30.369922</td>\n",
       "      <td>40.716250</td>\n",
       "      <td>8.359375</td>\n",
       "      <td>2012-07-26 17:28:20.320</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>211 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          longitude   latitude      depth             origin_time        cc  \\\n",
       "event_id                                                                      \n",
       "0.0       30.345996  40.720312  11.152344 2012-07-26 00:58:10.600  0.250974   \n",
       "9.0       30.311328  40.711250  13.234375 2012-07-26 00:58:10.720  0.375740   \n",
       "10.0      30.345996  40.720312   9.628906 2012-07-26 00:58:10.920  0.384727   \n",
       "2.0       30.345020  40.760312   9.019531 2012-07-26 00:58:11.040  0.276359   \n",
       "5.0       30.325488  40.696562  -1.949219 2012-07-26 00:58:11.080  0.206369   \n",
       "...             ...        ...        ...                     ...       ...   \n",
       "10.41     30.345996  40.720312   9.628906 2012-07-26 14:38:50.440  0.154461   \n",
       "4.11      30.357227  40.718125  10.289062 2012-07-26 14:49:28.240  0.227342   \n",
       "11.0      30.333301  40.691563  -0.222656 2012-07-26 15:06:22.200  1.000000   \n",
       "6.3       30.345996  40.719062   9.324219 2012-07-26 16:26:52.400  0.239987   \n",
       "12.0      30.369922  40.716250   8.359375 2012-07-26 17:28:20.320  1.000000   \n",
       "\n",
       "          tid  \n",
       "event_id       \n",
       "0.0         0  \n",
       "9.0         9  \n",
       "10.0       10  \n",
       "2.0         2  \n",
       "5.0         5  \n",
       "...       ...  \n",
       "10.41      10  \n",
       "4.11        4  \n",
       "11.0       11  \n",
       "6.3         6  \n",
       "12.0       12  \n",
       "\n",
       "[211 rows x 6 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "template_group.catalog.catalog"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Remove the multiple detections\n",
    "\n",
    "Remove multiple detections with the `TemplateGroup.remove_multiples` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# DISTANCE_CRITERION_KM: Distance, in km, between two detected events (within uncertainties) below which \n",
    "#                        detected events are investigated for equality.\n",
    "DISTANCE_CRITERION_KM = 15.0\n",
    "# DT_CRITERION_SEC: Inter-event time, in seconds, between two detected events below which\n",
    "#                   detected events are investigated for redundancy.\n",
    "DT_CRITERION_SEC = 4.0\n",
    "# SIMILARITY_CRITERION: Inter-template correlation coefficient below which detected events are investigated for equality.\n",
    "SIMILARITY_CRITERION = 0.10\n",
    "# N_CLOSEST_STATIONS: When computing the inter-template correlation coefficient, use the N_CLOSEST_STATIONS closest stations\n",
    "#                     of a given pair of templates. This parameter is relevant for studies with large seismic networks.\n",
    "N_CLOSEST_STATIONS = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# we need to read the waveforms first\n",
    "template_group.read_waveforms()\n",
    "template_group.normalize(method=\"rms\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ebeauce/miniconda3/envs/hy7_py310/lib/python3.10/site-packages/BPMF/dataset.py:3616: RuntimeWarning: invalid value encountered in divide\n",
      "  unit_direction /= np.sqrt(np.sum(unit_direction**2, axis=1))[\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True False\n",
      "I'm here!\n",
      "Computing the similarity matrix...\n",
      "Computing the inter-template directional errors...\n",
      "What about True\n",
      "Searching for events detected by multiple templates\n",
      "All events occurring within 4.0 sec, with uncertainty ellipsoids closer than 15.0 km will and inter-template CC larger than 0.10 be considered the same\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Removing multiples: 100%|██████████| 211/211 [00:00<00:00, 2982.00it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.07s to flag the multiples\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "template_group.remove_multiples(\n",
    "    n_closest_stations=N_CLOSEST_STATIONS,\n",
    "    dt_criterion=DT_CRITERION_SEC,\n",
    "    distance_criterion=DISTANCE_CRITERION_KM,\n",
    "    similarity_criterion=SIMILARITY_CRITERION,\n",
    "    progress=True,\n",
    ")\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The catalog now has three new columns: `origin_time_sec` (a timestamp of `origin_time` in seconds), `interevent_time_sec` (template-wise computation), `unique_event`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>depth</th>\n",
       "      <th>origin_time</th>\n",
       "      <th>cc</th>\n",
       "      <th>tid</th>\n",
       "      <th>origin_time_sec</th>\n",
       "      <th>interevent_time_sec</th>\n",
       "      <th>unique_event</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>event_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.0</th>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.720312</td>\n",
       "      <td>11.152344</td>\n",
       "      <td>2012-07-26 00:58:10.600</td>\n",
       "      <td>0.250974</td>\n",
       "      <td>0</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>0.00</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.0</th>\n",
       "      <td>30.311328</td>\n",
       "      <td>40.711250</td>\n",
       "      <td>13.234375</td>\n",
       "      <td>2012-07-26 00:58:10.720</td>\n",
       "      <td>0.375740</td>\n",
       "      <td>9</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>0.12</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.0</th>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.720312</td>\n",
       "      <td>9.628906</td>\n",
       "      <td>2012-07-26 00:58:10.920</td>\n",
       "      <td>0.384727</td>\n",
       "      <td>10</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>0.20</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.0</th>\n",
       "      <td>30.345020</td>\n",
       "      <td>40.760312</td>\n",
       "      <td>9.019531</td>\n",
       "      <td>2012-07-26 00:58:11.040</td>\n",
       "      <td>0.276359</td>\n",
       "      <td>2</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>0.12</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.0</th>\n",
       "      <td>30.325488</td>\n",
       "      <td>40.696562</td>\n",
       "      <td>-1.949219</td>\n",
       "      <td>2012-07-26 00:58:11.080</td>\n",
       "      <td>0.206369</td>\n",
       "      <td>5</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>0.04</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.41</th>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.720312</td>\n",
       "      <td>9.628906</td>\n",
       "      <td>2012-07-26 14:38:50.440</td>\n",
       "      <td>0.154461</td>\n",
       "      <td>10</td>\n",
       "      <td>1.343314e+09</td>\n",
       "      <td>0.20</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4.11</th>\n",
       "      <td>30.357227</td>\n",
       "      <td>40.718125</td>\n",
       "      <td>10.289062</td>\n",
       "      <td>2012-07-26 14:49:28.240</td>\n",
       "      <td>0.227342</td>\n",
       "      <td>4</td>\n",
       "      <td>1.343314e+09</td>\n",
       "      <td>637.80</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11.0</th>\n",
       "      <td>30.333301</td>\n",
       "      <td>40.691563</td>\n",
       "      <td>-0.222656</td>\n",
       "      <td>2012-07-26 15:06:22.200</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>11</td>\n",
       "      <td>1.343315e+09</td>\n",
       "      <td>1013.96</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.3</th>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.719062</td>\n",
       "      <td>9.324219</td>\n",
       "      <td>2012-07-26 16:26:52.400</td>\n",
       "      <td>0.239987</td>\n",
       "      <td>6</td>\n",
       "      <td>1.343320e+09</td>\n",
       "      <td>4830.20</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12.0</th>\n",
       "      <td>30.369922</td>\n",
       "      <td>40.716250</td>\n",
       "      <td>8.359375</td>\n",
       "      <td>2012-07-26 17:28:20.320</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>12</td>\n",
       "      <td>1.343324e+09</td>\n",
       "      <td>3687.92</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>211 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          longitude   latitude      depth             origin_time        cc  \\\n",
       "event_id                                                                      \n",
       "0.0       30.345996  40.720312  11.152344 2012-07-26 00:58:10.600  0.250974   \n",
       "9.0       30.311328  40.711250  13.234375 2012-07-26 00:58:10.720  0.375740   \n",
       "10.0      30.345996  40.720312   9.628906 2012-07-26 00:58:10.920  0.384727   \n",
       "2.0       30.345020  40.760312   9.019531 2012-07-26 00:58:11.040  0.276359   \n",
       "5.0       30.325488  40.696562  -1.949219 2012-07-26 00:58:11.080  0.206369   \n",
       "...             ...        ...        ...                     ...       ...   \n",
       "10.41     30.345996  40.720312   9.628906 2012-07-26 14:38:50.440  0.154461   \n",
       "4.11      30.357227  40.718125  10.289062 2012-07-26 14:49:28.240  0.227342   \n",
       "11.0      30.333301  40.691563  -0.222656 2012-07-26 15:06:22.200  1.000000   \n",
       "6.3       30.345996  40.719062   9.324219 2012-07-26 16:26:52.400  0.239987   \n",
       "12.0      30.369922  40.716250   8.359375 2012-07-26 17:28:20.320  1.000000   \n",
       "\n",
       "          tid  origin_time_sec  interevent_time_sec  unique_event  \n",
       "event_id                                                           \n",
       "0.0         0     1.343264e+09                 0.00         False  \n",
       "9.0         9     1.343264e+09                 0.12         False  \n",
       "10.0       10     1.343264e+09                 0.20          True  \n",
       "2.0         2     1.343264e+09                 0.12         False  \n",
       "5.0         5     1.343264e+09                 0.04         False  \n",
       "...       ...              ...                  ...           ...  \n",
       "10.41      10     1.343314e+09                 0.20         False  \n",
       "4.11        4     1.343314e+09               637.80          True  \n",
       "11.0       11     1.343315e+09              1013.96          True  \n",
       "6.3         6     1.343320e+09              4830.20          True  \n",
       "12.0       12     1.343324e+09              3687.92          True  \n",
       "\n",
       "[211 rows x 9 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "template_group.catalog.catalog"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The final catalog is made of the unique events only."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "template_group.catalog.catalog = template_group.catalog.catalog[template_group.catalog.catalog[\"unique_event\"]]"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's add the location uncertainties from the template events."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_123188/1634894027.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  template_group.catalog.catalog.loc[selection, \"hmax_unc\"] = tp.hmax_unc\n",
      "/tmp/ipykernel_123188/1634894027.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  template_group.catalog.catalog.loc[selection, \"hmin_unc\"] = tp.hmin_unc\n",
      "/tmp/ipykernel_123188/1634894027.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  template_group.catalog.catalog.loc[selection, \"az_hmax_unc\"] = tp.az_hmax_unc\n",
      "/tmp/ipykernel_123188/1634894027.py:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  template_group.catalog.catalog.loc[selection, \"vmax_unc\"] = tp.vmax_unc\n"
     ]
    }
   ],
   "source": [
    "for tp in template_group.templates:\n",
    "    tid = tp.tid\n",
    "    selection = template_group.catalog.catalog[\"tid\"] == tid\n",
    "    template_group.catalog.catalog.loc[selection, \"hmax_unc\"] = tp.hmax_unc\n",
    "    template_group.catalog.catalog.loc[selection, \"hmin_unc\"] = tp.hmin_unc\n",
    "    template_group.catalog.catalog.loc[selection, \"az_hmax_unc\"] = tp.az_hmax_unc\n",
    "    template_group.catalog.catalog.loc[selection, \"vmax_unc\"] = tp.vmax_unc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 66 events in our template matching catalog!\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>depth</th>\n",
       "      <th>origin_time</th>\n",
       "      <th>cc</th>\n",
       "      <th>tid</th>\n",
       "      <th>origin_time_sec</th>\n",
       "      <th>interevent_time_sec</th>\n",
       "      <th>unique_event</th>\n",
       "      <th>hmax_unc</th>\n",
       "      <th>hmin_unc</th>\n",
       "      <th>az_hmax_unc</th>\n",
       "      <th>vmax_unc</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>event_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10.0</th>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.720312</td>\n",
       "      <td>9.628906</td>\n",
       "      <td>2012-07-26 00:58:10.920</td>\n",
       "      <td>0.384727</td>\n",
       "      <td>10</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>0.20</td>\n",
       "      <td>True</td>\n",
       "      <td>1.122424</td>\n",
       "      <td>0.620505</td>\n",
       "      <td>85.548864</td>\n",
       "      <td>1.797137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.1</th>\n",
       "      <td>30.311328</td>\n",
       "      <td>40.711250</td>\n",
       "      <td>13.234375</td>\n",
       "      <td>2012-07-26 00:58:16.280</td>\n",
       "      <td>0.346683</td>\n",
       "      <td>9</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>0.16</td>\n",
       "      <td>True</td>\n",
       "      <td>3.169682</td>\n",
       "      <td>1.731078</td>\n",
       "      <td>175.480728</td>\n",
       "      <td>4.493777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.2</th>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.720312</td>\n",
       "      <td>9.628906</td>\n",
       "      <td>2012-07-26 00:59:12.640</td>\n",
       "      <td>0.241314</td>\n",
       "      <td>10</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>56.00</td>\n",
       "      <td>True</td>\n",
       "      <td>1.122424</td>\n",
       "      <td>0.620505</td>\n",
       "      <td>85.548864</td>\n",
       "      <td>1.797137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.2</th>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.720312</td>\n",
       "      <td>11.152344</td>\n",
       "      <td>2012-07-26 01:02:52.880</td>\n",
       "      <td>0.283464</td>\n",
       "      <td>0</td>\n",
       "      <td>1.343265e+09</td>\n",
       "      <td>220.24</td>\n",
       "      <td>True</td>\n",
       "      <td>0.951192</td>\n",
       "      <td>0.630704</td>\n",
       "      <td>107.775447</td>\n",
       "      <td>1.465581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.4</th>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.720312</td>\n",
       "      <td>9.628906</td>\n",
       "      <td>2012-07-26 01:03:46.840</td>\n",
       "      <td>0.384105</td>\n",
       "      <td>10</td>\n",
       "      <td>1.343265e+09</td>\n",
       "      <td>0.20</td>\n",
       "      <td>True</td>\n",
       "      <td>1.122424</td>\n",
       "      <td>0.620505</td>\n",
       "      <td>85.548864</td>\n",
       "      <td>1.797137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3.11</th>\n",
       "      <td>30.303516</td>\n",
       "      <td>40.713750</td>\n",
       "      <td>13.234375</td>\n",
       "      <td>2012-07-26 14:38:50.240</td>\n",
       "      <td>0.244576</td>\n",
       "      <td>3</td>\n",
       "      <td>1.343314e+09</td>\n",
       "      <td>2515.96</td>\n",
       "      <td>True</td>\n",
       "      <td>6.265708</td>\n",
       "      <td>2.957693</td>\n",
       "      <td>117.664229</td>\n",
       "      <td>5.721089</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4.11</th>\n",
       "      <td>30.357227</td>\n",
       "      <td>40.718125</td>\n",
       "      <td>10.289062</td>\n",
       "      <td>2012-07-26 14:49:28.240</td>\n",
       "      <td>0.227342</td>\n",
       "      <td>4</td>\n",
       "      <td>1.343314e+09</td>\n",
       "      <td>637.80</td>\n",
       "      <td>True</td>\n",
       "      <td>2.477989</td>\n",
       "      <td>0.819309</td>\n",
       "      <td>96.228056</td>\n",
       "      <td>3.641937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11.0</th>\n",
       "      <td>30.333301</td>\n",
       "      <td>40.691563</td>\n",
       "      <td>-0.222656</td>\n",
       "      <td>2012-07-26 15:06:22.200</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>11</td>\n",
       "      <td>1.343315e+09</td>\n",
       "      <td>1013.96</td>\n",
       "      <td>True</td>\n",
       "      <td>6.860103</td>\n",
       "      <td>2.491943</td>\n",
       "      <td>-172.316425</td>\n",
       "      <td>3.876997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.3</th>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.719062</td>\n",
       "      <td>9.324219</td>\n",
       "      <td>2012-07-26 16:26:52.400</td>\n",
       "      <td>0.239987</td>\n",
       "      <td>6</td>\n",
       "      <td>1.343320e+09</td>\n",
       "      <td>4830.20</td>\n",
       "      <td>True</td>\n",
       "      <td>1.481483</td>\n",
       "      <td>0.810446</td>\n",
       "      <td>87.277455</td>\n",
       "      <td>2.363755</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12.0</th>\n",
       "      <td>30.369922</td>\n",
       "      <td>40.716250</td>\n",
       "      <td>8.359375</td>\n",
       "      <td>2012-07-26 17:28:20.320</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>12</td>\n",
       "      <td>1.343324e+09</td>\n",
       "      <td>3687.92</td>\n",
       "      <td>True</td>\n",
       "      <td>4.576132</td>\n",
       "      <td>1.807216</td>\n",
       "      <td>72.137583</td>\n",
       "      <td>7.835811</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>66 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          longitude   latitude      depth             origin_time        cc  \\\n",
       "event_id                                                                      \n",
       "10.0      30.345996  40.720312   9.628906 2012-07-26 00:58:10.920  0.384727   \n",
       "9.1       30.311328  40.711250  13.234375 2012-07-26 00:58:16.280  0.346683   \n",
       "10.2      30.345996  40.720312   9.628906 2012-07-26 00:59:12.640  0.241314   \n",
       "0.2       30.345996  40.720312  11.152344 2012-07-26 01:02:52.880  0.283464   \n",
       "10.4      30.345996  40.720312   9.628906 2012-07-26 01:03:46.840  0.384105   \n",
       "...             ...        ...        ...                     ...       ...   \n",
       "3.11      30.303516  40.713750  13.234375 2012-07-26 14:38:50.240  0.244576   \n",
       "4.11      30.357227  40.718125  10.289062 2012-07-26 14:49:28.240  0.227342   \n",
       "11.0      30.333301  40.691563  -0.222656 2012-07-26 15:06:22.200  1.000000   \n",
       "6.3       30.345996  40.719062   9.324219 2012-07-26 16:26:52.400  0.239987   \n",
       "12.0      30.369922  40.716250   8.359375 2012-07-26 17:28:20.320  1.000000   \n",
       "\n",
       "          tid  origin_time_sec  interevent_time_sec  unique_event  hmax_unc  \\\n",
       "event_id                                                                      \n",
       "10.0       10     1.343264e+09                 0.20          True  1.122424   \n",
       "9.1         9     1.343264e+09                 0.16          True  3.169682   \n",
       "10.2       10     1.343264e+09                56.00          True  1.122424   \n",
       "0.2         0     1.343265e+09               220.24          True  0.951192   \n",
       "10.4       10     1.343265e+09                 0.20          True  1.122424   \n",
       "...       ...              ...                  ...           ...       ...   \n",
       "3.11        3     1.343314e+09              2515.96          True  6.265708   \n",
       "4.11        4     1.343314e+09               637.80          True  2.477989   \n",
       "11.0       11     1.343315e+09              1013.96          True  6.860103   \n",
       "6.3         6     1.343320e+09              4830.20          True  1.481483   \n",
       "12.0       12     1.343324e+09              3687.92          True  4.576132   \n",
       "\n",
       "          hmin_unc  az_hmax_unc  vmax_unc  \n",
       "event_id                                   \n",
       "10.0      0.620505    85.548864  1.797137  \n",
       "9.1       1.731078   175.480728  4.493777  \n",
       "10.2      0.620505    85.548864  1.797137  \n",
       "0.2       0.630704   107.775447  1.465581  \n",
       "10.4      0.620505    85.548864  1.797137  \n",
       "...            ...          ...       ...  \n",
       "3.11      2.957693   117.664229  5.721089  \n",
       "4.11      0.819309    96.228056  3.641937  \n",
       "11.0      2.491943  -172.316425  3.876997  \n",
       "6.3       0.810446    87.277455  2.363755  \n",
       "12.0      1.807216    72.137583  7.835811  \n",
       "\n",
       "[66 rows x 13 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(f\"There are {len(template_group.catalog.catalog)} events in our template matching catalog!\")\n",
    "template_group.catalog.catalog"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's plot these events on a map. You will see that there are far fewer dots on the map than the total number of earthquakes in our catalog... This is because all newly detected events are attributed their template locations. Therefore, most events are plotted at the exact same location."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x1000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = template_group.catalog.plot_map(\n",
    "    figsize=(10, 10), network=net, s=50, markersize_station=50, lat_margin=0.02, plot_uncertainties=False\n",
    "    )\n",
    "ax = fig.get_axes()[0]\n",
    "ax.set_facecolor(\"dimgrey\")\n",
    "ax.patch.set_alpha(0.15)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bonus: Relocate each events\n",
    "\n",
    "In your workflow, you might be ok with the approximate locations of the template matching catalog. However, if you decide to keep refining the catalog, here are some suggestions to get started.\n",
    "\n",
    "One possibility to start refining the locations of all events is to re-run the same process as in notebook 6, namely `PhaseNet` and `NonLinLoc`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PhaseNet(\n",
       "  (inc): Conv1d(3, 8, kernel_size=(7,), stride=(1,), padding=same)\n",
       "  (in_bn): BatchNorm1d(8, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "  (down_branch): ModuleList(\n",
       "    (0): ModuleList(\n",
       "      (0): Conv1d(8, 8, kernel_size=(7,), stride=(1,), padding=same, bias=False)\n",
       "      (1): BatchNorm1d(8, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (2): Conv1d(8, 8, kernel_size=(7,), stride=(4,), padding=(3,), bias=False)\n",
       "      (3): BatchNorm1d(8, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    )\n",
       "    (1): ModuleList(\n",
       "      (0): Conv1d(8, 16, kernel_size=(7,), stride=(1,), padding=same, bias=False)\n",
       "      (1): BatchNorm1d(16, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (2): Conv1d(16, 16, kernel_size=(7,), stride=(4,), bias=False)\n",
       "      (3): BatchNorm1d(16, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    )\n",
       "    (2): ModuleList(\n",
       "      (0): Conv1d(16, 32, kernel_size=(7,), stride=(1,), padding=same, bias=False)\n",
       "      (1): BatchNorm1d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (2): Conv1d(32, 32, kernel_size=(7,), stride=(4,), bias=False)\n",
       "      (3): BatchNorm1d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    )\n",
       "    (3): ModuleList(\n",
       "      (0): Conv1d(32, 64, kernel_size=(7,), stride=(1,), padding=same, bias=False)\n",
       "      (1): BatchNorm1d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (2): Conv1d(64, 64, kernel_size=(7,), stride=(4,), bias=False)\n",
       "      (3): BatchNorm1d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    )\n",
       "    (4): ModuleList(\n",
       "      (0): Conv1d(64, 128, kernel_size=(7,), stride=(1,), padding=same, bias=False)\n",
       "      (1): BatchNorm1d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (2): None\n",
       "      (3): None\n",
       "    )\n",
       "  )\n",
       "  (up_branch): ModuleList(\n",
       "    (0): ModuleList(\n",
       "      (0): ConvTranspose1d(128, 64, kernel_size=(7,), stride=(4,), bias=False)\n",
       "      (1): BatchNorm1d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (2): Conv1d(128, 64, kernel_size=(7,), stride=(1,), padding=same, bias=False)\n",
       "      (3): BatchNorm1d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    )\n",
       "    (1): ModuleList(\n",
       "      (0): ConvTranspose1d(64, 32, kernel_size=(7,), stride=(4,), bias=False)\n",
       "      (1): BatchNorm1d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (2): Conv1d(64, 32, kernel_size=(7,), stride=(1,), padding=same, bias=False)\n",
       "      (3): BatchNorm1d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    )\n",
       "    (2): ModuleList(\n",
       "      (0): ConvTranspose1d(32, 16, kernel_size=(7,), stride=(4,), bias=False)\n",
       "      (1): BatchNorm1d(16, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (2): Conv1d(32, 16, kernel_size=(7,), stride=(1,), padding=same, bias=False)\n",
       "      (3): BatchNorm1d(16, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    )\n",
       "    (3): ModuleList(\n",
       "      (0): ConvTranspose1d(16, 8, kernel_size=(7,), stride=(4,), bias=False)\n",
       "      (1): BatchNorm1d(8, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (2): Conv1d(16, 8, kernel_size=(7,), stride=(1,), padding=same, bias=False)\n",
       "      (3): BatchNorm1d(8, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    )\n",
       "  )\n",
       "  (out): Conv1d(8, 3, kernel_size=(1,), stride=(1,), padding=same)\n",
       "  (softmax): Softmax(dim=1)\n",
       ")"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import seisbench.models as sbm\n",
    "\n",
    "ml_detector = sbm.PhaseNet.from_pretrained(\"original\")\n",
    "ml_detector.eval()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# PhaseNet picking parameters\n",
    "\n",
    "# PhaseNet was trained for 100Hz data. Even if we saw that running PhaseNet on 25Hz data\n",
    "# was good for backprojection, here, picking benefits from running PhaseNet on 100Hz data.\n",
    "# Thus, we will upsample the waveforms before running PhaseNet.\n",
    "PHASENET_SAMPLING_RATE_HZ = 100.\n",
    "UPSAMPLING_BEFORE_PN_RELOCATION = int(PHASENET_SAMPLING_RATE_HZ/BPMF.cfg.SAMPLING_RATE_HZ)\n",
    "DOWNSAMPLING_BEFORE_PN_RELOCATION = 1\n",
    "\n",
    "# DURATION_SEC: the duration, in seconds, of the data stream starting at the detection time\n",
    "#               defined by Event.origin_time. This data stream is used for picking the P/S waves.\n",
    "DURATION_SEC = 60.0\n",
    "# THRESHOLD_P: probability of P-wave arrival above which we declare a pick. If several picks are\n",
    "#              declared during the DURATION_SEC data stream, we only keep the best one. We can\n",
    "#              afford using a low probability threshold since we already know with some confidence\n",
    "#              that an earthquake is in the data stream.\n",
    "THRESHOLD_P = 0.10\n",
    "# THRESHOLD_S: probability of S-wave arrival above which we declare a pick.\n",
    "THRESHOLD_S = 0.10\n",
    "# DATA_FOLDER: name of the folder where the waveforms we want to use for picking are stored\n",
    "DATA_FOLDER = \"preprocessed_2_12\"\n",
    "# COMPONENT_ALIASES: A dictionary that defines the possible channel names to search for\n",
    "#                    for example, the seismometer might not be oriented and the horizontal channels\n",
    "#                    might be named 1 and 2, in which case we arbitrarily decide to take 1 as the \"N\" channel\n",
    "#                    and 2 as the \"E\" channel. This doesn't matter for picking P- and S-wave arrival times.\n",
    "COMPONENT_ALIASES = {\"N\": [\"N\", \"1\"], \"E\": [\"E\", \"2\"], \"Z\": [\"Z\"]}\n",
    "# PHASE_ON_COMP: dictionary defining which moveout we use to extract the waveform\n",
    "PHASE_ON_COMP = {\"N\": \"S\", \"1\": \"S\", \"E\": \"S\", \"2\": \"S\", \"Z\": \"P\"}\n",
    "# USE_APRIORI_PICKS: boolean. This option is IMPORTANT when running BPMF in HIGH SEISMICITY CONTEXTS, like\n",
    "#                   during the aftershock sequence of a large earthquake. If there are many events happening\n",
    "#                   close to each other in time, we need to guide PhaseNet to pick the right set of picks.\n",
    "#                   For that, we use the predicted P- and S-wave times from backprojection to add extra weight to\n",
    "#                   the picks closer to those times and make it more likely to identify them as the \"best\" picks.\n",
    "#                   WARNING: If there are truly many events, even this trick might fail. It's because \"phase association\"\n",
    "#                   is an intrinsically hard problem in this case, and the picking might be hard to do automatically.\n",
    "USE_APRIORI_PICKS = True\n",
    "\n",
    "# MAX_HORIZONTAL_UNC_KM: Horizontal location uncertainty, in km, above which we keep the template location\n",
    "MAX_HORIZONTAL_UNC_KM = 10.\n",
    "\n",
    "# location parameters\n",
    "\n",
    "LOCATION_ROUTINE = \"NLLoc\"\n",
    "# NLLOC_METHOD: string that defines what loss function is used by NLLoc, see http://alomax.free.fr/nlloc/ for more info.\n",
    "#               Using some flavor of 'EDT' is important to obtain robust locations that are not sensitive to pick outliers.\n",
    "NLLOC_METHOD = \"EDT\"\n",
    "# MINIMUM_NUM_STATIONS_W_PICKS: minimum number of stations with picks to even try relocation.\n",
    "MINIMUM_NUM_STATIONS_W_PICKS = 3\n",
    "# we set a maximum tolerable difference, in percentage, between the picked time and the predicted travel time\n",
    "MAX_TIME_DIFFERENT_PICKS_PREDICTED_PERCENT = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Relocating each individual event: 100%|██████████| 66/66 [00:45<00:00,  1.44it/s]\n"
     ]
    }
   ],
   "source": [
    "events = {}\n",
    "for i in tqdm(range(len(template_group.catalog.catalog)), desc=\"Relocating each individual event\"):\n",
    "    row = template_group.catalog.catalog.iloc[i]\n",
    "    tid, evidx = row.name.split(\".\")\n",
    "    # get the template instance from template_group\n",
    "    template = template_group.templates[template_group.tindexes.loc[int(tid)]]\n",
    "    # this is the filename of the database where template tid's detected events were stored\n",
    "    detection_db_filename = f\"detections_template{tid}.h5\"\n",
    "    db_path = os.path.join(BPMF.cfg.OUTPUT_PATH, MATCHED_FILTER_DB)\n",
    "    with h5.File(os.path.join(db_path, detection_db_filename), mode=\"r\") as fdet:\n",
    "        keys = list(fdet.keys())\n",
    "        event = BPMF.dataset.Event.read_from_file(\n",
    "            hdf5_file=fdet[keys[int(evidx)]], data_reader=data_reader_mseed\n",
    "            )\n",
    "    # # attach data reader this way (note: conflict with data_reader argument in phasenet's wrapper module)\n",
    "    # event.data_reader = data_reader_mseed\n",
    "    # pick P-/S-wave arrivals\n",
    "    event.pick_PS_phases(\n",
    "        DURATION_SEC,\n",
    "        phase_on_comp=PHASE_ON_COMP,\n",
    "        threshold_P=THRESHOLD_P,\n",
    "        threshold_S=THRESHOLD_S,\n",
    "        component_aliases=COMPONENT_ALIASES,\n",
    "        data_folder=DATA_FOLDER,\n",
    "        upsampling=UPSAMPLING_BEFORE_PN_RELOCATION,\n",
    "        downsampling=DOWNSAMPLING_BEFORE_PN_RELOCATION,\n",
    "        use_apriori_picks=USE_APRIORI_PICKS,\n",
    "        ml_model=ml_detector\n",
    "    )\n",
    "    \n",
    "    if len(event.picks.dropna(how=\"all\")) >= MINIMUM_NUM_STATIONS_W_PICKS:\n",
    "        # first relocation, insensitive to outliers\n",
    "        event.relocate(\n",
    "            stations=net.stations, routine=LOCATION_ROUTINE, method=NLLOC_METHOD,\n",
    "        )    \n",
    "    if \"NLLoc_reloc\" in event.aux_data:\n",
    "        # this variable was inserted into ev.aux_data if NLLoc successfully located the event\n",
    "        # use predicted times to remove outlier picks\n",
    "        event.remove_outlier_picks(max_diff_percent=MAX_TIME_DIFFERENT_PICKS_PREDICTED_PERCENT)\n",
    "        if len(event.picks.dropna(how=\"all\")) >= MINIMUM_NUM_STATIONS_W_PICKS:\n",
    "            # first relocation, insensitive to outliers\n",
    "            event.relocate(\n",
    "                stations=net.stations, routine=LOCATION_ROUTINE, method=NLLOC_METHOD,\n",
    "            )\n",
    "        else:\n",
    "            del event.aux_data[\"NLLoc_reloc\"]\n",
    "    events[row.name] = event\n",
    "    if (\"NLLoc_reloc\" in event.aux_data) and (event.hmax_unc) < MAX_HORIZONTAL_UNC_KM:\n",
    "        template_group.catalog.catalog.loc[row.name, \"longitude\"] = event.longitude\n",
    "        template_group.catalog.catalog.loc[row.name, \"latitude\"] = event.latitude\n",
    "        template_group.catalog.catalog.loc[row.name, \"depth\"] = event.depth"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1000x1000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = template_group.catalog.plot_map(\n",
    "    figsize=(10, 10), network=net, s=50, markersize_station=50, lat_margin=0.02, plot_uncertainties=False\n",
    "    )\n",
    "ax = fig.get_axes()[0]\n",
    "ax.set_facecolor(\"dimgrey\")\n",
    "ax.patch.set_alpha(0.15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>depth</th>\n",
       "      <th>origin_time</th>\n",
       "      <th>cc</th>\n",
       "      <th>tid</th>\n",
       "      <th>origin_time_sec</th>\n",
       "      <th>interevent_time_sec</th>\n",
       "      <th>unique_event</th>\n",
       "      <th>hmax_unc</th>\n",
       "      <th>hmin_unc</th>\n",
       "      <th>az_hmax_unc</th>\n",
       "      <th>vmax_unc</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>event_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10.0</th>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.720312</td>\n",
       "      <td>9.628906</td>\n",
       "      <td>2012-07-26 00:58:10.920</td>\n",
       "      <td>0.384727</td>\n",
       "      <td>10</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>0.20</td>\n",
       "      <td>True</td>\n",
       "      <td>1.122424</td>\n",
       "      <td>0.620505</td>\n",
       "      <td>85.548864</td>\n",
       "      <td>1.797137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.1</th>\n",
       "      <td>30.311328</td>\n",
       "      <td>40.711250</td>\n",
       "      <td>13.234375</td>\n",
       "      <td>2012-07-26 00:58:16.280</td>\n",
       "      <td>0.346683</td>\n",
       "      <td>9</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>0.16</td>\n",
       "      <td>True</td>\n",
       "      <td>3.169682</td>\n",
       "      <td>1.731078</td>\n",
       "      <td>175.480728</td>\n",
       "      <td>4.493777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.2</th>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.720312</td>\n",
       "      <td>9.628906</td>\n",
       "      <td>2012-07-26 00:59:12.640</td>\n",
       "      <td>0.241314</td>\n",
       "      <td>10</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>56.00</td>\n",
       "      <td>True</td>\n",
       "      <td>1.122424</td>\n",
       "      <td>0.620505</td>\n",
       "      <td>85.548864</td>\n",
       "      <td>1.797137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.2</th>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.720312</td>\n",
       "      <td>11.152344</td>\n",
       "      <td>2012-07-26 01:02:52.880</td>\n",
       "      <td>0.283464</td>\n",
       "      <td>0</td>\n",
       "      <td>1.343265e+09</td>\n",
       "      <td>220.24</td>\n",
       "      <td>True</td>\n",
       "      <td>0.951192</td>\n",
       "      <td>0.630704</td>\n",
       "      <td>107.775447</td>\n",
       "      <td>1.465581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.4</th>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.720312</td>\n",
       "      <td>9.628906</td>\n",
       "      <td>2012-07-26 01:03:46.840</td>\n",
       "      <td>0.384105</td>\n",
       "      <td>10</td>\n",
       "      <td>1.343265e+09</td>\n",
       "      <td>0.20</td>\n",
       "      <td>True</td>\n",
       "      <td>1.122424</td>\n",
       "      <td>0.620505</td>\n",
       "      <td>85.548864</td>\n",
       "      <td>1.797137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3.11</th>\n",
       "      <td>30.303516</td>\n",
       "      <td>40.713750</td>\n",
       "      <td>13.234375</td>\n",
       "      <td>2012-07-26 14:38:50.240</td>\n",
       "      <td>0.244576</td>\n",
       "      <td>3</td>\n",
       "      <td>1.343314e+09</td>\n",
       "      <td>2515.96</td>\n",
       "      <td>True</td>\n",
       "      <td>6.265708</td>\n",
       "      <td>2.957693</td>\n",
       "      <td>117.664229</td>\n",
       "      <td>5.721089</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4.11</th>\n",
       "      <td>30.357227</td>\n",
       "      <td>40.718125</td>\n",
       "      <td>10.289062</td>\n",
       "      <td>2012-07-26 14:49:28.240</td>\n",
       "      <td>0.227342</td>\n",
       "      <td>4</td>\n",
       "      <td>1.343314e+09</td>\n",
       "      <td>637.80</td>\n",
       "      <td>True</td>\n",
       "      <td>2.477989</td>\n",
       "      <td>0.819309</td>\n",
       "      <td>96.228056</td>\n",
       "      <td>3.641937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11.0</th>\n",
       "      <td>30.327197</td>\n",
       "      <td>40.601719</td>\n",
       "      <td>-1.974609</td>\n",
       "      <td>2012-07-26 15:06:22.200</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>11</td>\n",
       "      <td>1.343315e+09</td>\n",
       "      <td>1013.96</td>\n",
       "      <td>True</td>\n",
       "      <td>6.860103</td>\n",
       "      <td>2.491943</td>\n",
       "      <td>-172.316425</td>\n",
       "      <td>3.876997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.3</th>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.719062</td>\n",
       "      <td>9.324219</td>\n",
       "      <td>2012-07-26 16:26:52.400</td>\n",
       "      <td>0.239987</td>\n",
       "      <td>6</td>\n",
       "      <td>1.343320e+09</td>\n",
       "      <td>4830.20</td>\n",
       "      <td>True</td>\n",
       "      <td>1.481483</td>\n",
       "      <td>0.810446</td>\n",
       "      <td>87.277455</td>\n",
       "      <td>2.363755</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12.0</th>\n",
       "      <td>30.449023</td>\n",
       "      <td>40.721875</td>\n",
       "      <td>8.460938</td>\n",
       "      <td>2012-07-26 17:28:20.320</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>12</td>\n",
       "      <td>1.343324e+09</td>\n",
       "      <td>3687.92</td>\n",
       "      <td>True</td>\n",
       "      <td>4.576132</td>\n",
       "      <td>1.807216</td>\n",
       "      <td>72.137583</td>\n",
       "      <td>7.835811</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>66 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          longitude   latitude      depth             origin_time        cc  \\\n",
       "event_id                                                                      \n",
       "10.0      30.345996  40.720312   9.628906 2012-07-26 00:58:10.920  0.384727   \n",
       "9.1       30.311328  40.711250  13.234375 2012-07-26 00:58:16.280  0.346683   \n",
       "10.2      30.345996  40.720312   9.628906 2012-07-26 00:59:12.640  0.241314   \n",
       "0.2       30.345996  40.720312  11.152344 2012-07-26 01:02:52.880  0.283464   \n",
       "10.4      30.345996  40.720312   9.628906 2012-07-26 01:03:46.840  0.384105   \n",
       "...             ...        ...        ...                     ...       ...   \n",
       "3.11      30.303516  40.713750  13.234375 2012-07-26 14:38:50.240  0.244576   \n",
       "4.11      30.357227  40.718125  10.289062 2012-07-26 14:49:28.240  0.227342   \n",
       "11.0      30.327197  40.601719  -1.974609 2012-07-26 15:06:22.200  1.000000   \n",
       "6.3       30.345996  40.719062   9.324219 2012-07-26 16:26:52.400  0.239987   \n",
       "12.0      30.449023  40.721875   8.460938 2012-07-26 17:28:20.320  1.000000   \n",
       "\n",
       "          tid  origin_time_sec  interevent_time_sec  unique_event  hmax_unc  \\\n",
       "event_id                                                                      \n",
       "10.0       10     1.343264e+09                 0.20          True  1.122424   \n",
       "9.1         9     1.343264e+09                 0.16          True  3.169682   \n",
       "10.2       10     1.343264e+09                56.00          True  1.122424   \n",
       "0.2         0     1.343265e+09               220.24          True  0.951192   \n",
       "10.4       10     1.343265e+09                 0.20          True  1.122424   \n",
       "...       ...              ...                  ...           ...       ...   \n",
       "3.11        3     1.343314e+09              2515.96          True  6.265708   \n",
       "4.11        4     1.343314e+09               637.80          True  2.477989   \n",
       "11.0       11     1.343315e+09              1013.96          True  6.860103   \n",
       "6.3         6     1.343320e+09              4830.20          True  1.481483   \n",
       "12.0       12     1.343324e+09              3687.92          True  4.576132   \n",
       "\n",
       "          hmin_unc  az_hmax_unc  vmax_unc  \n",
       "event_id                                   \n",
       "10.0      0.620505    85.548864  1.797137  \n",
       "9.1       1.731078   175.480728  4.493777  \n",
       "10.2      0.620505    85.548864  1.797137  \n",
       "0.2       0.630704   107.775447  1.465581  \n",
       "10.4      0.620505    85.548864  1.797137  \n",
       "...            ...          ...       ...  \n",
       "3.11      2.957693   117.664229  5.721089  \n",
       "4.11      0.819309    96.228056  3.641937  \n",
       "11.0      2.491943  -172.316425  3.876997  \n",
       "6.3       0.810446    87.277455  2.363755  \n",
       "12.0      1.807216    72.137583  7.835811  \n",
       "\n",
       "[66 rows x 13 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "template_group.catalog.catalog"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Assemble the backprojection and template matching catalog \n",
    "\n",
    "When selecting the template events from the backprojection catalog, we imposed some quality criteria that might have thrown out some events that we still want in our final catalog. Here, we make a simple comparison of the backprojection and template matching catalogs to find these missing events and add them to the final catalog."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "BACKPROJECTION_CATALOG_FILENAME = \"backprojection_catalog.csv\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>event_id</th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>depth</th>\n",
       "      <th>origin_time</th>\n",
       "      <th>cc</th>\n",
       "      <th>tid</th>\n",
       "      <th>origin_time_sec</th>\n",
       "      <th>interevent_time_sec</th>\n",
       "      <th>unique_event</th>\n",
       "      <th>hmax_unc</th>\n",
       "      <th>hmin_unc</th>\n",
       "      <th>az_hmax_unc</th>\n",
       "      <th>vmax_unc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tm_10.0</td>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.720312</td>\n",
       "      <td>9.628906</td>\n",
       "      <td>2012-07-26 00:58:10.920</td>\n",
       "      <td>0.384727</td>\n",
       "      <td>10</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>0.20</td>\n",
       "      <td>True</td>\n",
       "      <td>1.122424</td>\n",
       "      <td>0.620505</td>\n",
       "      <td>85.548864</td>\n",
       "      <td>1.797137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tm_9.1</td>\n",
       "      <td>30.311328</td>\n",
       "      <td>40.711250</td>\n",
       "      <td>13.234375</td>\n",
       "      <td>2012-07-26 00:58:16.280</td>\n",
       "      <td>0.346683</td>\n",
       "      <td>9</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>0.16</td>\n",
       "      <td>True</td>\n",
       "      <td>3.169682</td>\n",
       "      <td>1.731078</td>\n",
       "      <td>175.480728</td>\n",
       "      <td>4.493777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tm_10.2</td>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.720312</td>\n",
       "      <td>9.628906</td>\n",
       "      <td>2012-07-26 00:59:12.640</td>\n",
       "      <td>0.241314</td>\n",
       "      <td>10</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>56.00</td>\n",
       "      <td>True</td>\n",
       "      <td>1.122424</td>\n",
       "      <td>0.620505</td>\n",
       "      <td>85.548864</td>\n",
       "      <td>1.797137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tm_0.2</td>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.720312</td>\n",
       "      <td>11.152344</td>\n",
       "      <td>2012-07-26 01:02:52.880</td>\n",
       "      <td>0.283464</td>\n",
       "      <td>0</td>\n",
       "      <td>1.343265e+09</td>\n",
       "      <td>220.24</td>\n",
       "      <td>True</td>\n",
       "      <td>0.951192</td>\n",
       "      <td>0.630704</td>\n",
       "      <td>107.775447</td>\n",
       "      <td>1.465581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tm_10.4</td>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.720312</td>\n",
       "      <td>9.628906</td>\n",
       "      <td>2012-07-26 01:03:46.840</td>\n",
       "      <td>0.384105</td>\n",
       "      <td>10</td>\n",
       "      <td>1.343265e+09</td>\n",
       "      <td>0.20</td>\n",
       "      <td>True</td>\n",
       "      <td>1.122424</td>\n",
       "      <td>0.620505</td>\n",
       "      <td>85.548864</td>\n",
       "      <td>1.797137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>tm_3.11</td>\n",
       "      <td>30.303516</td>\n",
       "      <td>40.713750</td>\n",
       "      <td>13.234375</td>\n",
       "      <td>2012-07-26 14:38:50.240</td>\n",
       "      <td>0.244576</td>\n",
       "      <td>3</td>\n",
       "      <td>1.343314e+09</td>\n",
       "      <td>2515.96</td>\n",
       "      <td>True</td>\n",
       "      <td>6.265708</td>\n",
       "      <td>2.957693</td>\n",
       "      <td>117.664229</td>\n",
       "      <td>5.721089</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>tm_4.11</td>\n",
       "      <td>30.357227</td>\n",
       "      <td>40.718125</td>\n",
       "      <td>10.289062</td>\n",
       "      <td>2012-07-26 14:49:28.240</td>\n",
       "      <td>0.227342</td>\n",
       "      <td>4</td>\n",
       "      <td>1.343314e+09</td>\n",
       "      <td>637.80</td>\n",
       "      <td>True</td>\n",
       "      <td>2.477989</td>\n",
       "      <td>0.819309</td>\n",
       "      <td>96.228056</td>\n",
       "      <td>3.641937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>tm_11.0</td>\n",
       "      <td>30.327197</td>\n",
       "      <td>40.601719</td>\n",
       "      <td>-1.974609</td>\n",
       "      <td>2012-07-26 15:06:22.200</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>11</td>\n",
       "      <td>1.343315e+09</td>\n",
       "      <td>1013.96</td>\n",
       "      <td>True</td>\n",
       "      <td>6.860103</td>\n",
       "      <td>2.491943</td>\n",
       "      <td>-172.316425</td>\n",
       "      <td>3.876997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>tm_6.3</td>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.719062</td>\n",
       "      <td>9.324219</td>\n",
       "      <td>2012-07-26 16:26:52.400</td>\n",
       "      <td>0.239987</td>\n",
       "      <td>6</td>\n",
       "      <td>1.343320e+09</td>\n",
       "      <td>4830.20</td>\n",
       "      <td>True</td>\n",
       "      <td>1.481483</td>\n",
       "      <td>0.810446</td>\n",
       "      <td>87.277455</td>\n",
       "      <td>2.363755</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>tm_12.0</td>\n",
       "      <td>30.449023</td>\n",
       "      <td>40.721875</td>\n",
       "      <td>8.460938</td>\n",
       "      <td>2012-07-26 17:28:20.320</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>12</td>\n",
       "      <td>1.343324e+09</td>\n",
       "      <td>3687.92</td>\n",
       "      <td>True</td>\n",
       "      <td>4.576132</td>\n",
       "      <td>1.807216</td>\n",
       "      <td>72.137583</td>\n",
       "      <td>7.835811</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>66 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   event_id  longitude   latitude      depth             origin_time  \\\n",
       "0   tm_10.0  30.345996  40.720312   9.628906 2012-07-26 00:58:10.920   \n",
       "1    tm_9.1  30.311328  40.711250  13.234375 2012-07-26 00:58:16.280   \n",
       "2   tm_10.2  30.345996  40.720312   9.628906 2012-07-26 00:59:12.640   \n",
       "3    tm_0.2  30.345996  40.720312  11.152344 2012-07-26 01:02:52.880   \n",
       "4   tm_10.4  30.345996  40.720312   9.628906 2012-07-26 01:03:46.840   \n",
       "..      ...        ...        ...        ...                     ...   \n",
       "61  tm_3.11  30.303516  40.713750  13.234375 2012-07-26 14:38:50.240   \n",
       "62  tm_4.11  30.357227  40.718125  10.289062 2012-07-26 14:49:28.240   \n",
       "63  tm_11.0  30.327197  40.601719  -1.974609 2012-07-26 15:06:22.200   \n",
       "64   tm_6.3  30.345996  40.719062   9.324219 2012-07-26 16:26:52.400   \n",
       "65  tm_12.0  30.449023  40.721875   8.460938 2012-07-26 17:28:20.320   \n",
       "\n",
       "          cc  tid  origin_time_sec  interevent_time_sec  unique_event  \\\n",
       "0   0.384727   10     1.343264e+09                 0.20          True   \n",
       "1   0.346683    9     1.343264e+09                 0.16          True   \n",
       "2   0.241314   10     1.343264e+09                56.00          True   \n",
       "3   0.283464    0     1.343265e+09               220.24          True   \n",
       "4   0.384105   10     1.343265e+09                 0.20          True   \n",
       "..       ...  ...              ...                  ...           ...   \n",
       "61  0.244576    3     1.343314e+09              2515.96          True   \n",
       "62  0.227342    4     1.343314e+09               637.80          True   \n",
       "63  1.000000   11     1.343315e+09              1013.96          True   \n",
       "64  0.239987    6     1.343320e+09              4830.20          True   \n",
       "65  1.000000   12     1.343324e+09              3687.92          True   \n",
       "\n",
       "    hmax_unc  hmin_unc  az_hmax_unc  vmax_unc  \n",
       "0   1.122424  0.620505    85.548864  1.797137  \n",
       "1   3.169682  1.731078   175.480728  4.493777  \n",
       "2   1.122424  0.620505    85.548864  1.797137  \n",
       "3   0.951192  0.630704   107.775447  1.465581  \n",
       "4   1.122424  0.620505    85.548864  1.797137  \n",
       "..       ...       ...          ...       ...  \n",
       "61  6.265708  2.957693   117.664229  5.721089  \n",
       "62  2.477989  0.819309    96.228056  3.641937  \n",
       "63  6.860103  2.491943  -172.316425  3.876997  \n",
       "64  1.481483  0.810446    87.277455  2.363755  \n",
       "65  4.576132  1.807216    72.137583  7.835811  \n",
       "\n",
       "[66 rows x 14 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tm_catalog = template_group.catalog.catalog.copy()\n",
    "tm_catalog.reset_index(inplace=True)\n",
    "for i in range(len(tm_catalog)):\n",
    "    tm_catalog.loc[i, \"event_id\"] = f\"tm_{tm_catalog.loc[i, 'event_id']}\"\n",
    "tm_catalog"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>depth</th>\n",
       "      <th>origin_time</th>\n",
       "      <th>hmax_unc</th>\n",
       "      <th>hmin_unc</th>\n",
       "      <th>az_hmax_unc</th>\n",
       "      <th>vmax_unc</th>\n",
       "      <th>event_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.720312</td>\n",
       "      <td>11.152344</td>\n",
       "      <td>2012-07-26 01:10:21.760</td>\n",
       "      <td>2.279654</td>\n",
       "      <td>1.184107</td>\n",
       "      <td>101.432332</td>\n",
       "      <td>2.431673</td>\n",
       "      <td>bp_0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>30.345508</td>\n",
       "      <td>40.726875</td>\n",
       "      <td>11.914062</td>\n",
       "      <td>2012-07-26 01:15:53.520</td>\n",
       "      <td>4.970115</td>\n",
       "      <td>1.854803</td>\n",
       "      <td>107.194478</td>\n",
       "      <td>5.657299</td>\n",
       "      <td>bp_1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>30.230000</td>\n",
       "      <td>40.630000</td>\n",
       "      <td>-0.500000</td>\n",
       "      <td>2012-07-26 01:57:56.160</td>\n",
       "      <td>8.657532</td>\n",
       "      <td>0.863562</td>\n",
       "      <td>58.590401</td>\n",
       "      <td>2.744158</td>\n",
       "      <td>bp_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>30.333301</td>\n",
       "      <td>40.716563</td>\n",
       "      <td>8.714844</td>\n",
       "      <td>2012-07-26 02:35:01.240</td>\n",
       "      <td>2.834090</td>\n",
       "      <td>1.812604</td>\n",
       "      <td>64.889447</td>\n",
       "      <td>6.333856</td>\n",
       "      <td>bp_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>30.345020</td>\n",
       "      <td>40.760312</td>\n",
       "      <td>9.019531</td>\n",
       "      <td>2012-07-26 03:00:38.960</td>\n",
       "      <td>1.596869</td>\n",
       "      <td>0.918412</td>\n",
       "      <td>31.198687</td>\n",
       "      <td>2.347905</td>\n",
       "      <td>bp_4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>30.303516</td>\n",
       "      <td>40.713750</td>\n",
       "      <td>13.234375</td>\n",
       "      <td>2012-07-26 04:43:38.040</td>\n",
       "      <td>6.265708</td>\n",
       "      <td>2.957693</td>\n",
       "      <td>117.664229</td>\n",
       "      <td>5.721089</td>\n",
       "      <td>bp_5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>30.357227</td>\n",
       "      <td>40.718125</td>\n",
       "      <td>10.289062</td>\n",
       "      <td>2012-07-26 04:48:38.320</td>\n",
       "      <td>2.477989</td>\n",
       "      <td>0.819309</td>\n",
       "      <td>96.228056</td>\n",
       "      <td>3.641937</td>\n",
       "      <td>bp_6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>30.325488</td>\n",
       "      <td>40.696562</td>\n",
       "      <td>-1.949219</td>\n",
       "      <td>2012-07-26 08:08:25.680</td>\n",
       "      <td>2.006770</td>\n",
       "      <td>1.611699</td>\n",
       "      <td>108.800972</td>\n",
       "      <td>6.092968</td>\n",
       "      <td>bp_7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.719062</td>\n",
       "      <td>9.324219</td>\n",
       "      <td>2012-07-26 10:07:23.600</td>\n",
       "      <td>1.481483</td>\n",
       "      <td>0.810446</td>\n",
       "      <td>87.277455</td>\n",
       "      <td>2.363755</td>\n",
       "      <td>bp_8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>30.233691</td>\n",
       "      <td>40.636563</td>\n",
       "      <td>6.785156</td>\n",
       "      <td>2012-07-26 11:55:34.720</td>\n",
       "      <td>3.003351</td>\n",
       "      <td>1.349608</td>\n",
       "      <td>80.171367</td>\n",
       "      <td>2.019324</td>\n",
       "      <td>bp_9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>30.348926</td>\n",
       "      <td>40.732813</td>\n",
       "      <td>0.082031</td>\n",
       "      <td>2012-07-26 13:35:27.760</td>\n",
       "      <td>4.498397</td>\n",
       "      <td>2.129251</td>\n",
       "      <td>172.106328</td>\n",
       "      <td>7.869822</td>\n",
       "      <td>bp_10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>30.327441</td>\n",
       "      <td>40.727187</td>\n",
       "      <td>10.542969</td>\n",
       "      <td>2012-07-26 13:48:32.400</td>\n",
       "      <td>1.383007</td>\n",
       "      <td>0.681787</td>\n",
       "      <td>112.321231</td>\n",
       "      <td>1.336714</td>\n",
       "      <td>bp_11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>30.311328</td>\n",
       "      <td>40.711250</td>\n",
       "      <td>13.234375</td>\n",
       "      <td>2012-07-26 13:51:58.280</td>\n",
       "      <td>3.169682</td>\n",
       "      <td>1.731078</td>\n",
       "      <td>175.480728</td>\n",
       "      <td>4.493777</td>\n",
       "      <td>bp_12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.720312</td>\n",
       "      <td>9.628906</td>\n",
       "      <td>2012-07-26 13:53:31.480</td>\n",
       "      <td>1.122424</td>\n",
       "      <td>0.620505</td>\n",
       "      <td>85.548864</td>\n",
       "      <td>1.797137</td>\n",
       "      <td>bp_13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>30.347461</td>\n",
       "      <td>40.716875</td>\n",
       "      <td>9.070312</td>\n",
       "      <td>2012-07-26 13:56:54.200</td>\n",
       "      <td>2.019575</td>\n",
       "      <td>0.882570</td>\n",
       "      <td>78.877627</td>\n",
       "      <td>4.728404</td>\n",
       "      <td>bp_14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>30.333301</td>\n",
       "      <td>40.691563</td>\n",
       "      <td>-0.222656</td>\n",
       "      <td>2012-07-26 15:06:22.200</td>\n",
       "      <td>6.860103</td>\n",
       "      <td>2.491943</td>\n",
       "      <td>7.683575</td>\n",
       "      <td>3.876997</td>\n",
       "      <td>bp_15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>30.369922</td>\n",
       "      <td>40.716250</td>\n",
       "      <td>8.359375</td>\n",
       "      <td>2012-07-26 17:28:20.320</td>\n",
       "      <td>4.576132</td>\n",
       "      <td>1.807216</td>\n",
       "      <td>72.137583</td>\n",
       "      <td>7.835811</td>\n",
       "      <td>bp_16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    longitude   latitude      depth             origin_time  hmax_unc  \\\n",
       "0   30.345996  40.720312  11.152344 2012-07-26 01:10:21.760  2.279654   \n",
       "1   30.345508  40.726875  11.914062 2012-07-26 01:15:53.520  4.970115   \n",
       "2   30.230000  40.630000  -0.500000 2012-07-26 01:57:56.160  8.657532   \n",
       "3   30.333301  40.716563   8.714844 2012-07-26 02:35:01.240  2.834090   \n",
       "4   30.345020  40.760312   9.019531 2012-07-26 03:00:38.960  1.596869   \n",
       "5   30.303516  40.713750  13.234375 2012-07-26 04:43:38.040  6.265708   \n",
       "6   30.357227  40.718125  10.289062 2012-07-26 04:48:38.320  2.477989   \n",
       "7   30.325488  40.696562  -1.949219 2012-07-26 08:08:25.680  2.006770   \n",
       "8   30.345996  40.719062   9.324219 2012-07-26 10:07:23.600  1.481483   \n",
       "9   30.233691  40.636563   6.785156 2012-07-26 11:55:34.720  3.003351   \n",
       "10  30.348926  40.732813   0.082031 2012-07-26 13:35:27.760  4.498397   \n",
       "11  30.327441  40.727187  10.542969 2012-07-26 13:48:32.400  1.383007   \n",
       "12  30.311328  40.711250  13.234375 2012-07-26 13:51:58.280  3.169682   \n",
       "13  30.345996  40.720312   9.628906 2012-07-26 13:53:31.480  1.122424   \n",
       "14  30.347461  40.716875   9.070312 2012-07-26 13:56:54.200  2.019575   \n",
       "15  30.333301  40.691563  -0.222656 2012-07-26 15:06:22.200  6.860103   \n",
       "16  30.369922  40.716250   8.359375 2012-07-26 17:28:20.320  4.576132   \n",
       "\n",
       "    hmin_unc  az_hmax_unc  vmax_unc event_id  \n",
       "0   1.184107   101.432332  2.431673     bp_0  \n",
       "1   1.854803   107.194478  5.657299     bp_1  \n",
       "2   0.863562    58.590401  2.744158     bp_2  \n",
       "3   1.812604    64.889447  6.333856     bp_3  \n",
       "4   0.918412    31.198687  2.347905     bp_4  \n",
       "5   2.957693   117.664229  5.721089     bp_5  \n",
       "6   0.819309    96.228056  3.641937     bp_6  \n",
       "7   1.611699   108.800972  6.092968     bp_7  \n",
       "8   0.810446    87.277455  2.363755     bp_8  \n",
       "9   1.349608    80.171367  2.019324     bp_9  \n",
       "10  2.129251   172.106328  7.869822    bp_10  \n",
       "11  0.681787   112.321231  1.336714    bp_11  \n",
       "12  1.731078   175.480728  4.493777    bp_12  \n",
       "13  0.620505    85.548864  1.797137    bp_13  \n",
       "14  0.882570    78.877627  4.728404    bp_14  \n",
       "15  2.491943     7.683575  3.876997    bp_15  \n",
       "16  1.807216    72.137583  7.835811    bp_16  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bp_catalog = pd.read_csv(\n",
    "    os.path.join(BPMF.cfg.OUTPUT_PATH, BACKPROJECTION_CATALOG_FILENAME),\n",
    "    index_col=0\n",
    ")\n",
    "# add event ids\n",
    "for i in range(len(bp_catalog)):\n",
    "    bp_catalog.loc[i, \"event_id\"] = f\"bp_{i}\"\n",
    "# convert origin times from string to pandas.Timestamp\n",
    "bp_catalog[\"origin_time\"] = pd.to_datetime(bp_catalog[\"origin_time\"])\n",
    "bp_catalog"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# catalog merging parameters\n",
    "dt_criterion_pd = pd.Timedelta(DT_CRITERION_SEC, \"s\")\n",
    "HMAX_UNC_CRITERION_KM = 10."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Loop through BP cat: 100%|██████████| 17/17 [00:00<00:00, 818.04it/s]\n"
     ]
    }
   ],
   "source": [
    "final_catalog = tm_catalog.copy()\n",
    "missing_event = np.zeros(len(bp_catalog), dtype=bool)\n",
    "\n",
    "for i in tqdm(range(len(bp_catalog)), desc=\"Loop through BP cat\"):\n",
    "    if bp_catalog.iloc[i][\"hmax_unc\"] > HMAX_UNC_CRITERION_KM:\n",
    "        continue\n",
    "    t_min = bp_catalog.iloc[i][\"origin_time\"] - dt_criterion_pd\n",
    "    t_max = bp_catalog.iloc[i][\"origin_time\"] + dt_criterion_pd\n",
    "    subset_tm = (tm_catalog[\"origin_time\"] > t_min) & (tm_catalog[\"origin_time\"] < t_max)\n",
    "    if np.sum(subset_tm) == 0:\n",
    "        missing_event[i] = True\n",
    "\n",
    "final_catalog = pd.concat(\n",
    "        (tm_catalog, bp_catalog[missing_event]),\n",
    "        ignore_index=True\n",
    "        )\n",
    "final_catalog.sort_values(\n",
    "        \"origin_time\", ascending=True, inplace=True\n",
    "        )"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And here is the final catalog! In this simple example, it appears that all events in the backprojection catalog were re-detected in the template matching catalog so that the final catalog has no extra events with respect to the template matching catalog. However, it may not be always like that. Some events in the backprojection catalog may not have been well enough located for you to use them as templates, and they may not have been subsequently re-detected in the template matching catalog."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>event_id</th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>depth</th>\n",
       "      <th>origin_time</th>\n",
       "      <th>cc</th>\n",
       "      <th>tid</th>\n",
       "      <th>origin_time_sec</th>\n",
       "      <th>interevent_time_sec</th>\n",
       "      <th>unique_event</th>\n",
       "      <th>hmax_unc</th>\n",
       "      <th>hmin_unc</th>\n",
       "      <th>az_hmax_unc</th>\n",
       "      <th>vmax_unc</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>event_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>tm_10.0</th>\n",
       "      <td>tm_10.0</td>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.720312</td>\n",
       "      <td>9.628906</td>\n",
       "      <td>2012-07-26 00:58:10.920</td>\n",
       "      <td>0.384727</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>0.20</td>\n",
       "      <td>True</td>\n",
       "      <td>1.122424</td>\n",
       "      <td>0.620505</td>\n",
       "      <td>85.548864</td>\n",
       "      <td>1.797137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tm_9.1</th>\n",
       "      <td>tm_9.1</td>\n",
       "      <td>30.311328</td>\n",
       "      <td>40.711250</td>\n",
       "      <td>13.234375</td>\n",
       "      <td>2012-07-26 00:58:16.280</td>\n",
       "      <td>0.346683</td>\n",
       "      <td>9.0</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>0.16</td>\n",
       "      <td>True</td>\n",
       "      <td>3.169682</td>\n",
       "      <td>1.731078</td>\n",
       "      <td>175.480728</td>\n",
       "      <td>4.493777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tm_10.2</th>\n",
       "      <td>tm_10.2</td>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.720312</td>\n",
       "      <td>9.628906</td>\n",
       "      <td>2012-07-26 00:59:12.640</td>\n",
       "      <td>0.241314</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.343264e+09</td>\n",
       "      <td>56.00</td>\n",
       "      <td>True</td>\n",
       "      <td>1.122424</td>\n",
       "      <td>0.620505</td>\n",
       "      <td>85.548864</td>\n",
       "      <td>1.797137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tm_0.2</th>\n",
       "      <td>tm_0.2</td>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.720312</td>\n",
       "      <td>11.152344</td>\n",
       "      <td>2012-07-26 01:02:52.880</td>\n",
       "      <td>0.283464</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.343265e+09</td>\n",
       "      <td>220.24</td>\n",
       "      <td>True</td>\n",
       "      <td>0.951192</td>\n",
       "      <td>0.630704</td>\n",
       "      <td>107.775447</td>\n",
       "      <td>1.465581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tm_10.4</th>\n",
       "      <td>tm_10.4</td>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.720312</td>\n",
       "      <td>9.628906</td>\n",
       "      <td>2012-07-26 01:03:46.840</td>\n",
       "      <td>0.384105</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.343265e+09</td>\n",
       "      <td>0.20</td>\n",
       "      <td>True</td>\n",
       "      <td>1.122424</td>\n",
       "      <td>0.620505</td>\n",
       "      <td>85.548864</td>\n",
       "      <td>1.797137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tm_3.11</th>\n",
       "      <td>tm_3.11</td>\n",
       "      <td>30.303516</td>\n",
       "      <td>40.713750</td>\n",
       "      <td>13.234375</td>\n",
       "      <td>2012-07-26 14:38:50.240</td>\n",
       "      <td>0.244576</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.343314e+09</td>\n",
       "      <td>2515.96</td>\n",
       "      <td>True</td>\n",
       "      <td>6.265708</td>\n",
       "      <td>2.957693</td>\n",
       "      <td>117.664229</td>\n",
       "      <td>5.721089</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tm_4.11</th>\n",
       "      <td>tm_4.11</td>\n",
       "      <td>30.357227</td>\n",
       "      <td>40.718125</td>\n",
       "      <td>10.289062</td>\n",
       "      <td>2012-07-26 14:49:28.240</td>\n",
       "      <td>0.227342</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.343314e+09</td>\n",
       "      <td>637.80</td>\n",
       "      <td>True</td>\n",
       "      <td>2.477989</td>\n",
       "      <td>0.819309</td>\n",
       "      <td>96.228056</td>\n",
       "      <td>3.641937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tm_11.0</th>\n",
       "      <td>tm_11.0</td>\n",
       "      <td>30.327197</td>\n",
       "      <td>40.601719</td>\n",
       "      <td>-1.974609</td>\n",
       "      <td>2012-07-26 15:06:22.200</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1.343315e+09</td>\n",
       "      <td>1013.96</td>\n",
       "      <td>True</td>\n",
       "      <td>6.860103</td>\n",
       "      <td>2.491943</td>\n",
       "      <td>-172.316425</td>\n",
       "      <td>3.876997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tm_6.3</th>\n",
       "      <td>tm_6.3</td>\n",
       "      <td>30.345996</td>\n",
       "      <td>40.719062</td>\n",
       "      <td>9.324219</td>\n",
       "      <td>2012-07-26 16:26:52.400</td>\n",
       "      <td>0.239987</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1.343320e+09</td>\n",
       "      <td>4830.20</td>\n",
       "      <td>True</td>\n",
       "      <td>1.481483</td>\n",
       "      <td>0.810446</td>\n",
       "      <td>87.277455</td>\n",
       "      <td>2.363755</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tm_12.0</th>\n",
       "      <td>tm_12.0</td>\n",
       "      <td>30.449023</td>\n",
       "      <td>40.721875</td>\n",
       "      <td>8.460938</td>\n",
       "      <td>2012-07-26 17:28:20.320</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>12.0</td>\n",
       "      <td>1.343324e+09</td>\n",
       "      <td>3687.92</td>\n",
       "      <td>True</td>\n",
       "      <td>4.576132</td>\n",
       "      <td>1.807216</td>\n",
       "      <td>72.137583</td>\n",
       "      <td>7.835811</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>66 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         event_id  longitude   latitude      depth             origin_time  \\\n",
       "event_id                                                                     \n",
       "tm_10.0   tm_10.0  30.345996  40.720312   9.628906 2012-07-26 00:58:10.920   \n",
       "tm_9.1     tm_9.1  30.311328  40.711250  13.234375 2012-07-26 00:58:16.280   \n",
       "tm_10.2   tm_10.2  30.345996  40.720312   9.628906 2012-07-26 00:59:12.640   \n",
       "tm_0.2     tm_0.2  30.345996  40.720312  11.152344 2012-07-26 01:02:52.880   \n",
       "tm_10.4   tm_10.4  30.345996  40.720312   9.628906 2012-07-26 01:03:46.840   \n",
       "...           ...        ...        ...        ...                     ...   \n",
       "tm_3.11   tm_3.11  30.303516  40.713750  13.234375 2012-07-26 14:38:50.240   \n",
       "tm_4.11   tm_4.11  30.357227  40.718125  10.289062 2012-07-26 14:49:28.240   \n",
       "tm_11.0   tm_11.0  30.327197  40.601719  -1.974609 2012-07-26 15:06:22.200   \n",
       "tm_6.3     tm_6.3  30.345996  40.719062   9.324219 2012-07-26 16:26:52.400   \n",
       "tm_12.0   tm_12.0  30.449023  40.721875   8.460938 2012-07-26 17:28:20.320   \n",
       "\n",
       "                cc   tid  origin_time_sec  interevent_time_sec unique_event  \\\n",
       "event_id                                                                      \n",
       "tm_10.0   0.384727  10.0     1.343264e+09                 0.20         True   \n",
       "tm_9.1    0.346683   9.0     1.343264e+09                 0.16         True   \n",
       "tm_10.2   0.241314  10.0     1.343264e+09                56.00         True   \n",
       "tm_0.2    0.283464   0.0     1.343265e+09               220.24         True   \n",
       "tm_10.4   0.384105  10.0     1.343265e+09                 0.20         True   \n",
       "...            ...   ...              ...                  ...          ...   \n",
       "tm_3.11   0.244576   3.0     1.343314e+09              2515.96         True   \n",
       "tm_4.11   0.227342   4.0     1.343314e+09               637.80         True   \n",
       "tm_11.0   1.000000  11.0     1.343315e+09              1013.96         True   \n",
       "tm_6.3    0.239987   6.0     1.343320e+09              4830.20         True   \n",
       "tm_12.0   1.000000  12.0     1.343324e+09              3687.92         True   \n",
       "\n",
       "          hmax_unc  hmin_unc  az_hmax_unc  vmax_unc  \n",
       "event_id                                             \n",
       "tm_10.0   1.122424  0.620505    85.548864  1.797137  \n",
       "tm_9.1    3.169682  1.731078   175.480728  4.493777  \n",
       "tm_10.2   1.122424  0.620505    85.548864  1.797137  \n",
       "tm_0.2    0.951192  0.630704   107.775447  1.465581  \n",
       "tm_10.4   1.122424  0.620505    85.548864  1.797137  \n",
       "...            ...       ...          ...       ...  \n",
       "tm_3.11   6.265708  2.957693   117.664229  5.721089  \n",
       "tm_4.11   2.477989  0.819309    96.228056  3.641937  \n",
       "tm_11.0   6.860103  2.491943  -172.316425  3.876997  \n",
       "tm_6.3    1.481483  0.810446    87.277455  2.363755  \n",
       "tm_12.0   4.576132  1.807216    72.137583  7.835811  \n",
       "\n",
       "[66 rows x 14 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_catalog.set_index(\"event_id\", drop=False, inplace=True)\n",
    "final_catalog"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Save final catalog"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "# csv format\n",
    "final_catalog.to_csv(\n",
    "    os.path.join(BPMF.cfg.OUTPUT_PATH, OUTPUT_CSV_FILENAME)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# hdf5 / BPMF format\n",
    "for i in range(len(final_catalog)):\n",
    "    evid = final_catalog.iloc[i][\"event_id\"]\n",
    "    if evid[:2] == \"tm\":\n",
    "        events[evid.split(\"_\")[1]].write(\n",
    "            OUTPUT_DB_FILENAME,\n",
    "            db_path=BPMF.cfg.OUTPUT_PATH,\n",
    "            gid=evid\n",
    "        )\n",
    "    elif evid[:2] == \"bp\":\n",
    "        with h5.File(os.path.join(BPMF.cfg.OUTPUT_PATH, OUTPUT_DB_FILENAME), mode=\"a\") as fout:\n",
    "            with h5.File(os.path.join(BPMF.cfg.OUTPUT_PATH, BACKPROJ_DB_FILENAME), mode=\"r\") as fin:\n",
    "                # copy the corresponding hdf5 group into fout\n",
    "                fin.copy(fin[evid.split(\"_\")[1]], fout)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.10.4 ('hy7_py310')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "221f0e5b1b98151b07a79bf3b6d0c1d306576197d2c4531763770570a29e708e"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
